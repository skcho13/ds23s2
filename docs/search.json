[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "contents/intro.html#미래-데이터의-중요성",
    "href": "contents/intro.html#미래-데이터의-중요성",
    "title": "데이터 분석 및 시각화",
    "section": "미래 데이터의 중요성",
    "text": "미래 데이터의 중요성\n4차 산업혁명의 ‘원유’: 머신러닝, AI\n\n다양한 소스들로부터 데이터 생성: 전지구적 개인과 환경에 대한 상세한 정보 발생\n인터넷 & 통신 (SNS, 사진, 위치, 장소, 유동인구, 상품거래)\n사물인터넷 (IoT), CCTV\n스마트 팩토리, 파밍\n게놈프로젝트, 생체정보: 인류, 실시간\n의료서비스, 보건\n자율주행차량: 내부, 외부\n금융정보 및 흐름\n사회 지표, 설문 조사: 고용, 물류, 직업, 연봉, 만족도 조사, 우울\n\n\n\n\n\n\n유토피아 vs. 디스토피아?\n\n초연결성, 투명성\n완전한 감시와 통제\n\n\n\n\n\n개인정보의 가치\n\n정보의 주권, 매매, 웹3(Web3)"
  },
  {
    "objectID": "contents/intro.html#data-science",
    "href": "contents/intro.html#data-science",
    "title": "데이터 분석 및 시각화",
    "section": "Data Science",
    "text": "Data Science\n\n\n\n소프트웨어 개발\n\n데이터에 기반한 분석 위해 작동하도록 프로그래밍을 하여 운영되도록 하는 일\n주로 전통적인 컴퓨터 사이언스의 커리큘럼에 의해 트레이닝\n\n유튜브의 영상 추천\n페이스북의 친구 매칭\n스팸메일 필터링\n자율주행\n\n\n\n\n\n데이터 분석\n\n하나의 구체적인 질문에 답하고자 함\n다양한 소스의 정제되는 않은 데이터를 통합하거나 가공하는 기술이 요구\n\nDNA의 분석을 통해 특정 질병의 발병 인자를 탐색\n유동인구와 매출을 분석해 상권을 분석\n어떤 정책의 유효성을 분석에 정책결정에 공헌\n교통 흐름의 지연이 어떻게 발생하는지를 분석, 해결책 제시\n\n\n\n\n\n대부분의 경우 양쪽 모두에 걸쳐있음."
  },
  {
    "objectID": "contents/intro.html#data-analysis",
    "href": "contents/intro.html#data-analysis",
    "title": "데이터 분석 및 시각화",
    "section": "Data Analysis",
    "text": "Data Analysis\n\n\n\n오랜동안 여러 분야에서 각자의 방식을 개발\nComputer Science\nStatistics\nBiostatistics\nEconomics\nEpidemiology\nPolitical Science\nEngineering\n\n\n\n서로 다른 용어를 쓰기도 하며, 그 분야에서 필요로하는 방식에 초점을 맞춤.\n\n서로 의사소통이 거의 없었음.\n\nData Science라는 이름하에 통합되어가는 과정 중\n\n\n\n\n\n컴퓨터 사이언스의 경우, 주로 분류나 예측을 위한 이론과 툴들이 개발되는 반면,\n\n사회과학자들은 예측에는 관심이 없으며, 변수들 간의 진정한 관계 혹은 인과관계를 탐구\n현재 이 둘은 소위 cross-fertilization을 지향하며 같이 발전, 통합되어가고 있음.\n\n\n  Breiman, L. (2001). Statistical modeling: The two cultures (with comments and a rejoinder by the author). Statistical science, 16(3), 199-231.\n\n\n본 강의에서는 분석의 기초를 적절한 밸런스를 갖춰 제시한 R for Data Science by Wickham & Grolemund의 전개 방식을 따르고자 함."
  },
  {
    "objectID": "contents/intro.html#데이터를-분석한다는-것은",
    "href": "contents/intro.html#데이터를-분석한다는-것은",
    "title": "데이터 분석 및 시각화",
    "section": "데이터를 분석한다는 것은?",
    "text": "데이터를 분석한다는 것은?\n예측 모델 vs. 관계/원인 분석\n\n\n\n\n\n예측 모델\n예측의 신속성과 정확성\nMachine Learning 강점\nAlgorithmic\n\n고양이인가 아닌가? 예측의 정확성\n개인화된 추천 목록: 유튜브, 넷플릭스\n시리의 답변\n비즈니스 분석\n\n\n\n\n\n관계/원인 분석\n현상 본질과 매커니즘 파악\nStatistical Models 강점 Parametric\n\nQ: 닭의 울음이 태양을 솟게 하는가?\n돈과 행복: 패턴 vs. 예외\n\n\n\n\n\n가난, 인종, 범죄\n임금 차별\n\n\n\n\n\n출산율의 감소\n\n\n\n\n\n\n\n\n\n\n\n\n심리적 관성/편견 주의\n분석가의 책임의식\n두 가지는 서로 상보 관계!"
  },
  {
    "objectID": "contents/intro.html#데이터를-분석한다는-것은-1",
    "href": "contents/intro.html#데이터를-분석한다는-것은-1",
    "title": "데이터 분석 및 시각화",
    "section": "데이터를 분석한다는 것은?",
    "text": "데이터를 분석한다는 것은?\n전통적인 분류\n\n\n\n\n탐색적 분석 vs. 가설 검증\nexploratory vs. confirmatory\n\n탐색적 분석\n\n통찰 혹은 가설의 기초 제공\n끼워 맞추기? 오류에 빠지기 쉬움\n\n가설 검증\n\n진위의 확률을 높임\n탐색적 분석으로부터 온 가설은 재테스트\n\n\n\n\n\n관찰 vs. 실험 데이터\nobservational vs. experimental\n\n당근과 시력?\n커피의 효과?\n남녀의 임금 차별?\n\n\n  \n\n기술적 vs. 추론적 분석\ndescriptive vs. inferential\n\n연봉과 삶의 만족도와 관계\n두통약의 효능"
  },
  {
    "objectID": "contents/intro.html#통계적-사고-i",
    "href": "contents/intro.html#통계적-사고-i",
    "title": "데이터 분석 및 시각화",
    "section": "통계적 사고 I",
    "text": "통계적 사고 I\n\n\n\n\n남녀 임금의 차이\n\n\n\n\n\n\n\nConfounding\n\n\n머리가 길면 우울증도 높다?\n초등생이 발이 크면 독해력도 높다?\n\n\n\n\n\n\n\n\n\nSimpson’s paradox\n\n\n\n\n\n\nSource: The book of why by Judea Pearl"
  },
  {
    "objectID": "contents/intro.html#통계적-사고-ii",
    "href": "contents/intro.html#통계적-사고-ii",
    "title": "데이터 분석 및 시각화",
    "section": "통계적 사고 II",
    "text": "통계적 사고 II\n\n\n\n\n레몬과 괴혈병\n\n남녀 연봉 차이의 원인?\n\n직업 특성, 부서, 직급, 연령, 출산, 출세욕\n\n\n\n\n\n\n\n\n수집된 데이터의 성격\nSelection Bias\n\n\n노인에 관한 데이터: 누가 사망했는가?\n설문 데이터: 누가 참여했는가?\n회사 내에서의 만족도 조사: 샘플 속성의 변화\n코호트/특정세대의 특성: 그들의 특성인가?"
  },
  {
    "objectID": "contents/intro.html#데이터-시각화",
    "href": "contents/intro.html#데이터-시각화",
    "title": "데이터 분석 및 시각화",
    "section": "데이터 시각화",
    "text": "데이터 시각화\nData Visualization \n\n\n분석도구: 현미경, 연장도구\n강점이자 약점\n\n\n\n\n\n\n\n효과적/미적인 정보 전달 수단\n효과적이고 임팩트있도록 infographics \n\n\nInteractive"
  },
  {
    "objectID": "contents/notice.html",
    "href": "contents/notice.html",
    "title": "Notice",
    "section": "",
    "text": "4.2(일) 자정까지\n\nPlots 섹션 마지막에 있는 연습문제에서 tips나 houses 데이터 중 하나 혹은 섞어서 Plots 단원에서 다뤘던 시각화를 적용해보기\n.ipynb 파일로 eclass에 제출\n\n4.12(수) 1:00pm 수업 전까지\n\nTransforming I 연습문제\nA, B 파트 전부와 C 파트는 할 수 있는 만큼\nTransforming II 연습문제\n1 ~ 8번 모두\n\n4.19(월) 1:00pm 수업 전까지\n\n연습문제 Billboard\n1 ~ 8번 모두\n연습문제 MovieLens\n1 ~ 12번"
  },
  {
    "objectID": "contents/notice.html#중간고사-4.24-수정됨",
    "href": "contents/notice.html#중간고사-4.24-수정됨",
    "title": "Notice",
    "section": "중간고사 4.24 (수정됨)",
    "text": "중간고사 4.24 (수정됨)"
  },
  {
    "objectID": "contents/notice.html#기말고사-6.14",
    "href": "contents/notice.html#기말고사-6.14",
    "title": "Notice",
    "section": "기말고사 6.14",
    "text": "기말고사 6.14"
  },
  {
    "objectID": "contents/notice.html#개별-프로젝트",
    "href": "contents/notice.html#개별-프로젝트",
    "title": "Notice",
    "section": "개별 프로젝트",
    "text": "개별 프로젝트"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome",
    "section": "",
    "text": "강사: 조성균 / sk.cho@snu.ac.kr\n면담 시간: 수업 후\n조교: 정은정 / gtsyej11@naver.com\n수업시간: 월, 수 1:00 ~ 2:50PM\nWebsite: da.modellings.art\n과제: Notice\n질문: Communicate/Ask"
  },
  {
    "objectID": "index.html#강의-개요",
    "href": "index.html#강의-개요",
    "title": "Welcome",
    "section": "강의 개요",
    "text": "강의 개요\n본 강의에서는 인터넷과 기술의 발전으로 풍부한 데이터들이 양산됨에 따라 그 안에 숨겨진 패턴을 찾고 분석하여 실증적 사실과 원리를 파악하는데 요구되는 기술들을 계발하는데 도움을 주고자 합니다. 이를 위해서는 1) 데이터 분석 툴을 자유자재로 다룰 수 있는 기술, 2) 주어진 데이터에 적절한 툴을 선택할 수 있는 판단력, 3) 파악한 패턴으로부터 현상의 본질을 추론할 수 있는 인과관계 추론의 원리들이 함께 필요합니다.\n수업은 크게 4부분으로 나뉨\n\n데이터 시각화와 탐색적 분석 (exploratory data analysis)\n모델링 (modelling)\n통계 (statistics)\n기술적 분석 (descriptive analysis)\n\n\n교재\n\n번역서: Pandas를 이용한 데이터 분석 실습 2/e\nHands-On Data Analysis with Pandas (2e) by Stefanie Molin: code in GitHub\nPython for Data Analysis (3e) by Wes McKinney: code in GitHub\n2판 번역서: 파이썬 라이브러리를 활용한 데이터 분석\nR for Data Science by Wickham & Grolemund; 2e in progress"
  },
  {
    "objectID": "index.html#수업-활동",
    "href": "index.html#수업-활동",
    "title": "Welcome",
    "section": "수업 활동",
    "text": "수업 활동\n출석 (5%), 일반과제 (25%), 중간고사 (20%), 기말고사 (20%), 개별 프로젝트 (30%)"
  },
  {
    "objectID": "contents/alt_plots.html",
    "href": "contents/alt_plots.html",
    "title": "Alternative plots",
    "section": "",
    "text": "alternatives: plotly, seaborn\n\n\n\nimport plotly.express as px\n\npx.scatter(mpg, x=\"displ\", y=\"hwy\", color=\"drv\", trendline=\"lowess\")\n\n\n                                                \n\n\n다음과 같이 smoothing parameter를 지정할 수 있음\n자세한 옵션은 여기 참조: plotly linear fits\n\n(\n    px.scatter(mpg, x=\"displ\", y=\"hwy\", color=\"drv\", \n               trendline=\"lowess\", trendline_options=dict(frac=0.3)) # smoothing parameter \n    .update_layout(width=600, height=500)\n)\n\n\n                                                \n\n\n\n(\n    px.scatter(penguins, x=\"bill_length_mm\", y=\"bill_depth_mm\", color=\"species\",\n               trendline=\"lowess\", trendline_options=dict(frac=0.5),\n               facet_col=\"island\", # faceting\n               opacity=0.5) # alpha\n    .update_layout(width=900, height=400)\n)\n\n\n                                                \n\n\n\n\n\n\n\nsns.lmplot(mpg, x=\"displ\", y=\"hwy\", hue=\"drv\", # color대신 hue\n           lowess=True, \n           scatter_kws={\"alpha\":.5, \"s\":20}, # s: point size\n           height=3, aspect=5/3) \nplt.show() # 생략해도 무방\n\n\n\n\n\npenguins = sns.load_dataset(\"penguins\")\n\nsns.lmplot(penguins, x=\"bill_length_mm\", y=\"bill_depth_mm\", hue=\"species\", \n           lowess=True, \n           col=\"sex\", # faceting: col, row\n           height=3, scatter_kws={\"alpha\":.5, \"s\":5})\n\n<seaborn.axisgrid.FacetGrid at 0x12fbb6700>"
  },
  {
    "objectID": "contents/alt_plots.html#box-plot",
    "href": "contents/alt_plots.html#box-plot",
    "title": "Alternative plots",
    "section": "Box plot",
    "text": "Box plot\n\npenguins = sns.load_dataset(\"penguins\")\n\n\nimport plotly.express as px\npx.box(penguins.dropna(subset=[\"sex\"]), x=\"species\", y=\"bill_length_mm\", color=\"island\",  facet_col=\"sex\")\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\n\npenguins = sns.load_dataset(\"penguins\")\n\nsns.catplot(\n    data=penguins, x=\"species\", y=\"bill_length_mm\", hue=\"sex\", col=\"island\",\n    kind=\"box\", height=4, aspect=.6,\n)\nplt.show()"
  },
  {
    "objectID": "contents/case1.html",
    "href": "contents/case1.html",
    "title": "Case study",
    "section": "",
    "text": "Load Packages\n# numerical calculation & data frames\nimport numpy as np\nimport pandas as pd\n\n# visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport seaborn.objects as so\n\n# statistics\nimport statsmodels.api as sm"
  },
  {
    "objectID": "contents/case1.html#q1",
    "href": "contents/case1.html#q1",
    "title": "Case study",
    "section": "Q1",
    "text": "Q1\n각 도착지에 따른 비행거리와 도착지연시간과의 관계를 알아보고자 함.\n\nGroup flights by destination.\nSummarise to compute distance, average delay, and number of flights.\nFilter to remove noisy points and Honolulu airport, which is almost twice as far away as the next closest airport.\n\n\n# Load the nycflight13 dataset\nflights = sm.datasets.get_rdataset(\"flights\", \"nycflights13\").data.drop(columns=\"time_hour\")\n\n\n# grouping by destinations\nby_dest = flights.groupby(\"dest\")\n\n\ndelay = by_dest[[\"distance\", \"arr_delay\"]].agg([\"size\", \"mean\"])\ndelay.head()\n\n     distance         arr_delay      \n         size    mean      size  mean\ndest                                 \nABQ       254 1826.00       254  4.38\nACK       265  199.00       265  4.85\nALB       439  143.00       439 14.40\nANC         8 3370.00         8 -2.50\nATL     17215  757.11     17215 11.30\n\n\n\ndelay.columns = ['_'.join(col_agg) for col_agg in delay.columns] # columns 이름을 새로 부여\ndelay.drop(columns=\"arr_delay_size\", inplace=True) # arr_delay_count 열 삭제\ndelay.columns = [\"count\", \"dist\", \"delays\"] # rename the columns\ndelay.reset_index(inplace=True) # reset index (dest)\n\n\ndelay.head()\n\n  dest  count    dist  delays\n0  ABQ    254 1826.00    4.38\n1  ACK    265  199.00    4.85\n2  ALB    439  143.00   14.40\n3  ANC      8 3370.00   -2.50\n4  ATL  17215  757.11   11.30\n\n\n\n(\n    so.Plot(delay, x=\"dist\", y=\"delays\")\n    .add(so.Dots(), pointsize=\"count\")\n    .add(so.Line(), so.PolyFit(5))\n    .scale(pointsize=(2, 20))\n)\n\n\n\n\n불필요한 자료를 제거하고 시각화하는 것이 유리\n\n# Filter to remove noisy points and Honolulu airport\ndelay_sub = delay.query('count > 20 & dest != \"HNL\"')\n(\n    so.Plot(delay_sub, x=\"dist\", y=\"delays\")\n    .add(so.Dots(), pointsize=\"count\")\n    .add(so.Line(), so.PolyFit(5))\n    .scale(pointsize=(2, 20))\n)\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n다음과 같이 제외되는 자료에 대해 label 혹은 True/False을 붙여 관리하는 것도 방법\nidx = (delay[\"count\"] > 20) & (delay[\"dest\"] != \"HNL\")\ndelay[\"incl\"] = np.where(idx, \"out\", \"in\")  # idx가 True인 곳은 \"out\", False인 곳은 \"in\"\ndelay\n#   dest  count    dist  delay incl\n# 0  ABQ    254 1826.00   4.38  out\n# 1  ACK    265  199.00   4.85  out\n# 2  ALB    439  143.00  14.40  out\n# 3  ANC      8 3370.00  -2.50   in\n# 4  ATL  17215  757.11  11.30  out\n...\n\n# 제외되는 데이터를 같이 볼 수 있음\n(\n    so.Plot(delay, x=\"dist\", y=\"delay\", color=\"incl\")\n    .add(so.Dots(), pointsize=\"count\")\n    .add(so.Line(), so.PolyFit(5))\n    .scale(pointsize=(5, 20))\n)"
  },
  {
    "objectID": "contents/case1.html#q2",
    "href": "contents/case1.html#q2",
    "title": "Case study",
    "section": "Q2",
    "text": "Q2\n평균적으로 가장 연착시간이 큰 항공기(tail number로 구분)를 살펴보는데,\n우선, count()를 사용하여 샘플 수가 극히 작은 케이스들 혹은 극단치들을 제거해서 살펴보는 것이 유리함.\n\ndelays = flights.groupby(\"tailnum\")[[\"arr_delay\"]].mean() # as DataFrame\ndelays\n\n         arr_delay\ntailnum           \nD942DN       31.50\nN0EGMQ        9.98\nN10156       12.72\n...            ...\nN998DL       16.39\nN999DN       14.31\nN9EAMQ        9.24\n\n[4043 rows x 1 columns]\n\n\n\n(\n    so.Plot(delays, x=\"arr_delay\")\n    .add(so.Line(), so.Hist())\n)\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\npandas DataFrame method\ndelays.hist(bins=100)\n\n\n300분이 넘는 delay도 있음을 보는데, 각 평균 delay값이 몇 개 항목의 평균인지 살펴보면 흥미로운 사실을 발견할 수 있음. 즉,\n\ndelays = (\n    flights\n    .groupby(\"tailnum\")[\"arr_delay\"]\n    .agg([(\"delay\", \"mean\"), (\"n\", \"count\")])\n)\ndelays\n\n         delay    n\ntailnum            \nD942DN   31.50    4\nN0EGMQ    9.98  352\nN10156   12.72  145\n...        ...  ...\nN998DL   16.39   76\nN999DN   14.31   61\nN9EAMQ    9.24  238\n\n[4043 rows x 2 columns]\n\n\n\n(\n    so.Plot(delays, x=\"n\", y=\"delay\")\n    .add(so.Dots(alpha=.1))\n)\n\n\n\n\n비행횟수가 작을수록 편차가 크게 나타나는데,\n일반적으로 샘플수가 클수록 평균들의 편차가 줄어드는 현상이 나타남.\n위와 같은 플랏을 볼 때, 샘플 수가 매우 작은 그룹들은 제외하고 살펴보는 것이 패턴을 파악하는데 종종 도움이 됨.\n간단하게, query() method를 이용하면 편리\n\n(\n    so.Plot(delays.query('n > 25'), x=\"n\", y=\"delay\")\n    .add(so.Dots(alpha=.1))\n)"
  },
  {
    "objectID": "contents/case1.html#q3",
    "href": "contents/case1.html#q3",
    "title": "Case study",
    "section": "Q3",
    "text": "Q3\n\n# Lahman's Baseball Database\nbatting = pd.read_csv(\"https://raw.githubusercontent.com/beanumber/baseball_R/master/data/Batting.csv\") \n\n\nbatting\n\n        playerID  yearID  stint teamID lgID    G  G_batting     AB     R  \\\n0      aardsda01    2004      1    SFN   NL   11         11   0.00  0.00   \n1      aardsda01    2006      1    CHN   NL   45         43   2.00  0.00   \n2      aardsda01    2007      1    CHA   AL   25          2   0.00  0.00   \n...          ...     ...    ...    ...  ...  ...        ...    ...   ...   \n95192  zwilldu01    1914      1    CHF   FL  154        154 592.00 91.00   \n95193  zwilldu01    1915      1    CHF   FL  150        150 548.00 65.00   \n95194  zwilldu01    1916      1    CHN   NL   35         35  53.00  4.00   \n\n           H  ...    SB   CS    BB    SO  IBB  HBP    SH   SF  GIDP  G_old  \n0       0.00  ...  0.00 0.00  0.00  0.00 0.00 0.00  0.00 0.00  0.00  11.00  \n1       0.00  ...  0.00 0.00  0.00  0.00 0.00 0.00  1.00 0.00  0.00  45.00  \n2       0.00  ...  0.00 0.00  0.00  0.00 0.00 0.00  0.00 0.00  0.00   2.00  \n...      ...  ...   ...  ...   ...   ...  ...  ...   ...  ...   ...    ...  \n95192 185.00  ... 21.00  NaN 46.00 68.00  NaN 1.00 10.00  NaN   NaN 154.00  \n95193 157.00  ... 24.00  NaN 67.00 65.00  NaN 2.00 18.00  NaN   NaN 150.00  \n95194   6.00  ...  0.00  NaN  4.00  6.00  NaN 0.00  2.00  NaN   NaN  35.00  \n\n[95195 rows x 24 columns]\n\n\n\n# AB: At Bats 타석에 나선 횟수, H: Hits; times reached base 출루한 횟수\nbatters = batting.groupby(\"playerID\")[[\"H\", \"AB\"]].sum()\nbatters = batters.assign(\n    BA = lambda x: x.H / x.AB   # BA: batting average 타율\n)\nbatters\n\n                H       AB   BA\nplayerID                       \naardsda01    0.00     3.00 0.00\naaronha01 3771.00 12364.00 0.30\naaronto01  216.00   944.00 0.23\n...           ...      ...  ...\nzuvelpa01  109.00   491.00 0.22\nzuverge01   21.00   142.00 0.15\nzwilldu01  364.00  1280.00 0.28\n\n[17661 rows x 3 columns]\n\n\n\n# filtering없이 보았을 때와 비교해서 어느 정도 제외할지 고민\n(\n    so.Plot(batters.query('AB > 100'), x=\"AB\", y=\"BA\")\n    .add(so.Dots(alpha=.1))\n    .add(so.Line(color=\"orangered\"), so.PolyFit(5))\n)\n\n\n\n\n\n# 1번 기회를 얻은 타자... 타율 100%\nbatters.sort_values(\"BA\", ascending=False).head(10)\n\n             H   AB   BA\nplayerID                \npaciojo01 3.00 3.00 1.00\ngallaja01 1.00 1.00 1.00\nsellsda01 1.00 1.00 1.00\n...        ...  ...  ...\nkehnch01  2.00 2.00 1.00\ndevinha01 2.00 2.00 1.00\nliddeda01 1.00 1.00 1.00\n\n[10 rows x 3 columns]"
  },
  {
    "objectID": "contents/combine.html",
    "href": "contents/combine.html",
    "title": "Combine",
    "section": "",
    "text": "Load Packages\n# numerical calculation & data frames\nimport numpy as np\nimport pandas as pd\n\n# visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport seaborn.objects as so\n\n# statistics\nimport statsmodels.api as sm"
  },
  {
    "objectID": "contents/combine.html#keys-두-쌍의-테이블을-연결하는데-사용되는-변수",
    "href": "contents/combine.html#keys-두-쌍의-테이블을-연결하는데-사용되는-변수",
    "title": "Combine",
    "section": "Keys: 두 쌍의 테이블을 연결하는데 사용되는 변수",
    "text": "Keys: 두 쌍의 테이블을 연결하는데 사용되는 변수\n\nprimary key ~ foreign key: relation\n\nA primary key: uniquely identifies an observation in its own table.\n\nplanes의 tailnum\n\nA foreign key: uniquely identifies an observation in another table.\n\nflights의 tailnum in relation to planes\n\n\nrelation은 1-1, 1-many, many-1, many-many 일수 있음"
  },
  {
    "objectID": "contents/combine.html#primary-key를-확인하는-방법",
    "href": "contents/combine.html#primary-key를-확인하는-방법",
    "title": "Combine",
    "section": "Primary key를 확인하는 방법",
    "text": "Primary key를 확인하는 방법\nplanes의 경우 tailnum가 primary key?\n\nplanes.duplicated(subset=\"tailnum\").sum()\n\n0\n\n\n\n(planes.value_counts(\"tailnum\") > 1).sum()\n\n0\n\n\nweather의 경우 네 변수 year, month, day, hour, origin의 조합이 primary key일 수 있으나…\n\n(\n    weather[[\"year\", \"month\", \"day\", \"hour\", \"origin\"]]\n    .value_counts()\n    .reset_index(name=\"n\")\n    .query(\"n > 1\")\n)\n\n   year  month  day  hour origin  n\n0  2013     11    3     1    EWR  2\n1  2013     11    3     1    JFK  2\n2  2013     11    3     1    LGA  2\n\n\nprimary key가 되려면 다음과 같이 불명확한 정보를 처리한 후 사용\n\nweather[\n    weather.duplicated(subset=[\"year\", \"month\", \"day\", \"hour\", \"origin\"], keep=\"first\")\n]\n\n      origin  year  month  day  hour  temp  dewp  humid  wind_dir  wind_speed   \n7319     EWR  2013     11    3     1 50.00 39.02  65.80    290.00        5.75  \\\n16024    JFK  2013     11    3     1 51.98 37.94  58.62    310.00        6.90   \n24730    LGA  2013     11    3     1 53.96 39.92  58.89    310.00        8.06   \n\n       wind_gust  precip  pressure  visib            time_hour  \n7319         NaN    0.00   1010.50  10.00  2013-11-03 01:00:00  \n16024        NaN    0.00   1010.50  10.00  2013-11-03 01:00:00  \n24730        NaN    0.00   1010.20  10.00  2013-11-03 01:00:00  \n\n\nflights에 primary key가 있는가?\n\nflights.duplicated(subset=[\"year\", \"month\", \"day\", \"flight\"]).sum()\n\n32610\n\n\n\nflights.duplicated(subset=[\"year\", \"month\", \"day\", \"tailnum\"]).sum()\n\n85049"
  },
  {
    "objectID": "contents/combine.html#merge",
    "href": "contents/combine.html#merge",
    "title": "Combine",
    "section": "Merge",
    "text": "Merge\nInner join\n\ndf_x = pd.DataFrame({\"key\": [1, 2, 3], \"val_x\": [\"x1\", \"x2\", \"x3\"]})\ndf_y = pd.DataFrame({\"key\": [1, 2, 4], \"val_y\": [\"y1\", \"y2\", \"y3\"]})\n\n\n\n\n   key val_x\n0    1    x1\n1    2    x2\n2    3    x3\n\n\n   key val_y\n0    1    y1\n1    2    y2\n2    4    y3\n\n\n\n\n\npd.merge(df_x, df_y, on=\"key\")  # 공통의 column이 있을 시 \"on=\" 생략 가능\n\n   key val_x val_y\n0    1    x1    y1\n1    2    x2    y2\n\n\n\ndf_x.merge(df_y, on=\"key\")  # as a method\n\n   key val_x val_y\n0    1    x1    y1\n1    2    x2    y2\n\n\n\n\n\n\n\n\nNote\n\n\n\nmerge()는 default로 inner 방식으로 join하고, how=\"inner\"가 위에서 생략되었고, 다음과 동일\npd.merge(df_x, df_y, on=\"key\", how=\"inner\")\n다른 방식으로는 “left”, “right”, “outer”가 있음\n\nleft keeps all observations in x. : 가장 흔하게 쓰는 join. 기준이 되는 데이터가 존재\nright keeps all observations in y.\nouter keeps all observations in x and y.\n\n\n\n\n\n\npd.merge(df_x, df_y, how=\"left\")\n\n   key val_x val_y\n0    1    x1    y1\n1    2    x2    y2\n2    3    x3   NaN\n\n\n\npd.merge(df_x, df_y, how=\"right\")\n\n   key val_x val_y\n0    1    x1    y1\n1    2    x2    y2\n2    4   NaN    y3\n\n\n\npd.merge(df_x, df_y, how=\"outer\")\n\n   key val_x val_y\n0    1    x1    y1\n1    2    x2    y2\n2    3    x3   NaN\n3    4   NaN    y3\n\n\n\nDuplicate keys\n한쪽만 중복이 있는 경우\n\n\nflights2 = flights[\n    [\"year\", \"month\", \"day\", \"hour\", \"origin\", \"dest\", \"tailnum\", \"carrier\"]\n]\nflights2\n\n        year  month  day  hour origin dest tailnum carrier\n0       2013      1    1     5    EWR  IAH  N14228      UA\n1       2013      1    1     5    LGA  IAH  N24211      UA\n2       2013      1    1     5    JFK  MIA  N619AA      AA\n...      ...    ...  ...   ...    ...  ...     ...     ...\n336773  2013      9   30    12    LGA  BNA  N535MQ      MQ\n336774  2013      9   30    11    LGA  CLE  N511MQ      MQ\n336775  2013      9   30     8    LGA  RDU  N839MQ      MQ\n\n[336776 rows x 8 columns]\n\n\n\n# flights에 항공사의 full name을 추가하고자 할때,\n(\n    flights2\n    .drop([\"origin\", \"dest\"], axis=1)\n    .merge(airlines, on=\"carrier\", how=\"left\")\n)\n\n        year  month  day  hour tailnum carrier                    name\n0       2013      1    1     5  N14228      UA   United Air Lines Inc.\n1       2013      1    1     5  N24211      UA   United Air Lines Inc.\n2       2013      1    1     5  N619AA      AA  American Airlines Inc.\n...      ...    ...  ...   ...     ...     ...                     ...\n336773  2013      9   30    12  N535MQ      MQ               Envoy Air\n336774  2013      9   30    11  N511MQ      MQ               Envoy Air\n336775  2013      9   30     8  N839MQ      MQ               Envoy Air\n\n[336776 rows x 7 columns]\n\n\n두 쪽 모두 중복이 있는 경우: 조심!\ncan’t uniquely identify an observation; 가능한 모든 조합이 나타남\n\n\n\nDefining the key columns\nThe default, uses all variables that appear in both tables, the so called  natural join.\n\nflights2.merge(weather, how=\"left\")\n# on=[\"year\", \"month\", \"day\", \"hour\", \"origin\"]\n\n        year  month  day  hour origin dest tailnum carrier  temp  dewp  humid  \\\n0       2013      1    1     5    EWR  IAH  N14228      UA 39.02 28.04  64.43   \n1       2013      1    1     5    LGA  IAH  N24211      UA 39.92 24.98  54.81   \n2       2013      1    1     5    JFK  MIA  N619AA      AA 39.02 26.96  61.63   \n...      ...    ...  ...   ...    ...  ...     ...     ...   ...   ...    ...   \n336773  2013      9   30    12    LGA  BNA  N535MQ      MQ 69.08 48.02  46.99   \n336774  2013      9   30    11    LGA  CLE  N511MQ      MQ 66.92 48.92  52.35   \n336775  2013      9   30     8    LGA  RDU  N839MQ      MQ 60.98 51.08  69.86   \n\n        wind_dir  wind_speed  wind_gust  precip  pressure  visib  \\\n0         260.00       12.66        NaN    0.00   1011.90  10.00   \n1         250.00       14.96      21.86    0.00   1011.40  10.00   \n2         260.00       14.96        NaN    0.00   1012.10  10.00   \n...          ...         ...        ...     ...       ...    ...   \n336773     70.00        5.75        NaN    0.00   1016.70  10.00   \n336774     70.00        8.06        NaN    0.00   1017.50  10.00   \n336775       NaN        5.75        NaN    0.00   1018.60  10.00   \n\n                  time_hour  \n0       2013-01-01 05:00:00  \n1       2013-01-01 05:00:00  \n2       2013-01-01 05:00:00  \n...                     ...  \n336773  2013-09-30 12:00:00  \n336774  2013-09-30 11:00:00  \n336775  2013-09-30 08:00:00  \n\n[336776 rows x 18 columns]\n\n\nflights의 year와 planes의 year는 다른 의미의 year임\n중복된 이름은 따로 표기\n\nflights2.merge(planes, on=\"tailnum\", how=\"left\")\n# year_x, year_y로 구분되어 표시\n\n        year_x  month  day  hour origin dest tailnum carrier  year_y  \\\n0         2013      1    1     5    EWR  IAH  N14228      UA 1999.00   \n1         2013      1    1     5    LGA  IAH  N24211      UA 1998.00   \n2         2013      1    1     5    JFK  MIA  N619AA      AA 1990.00   \n...        ...    ...  ...   ...    ...  ...     ...     ...     ...   \n336773    2013      9   30    12    LGA  BNA  N535MQ      MQ     NaN   \n336774    2013      9   30    11    LGA  CLE  N511MQ      MQ     NaN   \n336775    2013      9   30     8    LGA  RDU  N839MQ      MQ     NaN   \n\n                           type manufacturer    model  engines  seats  speed  \\\n0       Fixed wing multi engine       BOEING  737-824     2.00 149.00    NaN   \n1       Fixed wing multi engine       BOEING  737-824     2.00 149.00    NaN   \n2       Fixed wing multi engine       BOEING  757-223     2.00 178.00    NaN   \n...                         ...          ...      ...      ...    ...    ...   \n336773                      NaN          NaN      NaN      NaN    NaN    NaN   \n336774                      NaN          NaN      NaN      NaN    NaN    NaN   \n336775                      NaN          NaN      NaN      NaN    NaN    NaN   \n\n           engine  \n0       Turbo-fan  \n1       Turbo-fan  \n2       Turbo-fan  \n...           ...  \n336773        NaN  \n336774        NaN  \n336775        NaN  \n\n[336776 rows x 16 columns]\n\n\nairports 데이터프레임에서 공항이름이 faa라는 이름의 column으로 존재.\n도착지(dest)의 공항정보를 얻으려면, faa와 dest를 매치시키고,\n출발지(origin)의 공항정보를 얻으려면, faa와 origin를 매치시켜야 함.\n\nairports\n\n      faa                           name   lat    lon   alt  tz dst  \\\n0     04G              Lansdowne Airport 41.13 -80.62  1044  -5   A   \n1     06A  Moton Field Municipal Airport 32.46 -85.68   264  -6   A   \n2     06C            Schaumburg Regional 41.99 -88.10   801  -6   A   \n...   ...                            ...   ...    ...   ...  ..  ..   \n1455  ZWI      Wilmington Amtrak Station 39.74 -75.55     0  -5   A   \n1456  ZWU       Washington Union Station 38.90 -77.01    76  -5   A   \n1457  ZYP                   Penn Station 40.75 -73.99    35  -5   A   \n\n                 tzone  \n0     America/New_York  \n1      America/Chicago  \n2      America/Chicago  \n...                ...  \n1455  America/New_York  \n1456  America/New_York  \n1457  America/New_York  \n\n[1458 rows x 8 columns]\n\n\n\nflights2.merge(airports, left_on=\"dest\", right_on=\"faa\", how=\"left\")\n\n        year  month  day  hour origin dest tailnum carrier  faa  \\\n0       2013      1    1     5    EWR  IAH  N14228      UA  IAH   \n1       2013      1    1     5    LGA  IAH  N24211      UA  IAH   \n2       2013      1    1     5    JFK  MIA  N619AA      AA  MIA   \n...      ...    ...  ...   ...    ...  ...     ...     ...  ...   \n336773  2013      9   30    12    LGA  BNA  N535MQ      MQ  BNA   \n336774  2013      9   30    11    LGA  CLE  N511MQ      MQ  CLE   \n336775  2013      9   30     8    LGA  RDU  N839MQ      MQ  RDU   \n\n                                name   lat    lon    alt    tz dst  \\\n0       George Bush Intercontinental 29.98 -95.34  97.00 -6.00   A   \n1       George Bush Intercontinental 29.98 -95.34  97.00 -6.00   A   \n2                         Miami Intl 25.79 -80.29   8.00 -5.00   A   \n...                              ...   ...    ...    ...   ...  ..   \n336773                Nashville Intl 36.12 -86.68 599.00 -6.00   A   \n336774        Cleveland Hopkins Intl 41.41 -81.85 791.00 -5.00   A   \n336775           Raleigh Durham Intl 35.88 -78.79 435.00 -5.00   A   \n\n                   tzone  \n0        America/Chicago  \n1        America/Chicago  \n2       America/New_York  \n...                  ...  \n336773   America/Chicago  \n336774  America/New_York  \n336775  America/New_York  \n\n[336776 rows x 16 columns]\n\n\n\nflights2.merge(airports, left_on=\"origin\", right_on=\"faa\", how=\"left\")\n\n        year  month  day  hour origin dest tailnum carrier  faa  \\\n0       2013      1    1     5    EWR  IAH  N14228      UA  EWR   \n1       2013      1    1     5    LGA  IAH  N24211      UA  LGA   \n2       2013      1    1     5    JFK  MIA  N619AA      AA  JFK   \n...      ...    ...  ...   ...    ...  ...     ...     ...  ...   \n336773  2013      9   30    12    LGA  BNA  N535MQ      MQ  LGA   \n336774  2013      9   30    11    LGA  CLE  N511MQ      MQ  LGA   \n336775  2013      9   30     8    LGA  RDU  N839MQ      MQ  LGA   \n\n                       name   lat    lon  alt  tz dst             tzone  \n0       Newark Liberty Intl 40.69 -74.17   18  -5   A  America/New_York  \n1                La Guardia 40.78 -73.87   22  -5   A  America/New_York  \n2       John F Kennedy Intl 40.64 -73.78   13  -5   A  America/New_York  \n...                     ...   ...    ...  ...  ..  ..               ...  \n336773           La Guardia 40.78 -73.87   22  -5   A  America/New_York  \n336774           La Guardia 40.78 -73.87   22  -5   A  America/New_York  \n336775           La Guardia 40.78 -73.87   22  -5   A  America/New_York  \n\n[336776 rows x 16 columns]"
  },
  {
    "objectID": "contents/combine.html#concatenate",
    "href": "contents/combine.html#concatenate",
    "title": "Combine",
    "section": "Concatenate",
    "text": "Concatenate\npd.concat([df1, df2, ...], axis=)\n행과 열의 index를 매치시켜 두 DataFrame/Series를 합침\n\ndf1 = pd.DataFrame(\n    np.arange(6).reshape(3, 2), index=[\"a\", \"b\", \"c\"], columns=[\"one\", \"two\"]\n)\n\ndf2 = pd.DataFrame(\n    5 + np.arange(4).reshape(2, 2), index=[\"a\", \"c\"], columns=[\"three\", \"four\"]\n)\n\n\n\n\n   one  two\na    0    1\nb    2    3\nc    4    5\n\n\n   three  four\na      5     6\nc      7     8\n\n\n\n\npd.concat([df1, df2], axis=1)\n\n   one  two  three  four\na    0    1   5.00  6.00\nb    2    3    NaN   NaN\nc    4    5   7.00  8.00\n\n\n\npd.concat([df1, df2])  # default: axis=0\n\n   one  two  three  four\na 0.00 1.00    NaN   NaN\nb 2.00 3.00    NaN   NaN\nc 4.00 5.00    NaN   NaN\na  NaN  NaN   5.00  6.00\nc  NaN  NaN   7.00  8.00"
  },
  {
    "objectID": "contents/combine.html#merge-problems",
    "href": "contents/combine.html#merge-problems",
    "title": "Combine",
    "section": "Merge problems:",
    "text": "Merge problems:\nmerge은 매우 조심스러운 작업!\n\nStart by identifying the variables that form the primary key in each table.\n\nYou should usually do this based on your understanding of the data, not empirically by looking for a combination of variables that give a unique identifier.\n\n# 확인작업은 기본\nweather[\n weather.duplicated(subset=[\"year\", \"month\", \"day\", \"hour\", \"origin\"], keep=False)\n]\n#       origin  year  month  day  hour  temp  dewp  humid  wind_dir  wind_speed  ...\n# 7318     EWR  2013     11    3     1 51.98 39.02  61.15    310.00        6.90   \n# 7319     EWR  2013     11    3     1 50.00 39.02  65.80    290.00        5.75   \n# 16023    JFK  2013     11    3     1 53.96 37.94  54.51    320.00        9.21   \n# 16024    JFK  2013     11    3     1 51.98 37.94  58.62    310.00        6.90   \n# 24729    LGA  2013     11    3     1 55.04 39.02  54.67    330.00        9.21   \n# 24730    LGA  2013     11    3     1 53.96 39.92  58.89    310.00        8.06 \nCheck that none of the variables in the primary key are missing. If a value is missing then it can’t identify an observation!\nCheck that your foreign keys match primary keys in another table.\n\nIt’s common for keys not to match because of data entry errors. Fixing these is often a lot of work.\nIf you do have missing keys, you’ll need to be thoughtful about your use of inner vs. outer joins, carefully considering whether or not you want to drop rows that don’t have a match."
  },
  {
    "objectID": "contents/crosstab.html",
    "href": "contents/crosstab.html",
    "title": "Cross-Tabulation and Pivot Tables",
    "section": "",
    "text": "Load Packages\n# numerical calculation & data frames\nimport numpy as np\nimport pandas as pd\n\n# visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport seaborn.objects as so\n\n# statistics\nimport statsmodels.api as sm"
  },
  {
    "objectID": "contents/crosstab.html#pd.crosstab",
    "href": "contents/crosstab.html#pd.crosstab",
    "title": "Cross-Tabulation and Pivot Tables",
    "section": "pd.crosstab()",
    "text": "pd.crosstab()\n두 카테고리 변수의 모든 level 쌍에 대한 count.\n\nnormalize: 비율을 계산\n\nmargins: 행과 열로 합\n\ngroupby()를 적용해 구할 수 있으나 좀 더 간결.\n\npd.crosstab(tips[\"day\"], tips[\"time\"])\n\ntime  Lunch  Dinner\nday                \nThur     61       1\nFri       7      12\nSat       0      87\nSun       0      76\n\n\n\n# groupby를 이용\ntips.groupby([\"day\", \"time\"]).size()\n\nday   time  \nThur  Lunch     61\n      Dinner     1\nFri   Lunch      7\n                ..\nSat   Dinner    87\nSun   Lunch      0\n      Dinner    76\nLength: 8, dtype: int64\n\n\n\n# groupby & unstack를 이용\ntips.groupby([\"day\", \"time\"]).size().unstack()\n\ntime  Lunch  Dinner\nday                \nThur     61       1\nFri       7      12\nSat       0      87\nSun       0      76\n\n\nParameters\n\nnormalize: 비율을 계산 (index, columns, all)\n\nmargins: 행과 열로 합산\n\n\npd.crosstab(tips[\"day\"], tips[\"time\"], normalize=True, margins=True)\n\ntime  Lunch  Dinner  All\nday                     \nThur   0.25    0.00 0.25\nFri    0.03    0.05 0.08\nSat    0.00    0.36 0.36\nSun    0.00    0.31 0.31\nAll    0.28    0.72 1.00"
  },
  {
    "objectID": "contents/crosstab.html#pivot_table",
    "href": "contents/crosstab.html#pivot_table",
    "title": "Cross-Tabulation and Pivot Tables",
    "section": "pivot_table()",
    "text": "pivot_table()\ncount 대신 mean\nmean 외에 다른 aggregation 함수를 지정할 수 있음\ngrouping을 할 변수들 (index and/or columns)과 aggregate할 변수 지정 (values)\n\nmargins: 행과 열에 따라 합산\n\n\n# grouping을 할 변수들 (index)과 aggregate할 변수 지정\ntips.pivot_table(index=[\"day\", \"time\"], values=\"tip\") # dropna=True\n\n             tip\nday  time       \nThur Lunch  2.77\n     Dinner 3.00\nFri  Lunch  2.38\n     Dinner 2.94\nSat  Dinner 2.99\nSun  Dinner 3.26\n\n\n\n# groupby를 이용\ntips.groupby([\"day\", \"time\"])[\"tip\"].mean()\n\nday   time  \nThur  Lunch    2.77\n      Dinner   3.00\nFri   Lunch    2.38\n               ... \nSat   Dinner   2.99\nSun   Lunch     NaN\n      Dinner   3.26\nName: tip, Length: 8, dtype: float64\n\n\n\n# grouping을 할 변수들 (index & columns)과 aggregate할 변수 지정\ntips.pivot_table(index=\"day\", columns=\"time\", values=\"tip\")\n\ntime  Lunch  Dinner\nday                \nThur   2.77    3.00\nFri    2.38    2.94\nSat     NaN    2.99\nSun     NaN    3.26\n\n\n\n# groupby를 이용\ntips.groupby([\"day\", \"time\"])[\"tip\"].mean().unstack()\n\ntime  Lunch  Dinner\nday                \nThur   2.77    3.00\nFri    2.38    2.94\nSat     NaN    2.99\nSun     NaN    3.26\n\n\n\n# 두 개 이상의 변수에 대한 aggregation\ntips.pivot_table(index=\"day\", columns=\"time\", values=[\"tip\", \"total_bill\"])\n\n       tip        total_bill       \ntime Lunch Dinner      Lunch Dinner\nday                                \nThur  2.77   3.00      17.66  18.78\nFri   2.38   2.94      12.85  19.66\nSat    NaN   2.99        NaN  20.44\nSun    NaN   3.26        NaN  21.41\n\n\n\n# groupby를 이용\ntips.groupby([\"day\", \"time\"])[[\"tip\", \"total_bill\"]].mean().unstack()\n\n       tip        total_bill       \ntime Lunch Dinner      Lunch Dinner\nday                                \nThur  2.77   3.00      17.66  18.78\nFri   2.38   2.94      12.85  19.66\nSat    NaN   2.99        NaN  20.44\nSun    NaN   3.26        NaN  21.41\n\n\n\n# margins 추가\ntips.pivot_table(index=\"day\", columns=\"time\", values=\"tip\", margins=True)\n\ntime  Lunch  Dinner  All\nday                     \nThur   2.77    3.00 2.77\nFri    2.38    2.94 2.73\nSat     NaN    2.99 2.99\nSun     NaN    3.26 3.26\nAll    2.73    3.10 3.00"
  },
  {
    "objectID": "contents/customizing.html",
    "href": "contents/customizing.html",
    "title": "Customizing",
    "section": "",
    "text": "Load packages\n# numerical calculation & data frames\nimport numpy as np\nimport pandas as pd\n\n# visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport seaborn.objects as so\n\n# statistics\nimport statsmodels.api as sm"
  },
  {
    "objectID": "contents/customizing.html#scales-and-layouts",
    "href": "contents/customizing.html#scales-and-layouts",
    "title": "Customizing",
    "section": "Scales and layouts",
    "text": "Scales and layouts\n\npenguins = sns.load_dataset(\"penguins\")\n\n(\n    so.Plot(penguins, x=\"body_mass_g\", y=\"species\", color=\"island\")\n    .facet(col=\"sex\")\n    .add(so.Dot(), so.Jitter(.5))\n    .scale(color=\"Set2\")  # color palettes: \"Set2\"\n    .layout(size=(8, 5))  # plot size\n)\n\n\n\n\n\ndiamonds = sns.load_dataset(\"diamonds\")\n\n(\n    so.Plot(diamonds, x=\"carat\", y=\"price\", color=\"carat\", marker=\"cut\")\n    .add(so.Dots())\n    .scale(\n        color=so.Continuous(\"crest\", norm=(0, 3), trans=\"sqrt\"),\n    )\n)\n\n\n\n\nChoosing color palettes"
  },
  {
    "objectID": "contents/customizing.html#legends-and-ticks",
    "href": "contents/customizing.html#legends-and-ticks",
    "title": "Customizing",
    "section": "Legends and ticks",
    "text": "Legends and ticks\n\n(\n    so.Plot(penguins, x=\"species\")\n    .add(so.Bar(), so.Count())\n    .scale(x=so.Nominal(order=[\"Adelie\", \"Gentoo\", \"Chinstrap\"])) # x축의 카테고리 순서를 변경\n)\n\n\n\n\n\n(\n    so.Plot(diamonds, x=\"carat\", y=\"price\", color=\"carat\")\n    .add(so.Dots())\n    .scale(\n        x=so.Continuous().tick(every=0.5),\n        y=so.Continuous().label(like=\"${x:.0f}\"), # %표시: like=\"{x:.1%}\" \n        color=so.Continuous().tick(at=[1, 2, 3, 4]),\n    )\n)"
  },
  {
    "objectID": "contents/customizing.html#limits-labels-and-titles",
    "href": "contents/customizing.html#limits-labels-and-titles",
    "title": "Customizing",
    "section": "Limits, labels, and titles",
    "text": "Limits, labels, and titles\nPlot has a number of methods for simple customization, including Plot.label(), Plot.limit(), and Plot.share():\n\npenguins = sns.load_dataset(\"penguins\")\n\n(\n    so.Plot(penguins, x=\"body_mass_g\", y=\"species\", color=\"island\")\n    .facet(col=\"sex\")\n    .add(so.Dot(), so.Jitter(.5))\n    .share(x=False)\n    .limit(y=(2.5, -.5))\n    .label(\n        x=\"Body mass (g)\", y=\"\",\n        color=str.capitalize,\n        title=\"{} penguins\".format,\n    )\n)"
  },
  {
    "objectID": "contents/customizing.html#themes",
    "href": "contents/customizing.html#themes",
    "title": "Customizing",
    "section": "Themes",
    "text": "Themes\n\ntips = sns.load_dataset(\"tips\")\np = (\n    so.Plot(tips, x=\"total_bill\", y=\"tip\", color=\"time\")\n    .add(so.Dot())\n)\np.theme({\"axes.facecolor\": \"white\", \n         \"axes.edgecolor\": \"0.8\", \n         'axes.spines.top': False,\n         'axes.spines.right': False})\n\n\n\n\nseaborn.axes_style\n\nfrom seaborn import axes_style\np.theme({**axes_style(\"whitegrid\")})\n\n\n\n\nSeaborn: controlling figure aesthetics\n\nfrom matplotlib import style\np.theme({**style.library[\"fivethirtyeight\"]})"
  },
  {
    "objectID": "contents/discretize.html",
    "href": "contents/discretize.html",
    "title": "Exploratory Data Analysis",
    "section": "",
    "text": "Load Packages\n# numerical calculation & data frames\nimport numpy as np\nimport pandas as pd\n\n# visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport seaborn.objects as so\n\n# statistics\nimport statsmodels.api as sm\nsource: R for Data Science\nVisualising, transforming, modelling을 통해 질문들을 개선하거나 새로운 질문들을 생성하면서 데이터에 대한 이해를 늘리면서 질문들에 답을 구하는 반복순환 과정\n크게 다음 2가지 타입의 질문을 기본으로 시작"
  },
  {
    "objectID": "contents/discretize.html#variation-변동성-변량",
    "href": "contents/discretize.html#variation-변동성-변량",
    "title": "Exploratory Data Analysis",
    "section": "Variation (변동성, 변량)",
    "text": "Variation (변동성, 변량)\nvariability, variance..\n\n대상들을 측정함 따라 값이 변화하는 경향성\n\n사람들의 키, 눈의 색깔 등\n\n변수는 고유한 변동성의 패턴을 지님\n변수의 값들의 분포를 봄으로써 그 패턴을 파악하고 질문들을 던질 수 있음\n\n어떤 값들이 가장 흔하게 나오며, 왜 그런가?\n어떤 값들이 가장 드물며, 왜 그런가?\n어떤 특이한 패턴들이 있다면, 왜 그런가?\n\n\n\nso.Plot(diamonds, x=\"cut\").add(so.Bar(), so.Count())\n\n\n\n\n\nso.Plot(diamonds, x=\"cut\").add(so.Bar(), so.Count())\n\ndiamonds.value_counts(\"cut\", sort=False)\n\n\n\n\n\n\n\ncut\nFair          1610\nGood          4906\nIdeal        21551\nPremium      13791\nVery Good    12082\ndtype: int64\n\n\n\n\nA categorical data type\n\n일종의 데이터 압축 기술이며, 몇 개의 levels로만 이루어진 큰 데이터의 경우 메모리 절약\n순서가 부여되어, sorting을 하거나 min/max 함수가 알파벳 순서가 아닌 부여된 순서를 적용\n다른 Python library들 중에는 이 순서를 활용하는 것이 있음; 통계적 분석이나 플랏을 그릴 때\n\nMcKinney’s/Categorical data pandas/Categorical data\n\npd.Categorical(diamonds[\"cut\"])\n\n['Ideal', 'Premium', 'Good', 'Premium', 'Good', ..., 'Ideal', 'Good', 'Very Good', 'Premium', 'Ideal']\nLength: 53940\nCategories (5, object): ['Fair', 'Good', 'Ideal', 'Premium', 'Very Good']\n\n\n\ndiamonds[\"cut\"] = pd.Categorical(\n    diamonds[\"cut\"], \n    categories=[\"Fair\", \"Good\", \"Very Good\", \"Premium\", \"Ideal\"],\n    ordered=True\n)\n\n\ndiamonds.value_counts(\"cut\", sort=False)\n\ncut\nFair          1610\nGood          4906\nVery Good    12082\nPremium      13791\nIdeal        21551\ndtype: int64\n\n\n\ndiamonds.value_counts(\"cut\", sort=False).index\n\nCategoricalIndex(['Fair', 'Good', 'Very Good', 'Premium', 'Ideal'], categories=['Fair', 'Good', 'Very Good', 'Premium', 'Ideal'], ordered=False, dtype='category', name='cut')\n\n\n\ndiamonds.groupby(\"cut\")[\"price\"].mean()\n\ncut\nFair        4358.76\nGood        3928.86\nVery Good   3981.76\nPremium     4584.26\nIdeal       3457.54\nName: price, dtype: float64\n\n\n\n# cut, color, clarity 모두 categorical type으로 변형\ndiamonds[\"color\"] = pd.Categorical(\n    diamonds[\"color\"], \n    categories=[\"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\"],\n    ordered=True\n)\ndiamonds[\"clarity\"] = pd.Categorical(\n    diamonds[\"clarity\"], \n    categories=[\"I1\", \"SI2\", \"SI1\", \"VS2\", \"VS1\", \"VVS2\", \"VVS1\", \"IF\"],\n    ordered=True\n)\n\n\nso.Plot(diamonds, x=\"cut\").add(so.Bar(), so.Count())\n\n\n\n\n\n\nDiscretize/Bining\npd.cut(), pd.qcut()\n\n(\n    diamonds.assign(carat_cat = lambda x: pd.cut(x.carat, 10))\n    .value_counts(\"carat_cat\")\n)\n\ncarat_cat\n(0.195, 0.681]    25155\n(0.681, 1.162]    18626\n(1.162, 1.643]     7129\n                  ...  \n(3.567, 4.048]        5\n(4.048, 4.529]        2\n(4.529, 5.01]         1\nLength: 10, dtype: int64\n\n\n\n\n\n\n\n\nNote\n\n\n\ncarat_cat = pd.cut(diamonds[\"carat\"], 3)\ncarat_cat.dtype\n# CategoricalDtype(categories=[(0.195, 1.803], (1.803, 3.407], (3.407, 5.01]], ordered=True)\n\ncarat_cat.cat.categories\n# IntervalIndex([(0.195, 1.803], (1.803, 3.407], (3.407, 5.01]], dtype='interval[float64, right]')"
  },
  {
    "objectID": "contents/eda.html",
    "href": "contents/eda.html",
    "title": "Exploratory Data Analysis",
    "section": "",
    "text": "Load Packages\n# numerical calculation & data frames\nimport numpy as np\nimport pandas as pd\n\n# visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport seaborn.objects as so\n\n# statistics\nimport statsmodels.api as sm\nsource: R for Data Science\nVisualising, transforming, modelling을 통해 질문들을 개선하거나 새로운 질문들을 생성하면서 데이터에 대한 이해를 늘리면서 질문들에 답을 구하는 반복순환 과정\n크게 다음 2가지 타입의 질문을 기본으로 시작"
  },
  {
    "objectID": "contents/eda.html#missing-values",
    "href": "contents/eda.html#missing-values",
    "title": "Exploratory Data Analysis",
    "section": "Missing values",
    "text": "Missing values\n특이값을 missing (NA)으로 처리할 때는 신중하게…\n특이한 값들이 있는 행을 다 제거하는 방식은 금물!\n예를 들어, diamonds.query('y >= 3 & y <= 20')\n만약 NA로 바꾸기로 했다면, .where(), .mask()를 활용\n\ndiamonds2 = diamonds.assign(\n    y = lambda x: np.where((x.y < 3) | (x.y > 20), np.nan, x.y)\n)\n\n\n\n\n\n\n\nTip\n\n\n\n.mask(), .where()\ndiamonds2 = diamonds.copy()\ndiamonds[\"y\"] = diamonds[\"y\"].mask((diamonds2[\"y\"] < 3) | (diamonds2[\"y\"] > 20))\n\n\n\n# NA의 제거에 대해 경고 없음!\n(\n    so.Plot(diamonds2, x=\"x\", y=\"y\")\n    .add(so.Dots(alpha=1))\n)\n\n\n\n\n결측치들을 포함한 경우와 제거한 경우를 비교해 보고자 할 때,\n\n결측치인지 아닌지를 나타내는 명목변수를 이용\n\n\nflights = sm.datasets.get_rdataset(\"flights\", \"nycflights13\").data\n\n\nflights = flights.assign(\n    cancelled = lambda x: x.dep_time.isna(),  # True/False\n    sched_hour = lambda x: x.sched_dep_time // 100,\n    sched_min = lambda x: x.sched_dep_time % 100,\n    sched_dep_time = lambda x: x.sched_hour + x.sched_min / 60\n)\n\n\n(\n    so.Plot(flights, x=\"sched_dep_time\", color=\"cancelled\")\n    .add(so.Line(), so.Hist(binwidth=1/4))\n)"
  },
  {
    "objectID": "contents/eda.html#a-categorical-and-continuous-variable",
    "href": "contents/eda.html#a-categorical-and-continuous-variable",
    "title": "Exploratory Data Analysis",
    "section": "A categorical and continuous variable",
    "text": "A categorical and continuous variable\n\n카테고리별로 분포(frequency)를 나누어 비교\nfrequency polygon 이나 boxplot을 이용\nOne dimensional scatter plot으로 겹치지 않게 그리려면, jitter를 활용\n\n\n(\n    so.Plot(diamonds, x=\"price\", color=\"cut\")\n    .add(so.Line(), so.Hist(binwidth=500))\n)\n\n\n\n\n\n# 각 cut 내에서의 분포가 cut마다 어떻게 다른가 확인\n(\n    so.Plot(diamonds, x=\"price\", color=\"cut\")\n    .add(so.Line(), so.Hist(binwidth=500, stat=\"density\"))\n)\n# 또는\n# so.Hist(binwidth=500, stat=\"proportion\", common_norm=False)\n\n\n\n\n\n(\n    so.Plot(diamonds, x=\"price\", color=\"cut\")\n    .add(so.Line(), so.Hist(binwidth=500, stat=\"density\"))\n    .facet(\"cut\")\n)\n\n\n\n\n\n(\n    so.Plot(diamonds, x=\"price\", color=\"cut\")\n    .add(so.Bars(), so.Hist(binwidth=500, stat=\"density\"))\n    .facet(\"cut\")\n)\n\n\n\n\nQ: 왜 fair 컷의 평균 가격이 가장 높은가???\n\nsns.boxplot(diamonds, x=\"cut\", y=\"price\", palette=\"Set2\")\nplt.show() # 생략\n\n\n\n\n\n\n# Custom function\nfrom sbcustom import rangeplot\nrangeplot(diamonds, x=\"cut\", y=\"price\")\n\n\n\n\n\n# Violin plot\nsns.violinplot(diamonds, x=\"cut\", y=\"price\", palette=\"Set2\")\nplt.show() # 생략\n\n\n\n\n다이아몬드 컷의 질이 낮을수록 평균 가격이 높은, 직관적으로 반대되는 패턴을 보임.\n한편, 카테고리의 순서가 존재하지 않는 경우: 의미있는 순서로 재정렬하여 패턴 파악을 용이하게 할 수 있음\n예를 들어, 자동차의 class를 고속도로 연비의 중앙값 순으로 정렬하고자 하면,\n\nmpg = sm.datasets.get_rdataset(\"mpg\", \"ggplot2\").data\n\n\nhwy_order = mpg.groupby(\"class\")[\"hwy\"].median().sort_values().index\n\nsns.boxplot(mpg, y=\"class\", x=\"hwy\", order=hwy_order, palette=\"Set2\")\nplt.show()\n\n\n\n\n\n연습문제\n\nUse what you’ve learned to improve the visualisation of the departure times of cancelled vs. non-cancelled flights.\nWhat variable in the diamonds dataset is most important for predicting the price of a diamond? How is that variable correlated with cut? Why does the combination of those two relationships lead to lower quality diamonds being more expensive?\nCompare and contrast a violin plot with a facetted histogram, or a coloured frequency polygon. What are the pros and cons of each method?\n\n\n(\n    so.Plot(diamonds, x=\"price\", color=\"cut\")\n    .add(so.Line(), so.Hist(binwidth=500, stat=\"density\"))\n)\n\n\n\n\n\n(\n    so.Plot(diamonds, x=\"price\", color=\"cut\")\n    .add(so.Bars(), so.Hist(binwidth=500, stat=\"density\"))\n    .facet(\"cut\")\n)"
  },
  {
    "objectID": "contents/eda.html#two-categorical-variables",
    "href": "contents/eda.html#two-categorical-variables",
    "title": "Exploratory Data Analysis",
    "section": "Two categorical variables",
    "text": "Two categorical variables\n\n두 범주형 변수 사이의 covariation을 파악하려면, 두 변수 값의 모든 조합에 대한 count를 표시\n\n\ntable_cut = diamonds.groupby([\"cut\", \"color\"]).size().reset_index(name=\"n\")\ntable_cut\n\n      cut color     n\n0    Fair     D   163\n1    Fair     E   224\n2    Fair     F   312\n..    ...   ...   ...\n32  Ideal     H  3115\n33  Ideal     I  2093\n34  Ideal     J   896\n\n[35 rows x 3 columns]\n\n\n\n각 조합에 해당하는 관측값의 양에 비례하여 원의 크기를 표시하면,\ncut와 color 사이에 상관관계를 맺는 것으로 보임\n\n\n(\n    so.Plot(table_cut, x=\"cut\", y=\"color\", pointsize=\"n\", color=\"n\")\n    .add(so.Dot())\n    .scale(pointsize=(5, 30))\n)\n\n\n\n\n순서가 없는 범주형 변수인 경우, 행과 열을 유사한 정도에 따라 순서를 매기는 알고리즘을 통해 재정렬하여 패턴을 볼 수도 있음\n\ngapminder = sm.datasets.get_rdataset(\"gapminder\", \"gapminder\").data\ngapminder\n\n          country continent  year  lifeExp       pop  gdpPercap\n0     Afghanistan      Asia  1952    28.80   8425333     779.45\n1     Afghanistan      Asia  1957    30.33   9240934     820.85\n2     Afghanistan      Asia  1962    32.00  10267083     853.10\n...           ...       ...   ...      ...       ...        ...\n1701     Zimbabwe    Africa  1997    46.81  11404948     792.45\n1702     Zimbabwe    Africa  2002    39.99  11926563     672.04\n1703     Zimbabwe    Africa  2007    43.49  12311143     469.71\n\n[1704 rows x 6 columns]\n\n\n\nplotdata = (\n    gapminder\n    .query('continent == \"Asia\"')\n    .pivot(index=\"country\", columns=\"year\", values=\"lifeExp\")\n)\nplotdata\n\nyear                1952  1957  1962  1967  1972  1977  1982  1987  1992  \\\ncountry                                                                    \nAfghanistan        28.80 30.33 32.00 34.02 36.09 38.44 39.85 40.82 41.67   \nBahrain            50.94 53.83 56.92 59.92 63.30 65.59 69.05 70.75 72.60   \nBangladesh         37.48 39.35 41.22 43.45 45.25 46.92 50.01 52.82 56.02   \n...                  ...   ...   ...   ...   ...   ...   ...   ...   ...   \nVietnam            40.41 42.89 45.36 47.84 50.25 55.76 58.82 62.82 67.66   \nWest Bank and Gaza 43.16 45.67 48.13 51.63 56.53 60.77 64.41 67.05 69.72   \nYemen, Rep.        32.55 33.97 35.18 36.98 39.85 44.17 49.11 52.92 55.60   \n\nyear                1997  2002  2007  \ncountry                               \nAfghanistan        41.76 42.13 43.83  \nBahrain            73.92 74.80 75.64  \nBangladesh         59.41 62.01 64.06  \n...                  ...   ...   ...  \nVietnam            70.67 73.02 74.25  \nWest Bank and Gaza 71.10 72.37 73.42  \nYemen, Rep.        58.02 60.31 62.70  \n\n[33 rows x 12 columns]\n\n\n\n# hierarchical clustering in scipy\nsns.clustermap(plotdata, col_cluster=False, method=\"ward\")\n\n<seaborn.matrix.ClusterGrid at 0x13ad22450>\n\n\n\n\n\n\n연습문제\n\nHow could you rescale the count dataset above to more clearly show the distribution of cut within colour, or colour within cut?\n\ncount 대신 비율을 계산 후 그려보세요.\n예를 들어, color D에 cut 각각의 비율들을 구해 시각화\n\nExplore how average flight departure delays vary by destination and month of year. What makes the plot difficult to read? How could you improve it?\n\ngroupby([\"month\", \"dest\"])로 그룹핑을 해서 시작해 볼 것\n결측치를 어떻게 처리하면 좋을지 생각해 볼 것\nsns.clustermap()도 그려볼 것"
  },
  {
    "objectID": "contents/eda.html#two-continuous-variables",
    "href": "contents/eda.html#two-continuous-variables",
    "title": "Exploratory Data Analysis",
    "section": "Two continuous variables",
    "text": "Two continuous variables\n\nScatterplot, 2d-histogram\nDiscretize: pd.cut(), pd.qcut()\n\n\n(\n    so.Plot(diamonds.query('carat < 3'), x=\"carat\", y=\"price\")\n    .add(so.Dots(alpha=1/100))\n    .add(so.Line(color=\"orangered\"), so.PolyFit(5))\n)\n\n\n\n\n2d-histogram: x, y축 모두 binning\n\nsns.histplot(diamonds, x=\"carat\", y=\"price\", bins=20)\nplt.show()\n\n\n\n\nDiscretize: 연속 변수를 카테고리화\n\ndiamonds_cat = diamonds.query(\"carat < 3\").assign(\n    carat_cat=lambda x: pd.cut(x.carat, 20, labels=False),\n    carat_qcat=lambda x: pd.qcut(x.carat, 20, labels=False),\n)\n\n\nsns.boxplot(diamonds_cat, x=\"carat_cat\", y=\"price\")\n\n<Axes: xlabel='carat_cat', ylabel='price'>\n\n\n\n\n\n\nsns.boxplot(diamonds_cat, x=\"carat_qcat\", y=\"price\")\n\n<Axes: xlabel='carat_qcat', ylabel='price'>\n\n\n\n\n\n\n(\n    so.Plot(diamonds_cat, x=\"carat_cat\", y=\"price\")\n    .add(so.Range(), so.Est(\"median\", errorbar=(\"pi\", 50)))\n    .add(so.Dots(pointsize=8, marker=\"<\"), so.Agg(\"median\"))\n)\n\n# rangeplot(diamonds_cat, x=\"carat_cat\", y=\"price\")\n\n\n\n\n\n연습문제\n\nInstead of summarising the conditional distribution with a boxplot, you could use a frequency polygon.\n\n즉, 두 연속변수 중 하나를 카테고리화하는데, boxplot대신 frequency polygon으로 그려볼 것\n\nVisualise the distribution of carat, partitioned by price.\nHow does the price distribution of very large diamonds compare to small diamonds? Is it as you expect, or does it surprise you?\nCombine two of the techniques you’ve learned to visualise the combined distribution of cut, carat, and price.\nTwo dimensional plots reveal outliers that are not visible in one dimensional plots. For example, some points in the plot below have an unusual combination of x and y values, which makes the points outliers even though their x and y values appear normal when examined separately.\nWhy is a scatterplot a better display than a binned plot for this case?\n\n\n(\n    so.Plot(diamonds, x='x', y='y')\n    .add(so.Dots())\n    .limit(x=(4, 11), y=(4, 11))\n)"
  },
  {
    "objectID": "contents/exercise1.html",
    "href": "contents/exercise1.html",
    "title": "Exercises",
    "section": "",
    "text": "Load Packages\n# numerical calculation & data frames\nimport numpy as np\nimport pandas as pd\n\n# visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport seaborn.objects as so\n\n# statistics\nimport statsmodels.api as sm"
  },
  {
    "objectID": "contents/exercise1.html#song-rankings-for-billboard-top-100-in-the-year-2000",
    "href": "contents/exercise1.html#song-rankings-for-billboard-top-100-in-the-year-2000",
    "title": "Exercises",
    "section": "Song rankings for Billboard top 100 in the year 2000",
    "text": "Song rankings for Billboard top 100 in the year 2000\n“billboard” in a package “tidyr”\nSource: The Whitburn Project\n다음 링크의 데이터는 빌보드차트에 관한 데이터입니다; 링크\n\n각 곡이 차트에 진입한 날짜(date_entered)인 첫주(wk1)의 순위부터 78주(wk78)의 순위까지 기록되어 있습니다.\n차트에서 빠진 경우 missing (NA)으로 표시되어 있습니다.\n\n빌보드의 정책과 데이터 추출에 대해서 분명하지 않기 때문에 정확한 분석은 아닐 수 있습니다.\n\n예를 들어, 20주 연속 차트에 있거나, 50위 밖으로 밀려난 경우 차트에서 제거된다고 합니다.\n\n\n\n\n\n\n\n\nNote\n\n\n\n데이터를 불러오는 여러 방식에 대해서는 교재 참고\nChpter 6. Data Loading, Storage, and File Formats in Python for Data Analysis by Wes McKinney\n\n\n\nbillboard = pd.read_csv(\"data/billboard.csv\")\nbillboard.head(5)\n\n         artist                    track date_entered  wk1   wk2   wk3   wk4   \n0         2 Pac  Baby Don't Cry (Keep...   2000-02-26   87 82.00 72.00 77.00  \\\n1       2Ge+her  The Hardest Part Of ...   2000-09-02   91 87.00 92.00   NaN   \n2  3 Doors Down               Kryptonite   2000-04-08   81 70.00 68.00 67.00   \n3  3 Doors Down                    Loser   2000-10-21   76 76.00 72.00 69.00   \n4      504 Boyz            Wobble Wobble   2000-04-15   57 34.00 25.00 17.00   \n\n    wk5   wk6   wk7  ...  wk67  wk68  wk69  wk70  wk71  wk72  wk73  wk74   \n0 87.00 94.00 99.00  ...   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN  \\\n1   NaN   NaN   NaN  ...   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN   \n2 66.00 57.00 54.00  ...   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN   \n3 67.00 65.00 55.00  ...   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN   \n4 17.00 31.00 36.00  ...   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN   \n\n   wk75  wk76  \n0   NaN   NaN  \n1   NaN   NaN  \n2   NaN   NaN  \n3   NaN   NaN  \n4   NaN   NaN  \n\n[5 rows x 79 columns]\n\n\n\n총 몇 명의 가수(artist)가 차트에 있으며, 가수별로 몇 곡(track)이 차트에 들어있는지 알아보세요. (동명이인은 없다고 가정하고)\n곡명은 같지만, 가수가 다른 곡이 있는지 알아보고, 서로 다른 노래가 차트에 몇 개나 있는지 알아보세요.\n살펴보았다면, 이후 grouping시 artist와 track을 함께 사용해야함을 이해했을 겁니다.\n이 데이터를 주(week)에 대해서 아래처럼 long format으로 바꿉니다.\n\n\nwk column에 wk1부터 missing이 없는 wk*까지 숫자로 표현되고,\nrank column에는 해당하는 week의 순위가 나타납니다.\nmelt()를 이용하고, (id_vars=[\"artist\", \"track\", \"date_entered\"])\n.str.replace()와 .astype(\"int64\")를 사용해야 할 수 있습니다.\n.dropna(subset=\"rank\", inplace=True)를 사용하여 rank column의 missing을 처리하세요.\n결과를 billboard_long 변수에 할당하여 이후 문제를 이어가세요.\n\n구하지 못한 경우, 정제된 다음 파일을 다운받아 사용하세요.\n\n\n\nbillboard_long\n\n                artist                    track date_entered  wk  rank\n0                2 Pac  Baby Don't Cry (Keep...   2000-02-26   1 87.00\n317              2 Pac  Baby Don't Cry (Keep...   2000-02-26   2 82.00\n634              2 Pac  Baby Don't Cry (Keep...   2000-02-26   3 72.00\n...                ...                      ...          ...  ..   ...\n11728  matchbox twenty                     Bent   2000-04-29  37 38.00\n12045  matchbox twenty                     Bent   2000-04-29  38 38.00\n12362  matchbox twenty                     Bent   2000-04-29  39 48.00\n\n[5307 rows x 5 columns]\n\n\n\n50주 이상(포함) 머무른 곡들을 구해보세요.\n\n\n연속으로 머무를 필요없음; 차트에서 나갔다가 다시 들어오는 곡들이 있음\n머문 기간을 .size()를 이용해 구한 후\n오래 머무른 순서로 정렬 후\nquery()를 이용해 50주 이상으로 필터링\n결과가 artist와 track순으로 정렬되어 있는지 확인해 주세요!\n코드는 다음 예처럼 하나로 연결하여 간결하게 구성해보세요.\n(\n   billboard_long.groupby(...)\n   .size()\n   ...\n   .query(...)\n)   \n이후 코드도 최대한 이처럼 간결하게 구성해보도록 하세요.\n\n\n4번에서 구한 곡들 각각에 대해서 주에 따라 순위가 어떻게 변화했는지 시각화를 통해 살펴보기 위해서\n\n\n5.1 먼저, 위 곡들만을 포함하도록 4번의 데이터와 원래 데이터(billboard_long)를 merge()를 이용해 추린 후, 50주 이상 머문 곡으로 필터링하세요.\n\n4번을 구하지 못한 경우, 다음 파일을 받아 이용하세요.\n\n5.2 seaborn.objects를 이용해 대략 다음과 같이 주에 따른 순위의 변화를 그려보세요. \n\n\n(가수별) 곡별로 차트에 머문 기간(weeks)과 가장 높이 올라간 순위를 구해서, 높은 순위를 달성한 곡일수록 차트에 더 오래 머물었는지 알아봅니다.\n\n\n6.1 곡별로 차트에 머문 기간을 DataFrame으로 구하고; .reset_index(name=\" \") 이용\n6.2 곡별로 최상위 순위를 min()을 이용해 DataFrame으로 구한 후\n6.3 이 두 DataFrame을 merge()를 이용해 합친 후\n6.4 seaborn.objects를 이용해 머문 기간에 따른 최상위 순위에 대한 관계를 아래와 같이 scatterplot으로 살펴보세요.\n\n눈에 띄는 점을 간단히 기술해보세요.\n\n\n\n\n순위 1위를 달성한 곡들에 한해, 차트에 진입시 순위와 1위에 처음 도달한 주(week)의 정보가 다음과 같이 표시되도록 구해보세요.\n\n\n함수를 만들고; min()과 argmin()이 필요할 수 있음\napply()로 그 함수를 적용하여 구해보세요.\n#                 artist                    track  wk  rank\n# 0              Aaliyah                Try Again   1 59.00\n# 1              Aaliyah                Try Again  14  1.00\n# 2  Aguilera, Christina  Come On Over Baby (A...   1 57.00\n# 3  Aguilera, Christina  Come On Over Baby (A...  11  1.00\n# 4  Aguilera, Christina        What A Girl Wants   1 71.00\n# 5  Aguilera, Christina        What A Girl Wants   8  1.00\n...\n\n\n빠르게 1위가 된 곡일 수록 빠르게 차트에서 사라졌을까를 알아보기 위해, 7번의 결과를 이용해 다음과 같이 변형해보세요.\n\n\n7번을 구하지 못한 경우, 다음 파일을 받아 이용하세요.\n즉, 차트 진입시의 순위 정보와, 1위가 된 week의 정보만을 취해, 그 비율(rate)를 구하면, 얼마나 빠르게 1위가 되었는지 알 수 있습니다.\n#                 artist                    track  wk  rank   rate\n# 0              Aaliyah                Try Again  14 59.00   4.21\n# 1  Aguilera, Christina  Come On Over Baby (A...  11 57.00   5.18\n# 2  Aguilera, Christina        What A Girl Wants   8 71.00   8.88\n# 3        Carey, Mariah  Thank God I Found Yo...  11 82.00   7.45\n# 4                Creed      With Arms Wide Open  27 84.00   3.11\n# 5      Destiny's Child  Independent Women Pa...   9 78.00   8.67\n# ...\n마지막으로, seaborn.objects를 이용해 다음과 같이 시각화해보세요."
  },
  {
    "objectID": "contents/exercise1_sol.html",
    "href": "contents/exercise1_sol.html",
    "title": "Solutions",
    "section": "",
    "text": "Load Packages\n# numerical calculation & data frames\nimport numpy as np\nimport pandas as pd\n\n# visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport seaborn.objects as so\n\n# statistics\nimport statsmodels.api as sm"
  },
  {
    "objectID": "contents/exercise1_sol.html#song-rankings-for-billboard-top-100-in-the-year-2000",
    "href": "contents/exercise1_sol.html#song-rankings-for-billboard-top-100-in-the-year-2000",
    "title": "Solutions",
    "section": "Song rankings for Billboard top 100 in the year 2000",
    "text": "Song rankings for Billboard top 100 in the year 2000\n“billboard” in a package “tidyr”\nSource: The Whitburn Project\n다음 링크의 데이터는 빌보드차트에 관한 데이터입니다; 링크\n\n각 곡이 차트에 진입한 날짜(date_entered)인 첫주(wk1)의 순위부터 78주(wk78)의 순위까지 기록되어 있습니다.\n차트에서 빠진 경우 missing (NA)으로 표시되어 있습니다.\n\n빌보드의 정책과 데이터 추출에 대해서 분명하지 않기 때문에 정확한 분석은 아닐 수 있습니다.\n\n예를 들어, 20주 연속 차트에 있거나, 50위 밖으로 밀려난 경우 차트에서 제거된다고 합니다.\n\n\n\nbillboard = pd.read_csv(\"data/billboard.csv\")\nbillboard.head(5)\n\n         artist                    track date_entered  wk1   wk2   wk3   wk4   \n0         2 Pac  Baby Don't Cry (Keep...   2000-02-26   87 82.00 72.00 77.00  \\\n1       2Ge+her  The Hardest Part Of ...   2000-09-02   91 87.00 92.00   NaN   \n2  3 Doors Down               Kryptonite   2000-04-08   81 70.00 68.00 67.00   \n3  3 Doors Down                    Loser   2000-10-21   76 76.00 72.00 69.00   \n4      504 Boyz            Wobble Wobble   2000-04-15   57 34.00 25.00 17.00   \n\n    wk5   wk6   wk7  ...  wk67  wk68  wk69  wk70  wk71  wk72  wk73  wk74   \n0 87.00 94.00 99.00  ...   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN  \\\n1   NaN   NaN   NaN  ...   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN   \n2 66.00 57.00 54.00  ...   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN   \n3 67.00 65.00 55.00  ...   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN   \n4 17.00 31.00 36.00  ...   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN   \n\n   wk75  wk76  \n0   NaN   NaN  \n1   NaN   NaN  \n2   NaN   NaN  \n3   NaN   NaN  \n4   NaN   NaN  \n\n[5 rows x 79 columns]\n\n\n\n총 몇 명의 가수(artist)가 차트에 있으며, 가수별로 몇 곡(track)이 차트에 들어있는지 알아보세요. (동명이인은 없다고 가정하고)\n\n\nbillboard.value_counts(\"artist\")\n\nartist\nJay-Z                5\nHouston, Whitney     4\nDixie Chicks, The    4\n                    ..\nHollister, Dave      1\nHot Boys             1\nmatchbox twenty      1\nLength: 228, dtype: int64\n\n\n\n곡명은 같지만, 가수가 다른 곡이 있는지 알아보고, 서로 다른 노래가 차트에 몇 개나 있는지 알아보세요.\n\n\nbillboard.value_counts(\"track\")\n\ntrack\nWhere I Wanna Be      2\nOriginal Prankster    1\nSeparated             1\n                     ..\nHe Loves U Not        1\nHe Can't Love U       1\nwww.memory            1\nLength: 316, dtype: int64\n\n\n\n이 데이터를 주(week)에 대해서 아래처럼 long format으로 바꿉니다.\n\n\nbillboard_long = (\n    billboard\n    .melt(id_vars=billboard.columns[:3], var_name=\"wk\", value_name=\"rank\")\n    .sort_values([\"artist\", \"track\"])\n)\nbillboard_long[\"wk\"] = billboard_long[\"wk\"].str.replace(\"wk\", \"\").astype(\"int64\")\nbillboard_long.dropna(subset=\"rank\", inplace=True)\n\n\n50주 이상(포함) 머무른 곡들\n\n\nwks_50 = (\n    billboard_long.groupby([\"artist\", \"track\"], as_index=False)\n    .size()\n    .sort_values(\"size\", ascending=False)\n    .query(\"size >= 50\")\n)\nwks_50\n\n           artist       track  size\n62          Creed      Higher    57\n179      Lonestar      Amazed    55\n121   Hill, Faith     Breathe    53\n2    3 Doors Down  Kryptonite    53\n\n\n5.1 먼저, 위 곡들만을 포함하도록 4번의 데이터와 원래 데이터(billboard_long)를 merge()를 이용해 추린 후, 50주 이상 머문 곡으로 필터링하세요.\n\nwks_50_all = (\n    billboard_long\n    .merge(wks_50)\n)\nwks_50_all\n\n            artist       track date_entered  wk  rank  size\n10    3 Doors Down  Kryptonite   2000-04-08   1 81.00 53.00\n11    3 Doors Down  Kryptonite   2000-04-08   2 70.00 53.00\n12    3 Doors Down  Kryptonite   2000-04-08   3 68.00 53.00\n...            ...         ...          ...  ..   ...   ...\n3015      Lonestar      Amazed   1999-06-05  62 42.00 55.00\n3016      Lonestar      Amazed   1999-06-05  63 45.00 55.00\n3017      Lonestar      Amazed   1999-06-05  64 50.00 55.00\n\n[218 rows x 6 columns]\n\n\n5.2 seaborn.objects를 이용해 대략 다음과 같이 주에 따른 순위의 변화를 그려보세요.\n\n(\n    so.Plot(wks_50_all, x=\"wk\", y=\"rank\", color=\"track\")\n    .add(so.Line())\n    .scale(color=\"Set2\")\n)\n\n\n\n\n6.1 곡별로 차트에 머문 기간을 포함한 데이터\n\nlengths = (\n    billboard_long\n    .groupby([\"artist\", \"track\"])\n    .size()\n    .reset_index(name=\"length\")\n)\nlengths\n\n              artist                    track  length\n0              2 Pac  Baby Don't Cry (Keep...       7\n1            2Ge+her  The Hardest Part Of ...       3\n2       3 Doors Down               Kryptonite      53\n..               ...                      ...     ...\n314  Ying Yang Twins  Whistle While You Tw...      14\n315    Zombie Nation            Kernkraft 400       2\n316  matchbox twenty                     Bent      39\n\n[317 rows x 3 columns]\n\n\n6.2 곡별로 최상위 순위를 min()을 이용해 구한 데이터를\n\nhighs = (\n    billboard_long\n    .groupby([\"artist\", \"track\"])[\"rank\"]\n    .min()\n    .reset_index(name=\"high\")\n)\nhighs\n\n              artist                    track  high\n0              2 Pac  Baby Don't Cry (Keep... 72.00\n1            2Ge+her  The Hardest Part Of ... 87.00\n2       3 Doors Down               Kryptonite  3.00\n..               ...                      ...   ...\n314  Ying Yang Twins  Whistle While You Tw... 74.00\n315    Zombie Nation            Kernkraft 400 99.00\n316  matchbox twenty                     Bent  1.00\n\n[317 rows x 3 columns]\n\n\n6.3 merge()를 이용해 합친 후\n\nlengths_highs = pd.merge(lengths, highs)\nlengths_highs\n\n              artist                    track  length  high\n0              2 Pac  Baby Don't Cry (Keep...       7 72.00\n1            2Ge+her  The Hardest Part Of ...       3 87.00\n2       3 Doors Down               Kryptonite      53  3.00\n..               ...                      ...     ...   ...\n314  Ying Yang Twins  Whistle While You Tw...      14 74.00\n315    Zombie Nation            Kernkraft 400       2 99.00\n316  matchbox twenty                     Bent      39  1.00\n\n[317 rows x 4 columns]\n\n\n6.4 seaborn.objects를 이용해 머문 기간에 따른 최상위 순위에 대한 관계를 아래와 같이 scatterplot으로 살펴보세요.\n\np = (\n    so.Plot(lengths_highs, x=\"length\", y=\"high\")\n    .add(so.Dot(color=\"deepskyblue\", edgecolor=\"white\"))\n    .add(so.Line(), so.PolyFit(5))\n    .label(x=\"Length (wks)\", y=\"Highest Ranking\")\n) \np\n\n\n\n\n\n순위 1위를 달성한 곡들에 한해, 다음과 같이 차트에 진입시 순위와 1위에 처음 도달한 주(week)의 정보가 다음과 같이 표시되도록 구해보세요.\n\n함수를 만들고; min()과 argmin()이 필요할 수 있음\napply()로 그 함수를 적용하여 구해보세요.\n\n\n\ndef isranked(df, n=1):\n    if df[\"rank\"].min() == n:\n        idx = df[\"rank\"].argmin()\n        # idx2 = (df[\"wk\"] == 1).argmax() # 항상 0\n        return df.iloc[[0, idx], -2:]\n\n\nwk_rank = (\n    billboard_long.groupby([\"artist\", \"track\"])\n    .apply(isranked)\n    .reset_index()\n    .drop(columns=\"level_2\")\n)\nwk_rank\n\n                 artist                    track  wk  rank\n0               Aaliyah                Try Again   1 59.00\n1               Aaliyah                Try Again  14  1.00\n2   Aguilera, Christina  Come On Over Baby (A...   1 57.00\n..                  ...                      ...  ..   ...\n31     Vertical Horizon      Everything You Want  26  1.00\n32      matchbox twenty                     Bent   1 60.00\n33      matchbox twenty                     Bent  13  1.00\n\n[34 rows x 4 columns]\n\n\n\n빠르게 1위가 된 곡일 수록 빠르게 차트에서 사라졌을까를 알아보기 위해, 7번의 결과를 이용해 다음과 같이 변형해보세요.\n\n즉, 차트 진입시의 순위 정보와, 1위가 된 week의 정보만을 취해, 그 비율(rate)를 구하면, 얼마나 빠르게 1위가 되었는지 알 수 있습니다.\n\n\n\nwk_rank.groupby([\"artist\", \"track\"]).max()\n\n                                             wk  rank\nartist              track                            \nAaliyah             Try Again                14 59.00\nAguilera, Christina Come On Over Baby (A...  11 57.00\n                    What A Girl Wants         8 71.00\n...                                          ..   ...\nSisqo               Incomplete                8 77.00\nVertical Horizon    Everything You Want      26 70.00\nmatchbox twenty     Bent                     13 60.00\n\n[17 rows x 2 columns]\n\n\n\nrates = (\n    wk_rank.groupby([\"artist\", \"track\"])\n    .max()\n    .assign(rate=lambda x: x[\"rank\"] / x[\"wk\"])\n    .reset_index()\n)\nrates\n\n                 artist                    track  wk  rank  rate\n0               Aaliyah                Try Again  14 59.00  4.21\n1   Aguilera, Christina  Come On Over Baby (A...  11 57.00  5.18\n2   Aguilera, Christina        What A Girl Wants   8 71.00  8.88\n..                  ...                      ...  ..   ...   ...\n14                Sisqo               Incomplete   8 77.00  9.62\n15     Vertical Horizon      Everything You Want  26 70.00  2.69\n16      matchbox twenty                     Bent  13 60.00  4.62\n\n[17 rows x 5 columns]\n\n\n\nlengths = billboard_long.groupby([\"artist\", \"track\"]).size().reset_index(name=\"length\")\nlengths\n\n              artist                    track  length\n0              2 Pac  Baby Don't Cry (Keep...       7\n1            2Ge+her  The Hardest Part Of ...       3\n2       3 Doors Down               Kryptonite      53\n..               ...                      ...     ...\n314  Ying Yang Twins  Whistle While You Tw...      14\n315    Zombie Nation            Kernkraft 400       2\n316  matchbox twenty                     Bent      39\n\n[317 rows x 3 columns]\n\n\n\nlengths_rates = rates.merge(lengths)\nlengths_rates\n\n                 artist                    track  wk  rank  rate  length\n0               Aaliyah                Try Again  14 59.00  4.21      32\n1   Aguilera, Christina  Come On Over Baby (A...  11 57.00  5.18      21\n2   Aguilera, Christina        What A Girl Wants   8 71.00  8.88      24\n..                  ...                      ...  ..   ...   ...     ...\n14                Sisqo               Incomplete   8 77.00  9.62      26\n15     Vertical Horizon      Everything You Want  26 70.00  2.69      41\n16      matchbox twenty                     Bent  13 60.00  4.62      39\n\n[17 rows x 6 columns]\n\n\n\np = (\n    so.Plot(lengths_rates, x=\"rate\", y=\"length\")\n    .add(so.Dot(color=\"deepskyblue\"))\n    .add(so.Line(), so.PolyFit(2))\n    .label(x=\"Rate (rank per week )\", y=\"Length (wks)\")\n)\np"
  },
  {
    "objectID": "contents/exercise2.html",
    "href": "contents/exercise2.html",
    "title": "Exercises",
    "section": "",
    "text": "Load Packages\n# numerical calculation & data frames\nimport numpy as np\nimport pandas as pd\n\n# visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport seaborn.objects as so\n\n# statistics\nimport statsmodels.api as sm"
  },
  {
    "objectID": "contents/exercise2.html#movielens-1m-dataset",
    "href": "contents/exercise2.html#movielens-1m-dataset",
    "title": "Exercises",
    "section": "MovieLens 1M Dataset",
    "text": "MovieLens 1M Dataset\nSource: MovieLens 1M movie ratings\nMcKinney’s: 13. Data Analysis Examples\n1990년대 후반에서 2000년대 초반의 영화 평가에 대한 3개의 relational data로 이루어져 있고,\nuser_id, movie_id의 keys로 연결되어 있습니다.\n\nusers: 유저에 대한 정보\nratings: 평점에 대한 정보\nmovies: 영화에 대한 정보\n\n\n아래 데이터 링크가 원활하지 않을 시, 위의 MovieLens 1M movie ratings 사이트에서 직접 다운받으세요.\nml-1m.zip 압축파일을 풀어 users.dat, ratings.dat, movies.dat 세 파일을 아래 방식으로 읽어옵니다.\n\nunames = [\"user_id\", \"gender\", \"age\", \"occupation\", \"zip\"]\nusers = pd.read_table(\n    \"https://raw.githubusercontent.com/wesm/pydata-book/3rd-edition/datasets/movielens/users.dat\",\n    sep=\"::\",\n    header=None,\n    names=unames,\n    engine=\"python\",\n)\nusers\n\n      user_id gender  age  occupation    zip\n0           1      F    1          10  48067\n1           2      M   56          16  70072\n2           3      M   25          15  55117\n...       ...    ...  ...         ...    ...\n6037     6038      F   56           1  14706\n6038     6039      F   45           0  01060\n6039     6040      M   25           6  11106\n\n[6040 rows x 5 columns]\n\n\n\nrnames = [\"user_id\", \"movie_id\", \"rating\", \"timestamp\"]\nratings = pd.read_table(\n    \"https://raw.githubusercontent.com/wesm/pydata-book/3rd-edition/datasets/movielens/ratings.dat\",\n    sep=\"::\",\n    header=None,\n    names=rnames,\n    engine=\"python\",\n)\nratings\n\n         user_id  movie_id  rating  timestamp\n0              1      1193       5  978300760\n1              1       661       3  978302109\n2              1       914       3  978301968\n...          ...       ...     ...        ...\n1000206     6040       562       5  956704746\n1000207     6040      1096       4  956715648\n1000208     6040      1097       4  956715569\n\n[1000209 rows x 4 columns]\n\n\n\nmnames = [\"movie_id\", \"title\", \"genres\"]\nmovies = pd.read_table(\n    \"https://raw.githubusercontent.com/wesm/pydata-book/3rd-edition/datasets/movielens/movies.dat\",\n    sep=\"::\",\n    header=None,\n    names=mnames,\n    engine=\"python\",\n)\nmovies.head(6)\n\n   movie_id                               title                        genres\n0         1                    Toy Story (1995)   Animation|Children's|Comedy\n1         2                      Jumanji (1995)  Adventure|Children's|Fantasy\n2         3             Grumpier Old Men (1995)                Comedy|Romance\n3         4            Waiting to Exhale (1995)                  Comedy|Drama\n4         5  Father of the Bride Part II (1995)                        Comedy\n5         6                         Heat (1995)         Action|Crime|Thriller\n\n\n\n\nratings과 users 데이터를 merge한 후 다음과 같은 user_rating 데이터셋을 만드세요.\n\n#          user_id gender  age  occupation    zip  movie_id  rating  timestamp\n# 0              1      F    1          10  48067      1193       5  978300760\n# 1              1      F    1          10  48067       661       3  978302109\n# 2              1      F    1          10  48067       914       3  978301968\n# ...          ...    ...  ...         ...    ...       ...     ...        ...\n# 1000206     6040      M   25           6  11106       562       5  956704746\n# 1000207     6040      M   25           6  11106      1096       4  956715648\n# 1000208     6040      M   25           6  11106      1097       4  956715569\n\n다음과 같이 영화(movie_id)별로 남녀(gender)에 따른 rating의 평균과 그 개수(count)을 구해보세요.\n\n#    movie_id gender  mean  count\n# 0         1      F  4.19    591\n# 1         1      M  4.13   1486\n# 2         2      F  3.28    176\n# 3         2      M  3.18    525\n# 4         3      F  3.07    136\n# 5         3      M  2.99    342\n...\n\n다음과 같은 플랏을 그려보고 평가의 수가 적을수록 그 편차가 커지는 현상을 확인해보세요.\n\n혹시, 평가의 수가 많은 영화일수록 평가가 높아지는 현상에 대해 설명할 수 있을까요?\n또한, 남녀의 평가에 차이가 벌어지는 현상을 설명할 수 있을까요?\n\n\n\n\n\n\n\n\n3번에서 플랏에 .limit(x=(0, 500), y=(2.5, 4.5))을 추가하여 평가 개수(count)가 0에서 500사이이고, 평균 rating이 2.5에서 4.5 사이인 것으로 확대해서 보고, 평가 개수가 몇 개 정도부터 남녀의 평가의 차이가 대략 일정하게 되는지 살펴보세요.\n\n\n\n\n\n\n\n영화별로 남녀의 평가가 크게 갈리는 영화들을 찾기 위해\n\n5.1 2번에서 구한 데이터에서 남녀 모두 rating이 300개 이상 있는 영화로만 간추려보세요.\n\n5.2 이 데이터를 popular_movies라고 명명하고,\n\n이 데이터를 gender에 관해 wide format으로 변환한 후; pivot()을 이용\n\n여자의 평균 rating에서 남자의 평균 rating을 뺀 그 차이를 데이터에 추가한 후; assign()을 이용\n그 차이로 sort한 후,\n\n5.3 여자의 선호가 더 높은 영화 5편과 남자의 선호가 더 높은 영화 5편 (선호 차이의 크기 순서로)을 구해보세요.\n\n이를 위해서 movies 테이블 안의 영화제목(title)을 merge()를 이용해 추가하세요.\n\n\n3번 플랏에서 유추되듯이 평가의 개수가 영화의 완성도 혹은 인기도를 파악할 수 있는 대략적인 지표가 될 수 있습니다. 즉, 평가수가 많을 수록 평점도 높습니다. 따라서 평가 개수를 바탕으로 인기도(popularity)를 수치화 하려고 합니다.\n\n우선, 3번 플랏에서 평가수가 같다면 여성이 더 높은 평점을 주는 것으로 보이는데, 이 현상을 다음과 같이 자세히 들여다 봅니다.\n\n다음과 같은 count를 20개의 구간으로 discretize해주는 함수를 성별로 grouping된 user_rating 데이터에 apply() 하세요.\ndef popular(g):\n    g[\"popularity\"] = pd.qcut(g[\"count\"], q=20, labels=False)\n    return g\n\n이 함수의 의미를 파악하고, 20단계 (0, 1, 2, …, 19)의 popularity가 성별을 고려하여 각 영화에 부여되었음을 이해합니다. (각각은 평가 개수 5%에 해당)\n이제, 다음과 같이 popularity에 따라 평점이 높아지는 현상을 성별을 고려한 후 본 결과를 아래와 같이 플랏을 통해 확인해봅니다.\n남성 유저와 여성 유저의 비율에 큰 차이 (4331:1709)가 있는 것을 고려했을 때, 어떻게 이 현상을 설명할 수 있을까요?\n\n\n\n\n\n\n\n\n남녀별로 평점의 편차가 큰, 즉 의견이 분분한 영화들을 구해봅니다.\n\n5번에서 구한 popular_movies에 한해 남녀 각각에 대해 영화별로 평점의 편차를 표준편차로 구해보고,\n\n5번을 못 구한 경우, 다음 파일을 다운로드 받아 popular_movies로 사용합니다.\n\n남녀별로 편차 상위 2개만 표시합니다. (동등한 순서 모두 포함)\n\n다음 method를 이용하는 함수를 정의하고 apply()로 적용해 봅니다.\ndf.nlargest(n, \"variable name\", keep=\"all\")\n\n영화제목을 movies 데이터와 merge하여 표시합니다.\n\n이제 초점을 유저들에게 돌려, 유저들의 특성을 고려해봅니다. 일반적으로 같은 소스(사람)에서 온 데이터는 비슷한 성향을 띄는데 이를 depenency의 문제라고 합니다. 한 가족 구성원으로부터 왔다든가, 같은 학교의 학생들과 같이 구체적으로 명시하기 어렵지만 데이터 상에서 비슷한 군집을 이룹니다. 이 데이터의 경우 동일한 유저들의 특성이 존재할 수 있는데, 예를 들어 후한 점수를 준다든가, 같은 유저라도 어떤 장르의 영화는 매우 낮은 평점을 준다든가 하는 현상이 있을 수 있는데 이를 알아봅니다.\n\n8.1 우선 개인별(성별로 나눠)로 몇 개정도나 평점을 주었는지 분포를 살펴봅니다.\n8.2 개인별로 평점의 평균(mean)과 표준편차(std), 개수(count)를 구합니다; 성별 차는 없는 것으로 간주함\n8.3 이 세 변수의 관계를 보기 위해, 평점 개수(count)를 10개의 구간으로 pd.cut을 이용해 discretize해서 살펴봅니다.\n\n8.1에서 분포를 살펴보았으면, 개수를 먼저 log 스케일로 변환해서 구간으로 쪼개는 것이 유리함을 알 것입니다. (np.log 이용)\n즉, 대다수는 2백개 이하의 평점을 남긴 반면, 소수의 유저들 중에는 수천개의 평점을 남긴 사람도 있습니다.\n10개 구간으로 discretized된 (log) count를 .facet을 이용해 아래와 같이 유저들 각자의 평점 평균과 표준편차의 관계를 살펴봅니다; (아래 플랏은 데이터를 적절히 필터링 한 결과입니다.)\n평점을 얼마나 많이 남겼는지와 관계없이 비슷한 현상이 나타나는데 이 현상을 설명할 수 있을까요?\n평균적으로 낮은 평점을 준 소위 짠 유저들이 더 비판적이고 고민끝에 평점을 준 것이라고 추측할 수 있을까요?\n\n\n\n\n\n\n\n\n\n장르별로 남녀의 선호 차이를 두 관점 1) 평점의 개수/비율, 2) 평점의 평균의 관점에서 따로 살펴봅니다.\n\nmovies 데이터에서 장르(genres)는 여러 장르에 포함되는 것을 | 기호로 나누어 표기되어 있고, 분석을 위해서 다음 코드를 이용해 long format으로 각 장르가 열에 한번씩만 나오도록 다음과 같이 바꾸세요.\nmovies_long = movies.copy()\n\nmovies_long[\"genres\"] = movies_long[\"genres\"].str.split(\"|\")\nmovies_long = movies_long.explode(\"genres\")\n\nmovies_long.head(8)\n#    movie_id                    title      genres\n# 0         1         Toy Story (1995)   Animation\n# 0         1         Toy Story (1995)  Children's\n# 0         1         Toy Story (1995)      Comedy\n# 1         2           Jumanji (1995)   Adventure\n# 1         2           Jumanji (1995)  Children's\n# 1         2           Jumanji (1995)     Fantasy\n# 2         3  Grumpier Old Men (1995)      Comedy\n# 2         3  Grumpier Old Men (1995)     Romance\n\n\n이 movie_long과 1번에서 만든 user_rating을 merge한 후 다음 문제를 이어가세요.\n9.1 장르별로 평점의 개수를 간단히 플랏으로 살펴보는데 남녀 별로 따로 비율이 나오도록 해보세요.\n\nso.Hist(\"proportion\", common_norm=False)이 필요할 수 있음\n\n\n\n\n\n\n9.2 이번에는 장르별로 평점의 평균를 남녀별로 간단히 플랏으로 확인해보세요.\n\nso.Agg()를 활용하고,\n.limit(x=(3, 4.2))를 써서 확대해서 살펴보세요.\n\n\n\n\n\n\n9.3 위의 플랏에서 살펴본 평균 평점의 값을 직접 구해봅니다. 장르별, 남녀로 그룹핑을 하여 평균 평점을 다음과 같이 나오도록 구해보세요.\n\nunstack()을 활용해 보세요.\n\n# gender       genre    F    M\n# 0           Action  ...  ...\n# 1        Adventure  ...  ...\n# ..             ...  ...  ...\n# 16             War  ...  ...\n# 17         Western  ...  ...\n9.4 영화별 남녀의 평균 평점의 차이(Female - Male) 순으로 정렬된 플랏을 대략적으로 다음과 같이 그려봅니다.\n\nCustomizing할 때, .limit(x=(3, 4.2))과 .scale(y=so.Nominal(order=[]))이 필요할 수 있습니다.\n\n\n\n\n\n\n9.5 평점의 장르별 분포를 boxplot으로 볼 수도 있지만, 대신 seaborn.object의 Range()를 써서 평균과 표준편차를 다음과 같이 그려보세요.\n\nrange는 .add(so.Range(), so.Est(\"mean\", errorbar=\"sd\"))를 활용하고\n평균은 Agg()을 이용해 표시합니다.\n\n\n\n\n\n\n\n장르별로 나이대에 따른 영화시청에 차이가 있는지 살펴봅니다. 나이는 다음과 같이 코딩되어 있습니다.\n\n\n1: “Under 18”\n18: “18-24”\n25: “25-34”\n35: “35-44”\n45: “45-49”\n50: “50-55”\n56: “56+”\n\n9번에서 데이터를 만들지 못한 경우 경우, 다음 .parquet 파일을 받아 이용해 다음 문제를 이어가세요.\npd.read_parquet(\"data/movies_long_all.parquet\")\n10.1 우선, 위에서 western 장르가 남녀의 평점 차이가 가장 크게 나타나 남성이 선호하는 것으로 보이는데 western 장르만 따로 떼어 나이대/남녀 별로 rating에 차이가 있는지 살펴봅니다.\n\n우선 scatterplot으로 살펴보는 것이 유용한지 체크해보세요.\n개선할 방법이 있을까요?\nFitted line만을 so.PolyFit(5)을 이용하여 다음과 같이 그려보세요.\n\nx축 눈금은 .scale(x=so.Continuous().tick(at=[1, 18, 25, 35, 45, 50, 56]))\n\n어떤 점을 파악할 수 있나요?\n\n\n\n\n\n\n10.2 western 장르의 남녀 차이는 18:18-24세 사이에 가장 커보이고 그 갭은 다른 연령대에서는 줄어드는 것으로 보입니다.\n\n하지만, 만약 18-24세 대에서 남성이 여성에 비해 과하게 많은 평점을 내렸다면 적절한 결론이 아닐 수 있습니다. 즉, 18-24세 대에서 평점의 개수 비율이 남녀가 동일해야 좀 더 확신을 가질 수 있습니다.\n이를 확인하기 위해 다음과 같은 테이블을 구해보세요.\n예를 들어, 18:18-24세 남성의 14%와 여성의 14%가 평점을 남겼으며, 45:45-49세 남성의 15%와 여성의 9%가 평점을 남겼습니다.\n\n\n\n    age gender  mean  size  total  ratio\n0     1      F  3.60    91   3477   0.03\n1     1      M  3.57   244  17206   0.01\n2    18      F  3.24   503   3477   0.14\n3    18      M  3.52  2360  17206   0.14\n4    25      F  3.45  1034   3477   0.30\n5    25      M  3.63  6019  17206   0.35\n6    35      F  3.63   791   3477   0.23\n7    35      M  3.69  3755  17206   0.22\n8    45      F  3.67   508   3477   0.15\n9    45      M  3.67  1625  17206   0.09\n10   50      F  3.83   330   3477   0.09\n11   50      M  3.73  2090  17206   0.12\n12   56      F  3.77   220   3477   0.06\n13   56      M  3.80  1113  17206   0.06\n\n\n10.3 이 테이블을 다음과 같이 비율을 pointsize에 mapping하여 시각화해보고, 동일한 나이대에서 남녀의 평점 개수 비율에 차이가 크게 나는지 살펴보세요.\n\n\n\n\n\n10.4 이제 모든 장르를 한눈에 살펴보기 위해 facet을 이용해 다음과 같이 시각화해보세요.\n\n\n\n\n\n\n영화 제목에 있는 출시년도를 추출해 이용하기 위해 다음 코드를 활용하세요.\n\n\nmovies[\"year\"] = movies[\"title\"].str.extract(r'\\((\\d{4})\\)').astype(\"int\")\nmovies\n\n      movie_id                    title                        genres  year\n0            1         Toy Story (1995)   Animation|Children's|Comedy  1995\n1            2           Jumanji (1995)  Adventure|Children's|Fantasy  1995\n2            3  Grumpier Old Men (1995)                Comedy|Romance  1995\n...        ...                      ...                           ...   ...\n3880      3950         Tigerland (2000)                         Drama  2000\n3881      3951  Two Family House (2000)                         Drama  2000\n3882      3952    Contender, The (2000)                Drama|Thriller  2000\n\n[3883 rows x 4 columns]\n\n\n\n11.1 먼저 출시년도별로 얼마나 영화가 있는지 분포를 살펴보세요.\n11.2 출시년도가 없는 영화가 있는가요?\n11.3 오래된 영화일수록 나이든 사람들의 시청 비율이 높을지에 대해 분포를 살펴보세요.\n\n나이를 다음과 같이 (pandas) category type으로 변환하여 분석합니다.\n.assign(\n    age = lambda x: pd.Categorical(x.age.astype(\"string\"), categories=[\"1\", \"18\", \"25\", \"35\", \"45\", \"50\", \"56\"], ordered=True)\n)\n나이를 row에 facet하는 방식으로 분포를 살펴보세요.\n\n\n\n10년 기준으로 년대를 정했을 때, 년대에 따라 장르들의 비율이 어떻게 변화했는지 살펴봅니다.\n\n\n예를 들어, 코메디 장르의 경우 아래 플랏처럼 1920년대에 다른 장르에 비해 상대적으로 높은 비율을 보이다가 1950년대까지는 쭉 낮아지다 다시 증가하는 비율을 보입니다.\n장르별로 facet을 하여 모든 장르들의 비율 변화를 그려보세요.\n우선 년대를 다음 방식으로 만든 후, 예를 들어, 1990-1999년은 1990이 되도록 한 후\nmovies.assign(\n    decade = lambda x: np.floor(x.year / 10) * 10  # np.floor(): 내림\n)\ndecade와 genres에 대해 pd.crosstab()을 적용하여 비율에 대한 테이블을 만든 후 stack()을 적용하여 long foramt으로 바꾼 후 그려보세요.\n\npd.crosstab()의 파라미터를 확인해서 비율을 구하세요.\n\n\n\n\n\n\n\n\n매니아적 성향을 파악해 봅니다.\n\n\n13.1 유저들 중에는 소수의 특정 장르만을 시청할 수 있는데, 다시 말해서 유저별 장르의 편향성을 알아볼 수 있는 지표를 만들어 특정 장르만을 독식하는 유저들을 파악해보는 방식에 대해 아이디어를 기술해보고, 코드로 구현할 수 있는 스텝을 대략 제시해보세요.\n13.2 구현된 코드로 실행한 결과를 표시해보세요.\n예를 들어, 유저별로 장르마다 몇 %씩을 평가했는지와 전체 유저의 장르별 평가 비율을 구해 상대적으로 유저들이 얼마나 치우쳐 장르를 소비하는 지를 알아보는 방식도 좋겠습니다."
  },
  {
    "objectID": "contents/exercise2_sol.html",
    "href": "contents/exercise2_sol.html",
    "title": "Solutions",
    "section": "",
    "text": "Load Packages\n# numerical calculation & data frames\nimport numpy as np\nimport pandas as pd\n\n# visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport seaborn.objects as so\n\n# statistics\nimport statsmodels.api as sm"
  },
  {
    "objectID": "contents/exercise2_sol.html#movielens-1m-dataset",
    "href": "contents/exercise2_sol.html#movielens-1m-dataset",
    "title": "Solutions",
    "section": "MovieLens 1M Dataset",
    "text": "MovieLens 1M Dataset\nSource: MovieLens 1M movie ratings\nMcKinney’s: 13. Data Analysis Examples\n1990년대 후반에서 2000년대 초반의 영화 평가에 대한 3개의 relational data로 이루어져 있고,\nuser_id, movie_id의 keys로 연결되어 있습니다.\n\nusers: 유저에 대한 정보\nratings: 평점에 대한 정보\nmovies: 영화에 대한 정보\n\n\n\nunames = [\"user_id\", \"gender\", \"age\", \"occupation\", \"zip\"]\nusers = pd.read_table(\n    \"https://raw.githubusercontent.com/wesm/pydata-book/3rd-edition/datasets/movielens/users.dat\",\n    sep=\"::\",\n    header=None,\n    names=unames,\n    engine=\"python\",\n)\nusers\n\n      user_id gender  age  occupation    zip\n0           1      F    1          10  48067\n1           2      M   56          16  70072\n2           3      M   25          15  55117\n...       ...    ...  ...         ...    ...\n6037     6038      F   56           1  14706\n6038     6039      F   45           0  01060\n6039     6040      M   25           6  11106\n\n[6040 rows x 5 columns]\n\n\n\nrnames = [\"user_id\", \"movie_id\", \"rating\", \"timestamp\"]\nratings = pd.read_table(\n    \"https://raw.githubusercontent.com/wesm/pydata-book/3rd-edition/datasets/movielens/ratings.dat\",\n    sep=\"::\",\n    header=None,\n    names=rnames,\n    engine=\"python\",\n)\nratings\n\n         user_id  movie_id  rating  timestamp\n0              1      1193       5  978300760\n1              1       661       3  978302109\n2              1       914       3  978301968\n...          ...       ...     ...        ...\n1000206     6040       562       5  956704746\n1000207     6040      1096       4  956715648\n1000208     6040      1097       4  956715569\n\n[1000209 rows x 4 columns]\n\n\n\nmnames = [\"movie_id\", \"title\", \"genres\"]\nmovies = pd.read_table(\n    \"https://raw.githubusercontent.com/wesm/pydata-book/3rd-edition/datasets/movielens/movies.dat\",\n    sep=\"::\",\n    header=None,\n    names=mnames,\n    engine=\"python\",\n)\nmovies.head(6)\n\n   movie_id                               title                        genres\n0         1                    Toy Story (1995)   Animation|Children's|Comedy\n1         2                      Jumanji (1995)  Adventure|Children's|Fantasy\n2         3             Grumpier Old Men (1995)                Comedy|Romance\n3         4            Waiting to Exhale (1995)                  Comedy|Drama\n4         5  Father of the Bride Part II (1995)                        Comedy\n5         6                         Heat (1995)         Action|Crime|Thriller\n\n\n\n\nratings과 users 데이터를 merge한 후 user_rating 데이터셋을 만드세요.\n\n\nuser_rating = pd.merge(users, ratings)\nuser_rating\n\n         user_id gender  age  occupation    zip  movie_id  rating  timestamp\n0              1      F    1          10  48067      1193       5  978300760\n1              1      F    1          10  48067       661       3  978302109\n2              1      F    1          10  48067       914       3  978301968\n...          ...    ...  ...         ...    ...       ...     ...        ...\n1000206     6040      M   25           6  11106       562       5  956704746\n1000207     6040      M   25           6  11106      1096       4  956715648\n1000208     6040      M   25           6  11106      1097       4  956715569\n\n[1000209 rows x 8 columns]\n\n\n\n다음과 같이 영화(movie_id)별로 남녀(gender)에 따른 rating의 평균과 그 개수(count)을 구해보세요.\n\n\nmean_ratings = (\n    user_rating\n    .groupby([\"movie_id\", \"gender\"])[\"rating\"]\n    .agg([\"mean\", \"count\"])\n    .reset_index()\n)\nmean_ratings.head(6)\n\n   movie_id gender  mean  count\n0         1      F  4.19    591\n1         1      M  4.13   1486\n2         2      F  3.28    176\n3         2      M  3.18    525\n4         3      F  3.07    136\n5         3      M  2.99    342\n\n\n\n다음과 같이 평가의 수가 적을수록 그 편차가 커지는 현상을 확인해보세요. 평가의 수가 많은 영화일수록 평가가 높아지는 현상에 대해 설명할 수 있을까요? 또한, 남녀의 평가에 차이가 벌어지는 현상을 설명할 수 있을까요?\n\n\n(\n    so.Plot(mean_ratings, x=\"count\", y=\"mean\", color=\"gender\")\n    .add(so.Dots(alpha=.1))\n    .add(so.Line(), so.PolyFit(5))\n    .scale(color=\"Dark2\")\n)\n\n\n\n\n유명한/잘 만든 영화를 더 많이 봐서? 좋게 본 영화는 더 평점을 내리는 경향이 있어서?\n\n# 남녀 총 평점 수를 고려해서 비율로 보면\nmean_ratings[\"total\"] = mean_ratings.groupby(\"gender\")[\"count\"].transform(\"sum\")\nmean_ratings = mean_ratings.assign(\n    prop = lambda x: x[\"count\"] / x[\"total\"]\n)\n\n\nmean_ratings\n\n      movie_id gender  mean  count   total  prop\n0            1      F  4.19    591  246440  0.00\n1            1      M  4.13   1486  753769  0.00\n2            2      F  3.28    176  246440  0.00\n...        ...    ...   ...    ...     ...   ...\n7149      3951      M  4.04     23  753769  0.00\n7150      3952      F  3.76    105  246440  0.00\n7151      3952      M  3.79    283  753769  0.00\n\n[7152 rows x 6 columns]\n\n\n\n(\n    so.Plot(mean_ratings, x=\"prop\", y=\"mean\", color=\"gender\")\n    .add(so.Dots(alpha=.1))\n    .add(so.Line(), so.PolyFit(5))\n    .scale(color=\"Dark2\", x=\"log\") # log scale\n    .limit(y=(2, 4.5))\n)\n\n\n\n\n\n3번에서 seaborn.objects에 .limit(x=(0, 500), y=(2.5, 4.5))을 추가하여 평가 개수(count)가 0에서 500사이이고, 평균 rating이 2.5에서 4.5 사이인 것으로 확대해서 보고, 평가 개수가 몇 개 정도부터 남녀의 평가의 차이가 대략 일정하게 되는지 살펴보세요.\n\n\n(\n    so.Plot(mean_ratings, x=\"count\", y=\"mean\", color=\"gender\")\n    .add(so.Dots(alpha=.1))\n    .add(so.Line(), so.PolyFit(5))\n    .scale(color=\"Dark2\")\n    .limit(x=(0, 500), y=(2.5, 4.5))\n)\n\n\n\n\n\n영화별로 남녀의 평가가 크게 갈리는 영화들을 찾기 위해\n\n5.1 2번에서 구한 데이터에서 남녀 모두 rating이 300개 이상 있는 영화로만 간추려보세요.\n\n5.2 이 데이터를 popular_movies라고 명명하고,\n\n이 데이터를 gender에 관해 wide format으로 변환한 후; pivot()을 이용\n\n여자의 평균 rating에서 남자의 평균 rating을 뺀 그 차이를 데이터에 추가한 후; assign()을 이용\n그 차이로 sort한 후,\n\n5.3 여자의 선호가 더 높은 영화 5편과 남자의 선호가 더 높은 영화 5편 (선호 차이의 크기 순서로)을 구해보세요.\n\n이를 위해서 movies 테이블 안의 영화제목(title)을 merge()를 이용해 추가하세요.\n\n\n\n5.1 2번에서 구한 데이터에서 남녀 모두 rating이 300개 이상 있는 영화로만 간추려보세요.\n\nmean_ratings\n\n      movie_id gender  mean  count   total  prop\n0            1      F  4.19    591  246440  0.00\n1            1      M  4.13   1486  753769  0.00\n2            2      F  3.28    176  246440  0.00\n...        ...    ...   ...    ...     ...   ...\n7149      3951      M  4.04     23  753769  0.00\n7150      3952      F  3.76    105  246440  0.00\n7151      3952      M  3.79    283  753769  0.00\n\n[7152 rows x 6 columns]\n\n\n\n# groupby .filter()를 이용\npopular_movies = (\n    mean_ratings\n    .groupby(\"movie_id\", group_keys=False)\n    .filter(lambda x: (x[\"count\"] >= 300).all())  # groupby filtering\n)\npopular_movies\n\n      movie_id gender  mean  count   total  prop\n0            1      F  4.19    591  246440  0.00\n1            1      M  4.13   1486  753769  0.00\n20          11      F  3.92    379  246440  0.00\n...        ...    ...   ...    ...     ...   ...\n6452      3578      M  4.11   1539  753769  0.00\n6773      3751      F  3.89    367  246440  0.00\n6774      3751      M  3.88    962  753769  0.00\n\n[262 rows x 6 columns]\n\n\n\n# 또는\npopular_movies = (\n    mean_ratings\n    .query('count >= 300')\n    .groupby(\"movie_id\")\n    .filter(lambda x: x.shape[0] == 2)\n)\npopular_movies.head(6)\n\n    movie_id gender  mean  count\n0          1      F  4.19    591\n1          1      M  4.13   1486\n20        11      F  3.92    379\n21        11      M  3.72    654\n32        17      F  4.23    420\n33        17      M  3.82    415\n\n\n5.2 이 데이터를 popular_movies라고 명명하고,\n이 데이터를 gender에 관해 wide format으로 변환한 후; pivot()을 이용\n여자의 평균 rating에서 남자의 평균 rating의 차이를 구해 데이터에 추가한 후; assign()을 이용\n\ndiffs_fm = (\n    popular_movies\n    .pivot(index=\"movie_id\", columns=\"gender\", values=\"mean\")\n    .assign(diffs = lambda x: x.F - x.M)\n    .sort_values(\"diffs\")\n)\ndiffs_fm\n\ngender      F    M  diffs\nmovie_id                 \n2791     3.66 4.06  -0.41\n1221     4.04 4.44  -0.40\n589      3.79 4.12  -0.33\n...       ...  ...    ...\n920      4.27 3.83   0.44\n1028     4.20 3.73   0.47\n2657     3.67 3.16   0.51\n\n[131 rows x 3 columns]\n\n\n5.3 여자의 선호가 더 큰 영화 5편과 남자의 선호가 더 큰 영화 5편 (선호 차이의 크기 순서로)을 구해보세요. 이를 위해서 movies 테이블에서 영화제목을 merge()를 이용해 구하세요.\n\ndiffs_fm = diffs_fm.merge(movies[[\"movie_id\", \"title\"]], left_index=True, right_on=\"movie_id\") # diffs_fm의 movie_id가 index!\n\n\ndiffs_fm.head(5)\n\n        F    M  diffs  movie_id                              title\n2722 3.66 4.06  -0.41      2791                   Airplane! (1980)\n1203 4.04 4.44  -0.40      1221     Godfather: Part II, The (1974)\n585  3.79 4.12  -0.33       589  Terminator 2: Judgment Day (1991)\n1196 3.89 4.22  -0.33      1214                       Alien (1979)\n1220 3.90 4.21  -0.31      1240             Terminator, The (1984)\n\n\n\ndiffs_fm.tail(5)\n\n        F    M  diffs  movie_id                                  title\n1171 4.17 3.77   0.41      1188               Strictly Ballroom (1992)\n16   4.23 3.82   0.41        17           Sense and Sensibility (1995)\n908  4.27 3.83   0.44       920              Gone with the Wind (1939)\n1015 4.20 3.73   0.47      1028                    Mary Poppins (1964)\n2588 3.67 3.16   0.51      2657  Rocky Horror Picture Show, The (1975)\n\n\n\n3번에서 플랏에서 유추되듯이 평가의 개수가 영화의 완성도 혹은 인기도를 파악할 수 있는 대략적인 지표가 될 수 있습니다. 즉, 평가수가 많을 수록 평점도 높습니다. 따라서 평가 개수를 바탕으로 인기도(popularity)를 수치화 하려고 합니다.\n\n6.1 우선, 3번 플랏에서 평가수가 같다면 여성이 더 높은 평점을 주는 것으로 보이는데, 이 현상을 다음과 같이 자세히 들여다 봅니다.\n\n다음 함수를 성별로 grouping된 user_rating 데이터에 apply() 하세요.\ndef popular(g):\n    g[\"popularity\"] = pd.qcut(g[\"count\"], q=20, labels=False)\n    return g\n\n이 함수의 의미를 파악하고, 20단계 (0, 1, 2, …, 19)의 popularity가 성별을 고려하여 각 영화에 부여되었음을 이해합니다.\n이제, 다음과 같이 popularity에 따라 평점이 높아지는 현상을 성별을 고려한 후 본 결과를 플랏을 통해 확인해봅니다.\n\n\n\ndef popular(g):\n    g[\"popularity\"] = pd.qcut(g[\"count\"], q=20, labels=False)\n    return g\n\npopularity = mean_ratings.groupby(\"gender\", group_keys=False).apply(popular)\npopularity\n\n      movie_id gender  mean  count  popularity\n0            1      F  4.19    591          19\n1            1      M  4.13   1486          19\n2            2      F  3.28    176          17\n...        ...    ...   ...    ...         ...\n7149      3951      M  4.04     23           4\n7150      3952      F  3.76    105          15\n7151      3952      M  3.79    283          15\n\n[7152 rows x 5 columns]\n\n\n\n(\n    so.Plot(popularity, x=\"popularity\", y=\"mean\", color=\"gender\")\n    .add(so.Dots(alpha=0.01), so.Jitter(width=.5))\n    .add(so.Line(), so.PolyFit(5))\n    .scale(x=so.Continuous().tick(at=np.arange(20)))\n    .layout(size=(5, 6))\n)\n\n\n\n\n\n남녀별로 평점의 편차가 큰, 즉 의견이 분분한 영화들을 구해봅니다.\n\n5번에서 구한 popular_movies에 한해 남녀별 평점의 편차를 표준편차로 구해보고,\n남녀별로 편차 상위 2개만 표시합니다. (동등한 순서 모두)\n영화제목을 movies 데이터와 merge하여 표시합니다.\n\n\n\npopular_movies\n\n      movie_id gender  mean  count\n0            1      F  4.19    591\n1            1      M  4.13   1486\n20          11      F  3.92    379\n...        ...    ...   ...    ...\n6452      3578      M  4.11   1539\n6773      3751      F  3.89    367\n6774      3751      M  3.88    962\n\n[262 rows x 4 columns]\n\n\n\nratings_std = (\n    user_rating\n    .groupby([\"gender\", \"movie_id\"])[\"rating\"]\n    .agg([\"std\", \"count\"])\n)\nratings_std\n\n                  std  count\ngender movie_id             \nF      1        0.866    591\n       2        1.018    176\n       3        1.079    136\n       4        0.926     85\n...               ...    ...\nM      3949     0.924    224\n       3950     1.116     44\n       3951     1.065     23\n       3952     0.902    283\n\n[7152 rows x 2 columns]\n\n\n\ndef top(g, n=3):\n    return g.nlargest(n, \"std\", keep=\"all\")\n\n\nratings_top = (\n    ratings_std.query(\"count > 100\")\n    .groupby([\"gender\"], group_keys=False)\n    .apply(top, n=2)\n)\n\n\nratings_top\n\n                  std  count\ngender movie_id             \nF      2700     1.374    258\n       288      1.356    114\nM      1924     1.468    208\n       3864     1.346    115\n\n\n\nratings_top.reset_index().merge(movies).drop(columns=\"movie_id\")\n\n  gender   std  count                                           title   \n0      F 1.374    258     South Park: Bigger, Longer and Uncut (1999)  \\\n1      F 1.356    114                     Natural Born Killers (1994)   \n2      M 1.468    208                  Plan 9 from Outer Space (1958)   \n3      M 1.346    115  Godzilla 2000 (Gojira ni-sen mireniamu) (1999)   \n\n                    genres  \n0         Animation|Comedy  \n1          Action|Thriller  \n2            Horror|Sci-Fi  \n3  Action|Adventure|Sci-Fi  \n\n\n\n이제 초점을 유저들에게 돌려, 유저들의 특성을 고려해봅니다. 일반적으로 같은 소스(사람)에서 온 데이터는 비슷한 성향을 띄는데 이를 depenency의 문제라고 합니다. 한 가족 구성원으로부터 왔다든데 같은 학교의 학생들과 같이 구체적으로 명시하기 어렵지만 데이터 상에서 비슷한 군집을 이룹니다. 이 데이터의 경우 동일은 유저들의 특성이 존재할 수 있는데 예를 들어 후한 점수를 준다든가 같은 유저라도 어떤 장르의 영화는 매우 낮은 평점을 준다든가 하는 현상이 있을 수 있는데 이를 알아봅니다.\n\n8.1 우선 개인별(성별로 나눠)로 몇 개정도나 평점을 주었는지 분포를 살펴봅니다.\n8.2 개인별로 평점의 평균과 표준편차를 구합니다.\n\n\n8.1 우선 개인별(성별로 나눠)로 몇 개정도나 평점을 주었는지 분포를 살펴봅니다.\n\nrate_n = user_rating.groupby([\"user_id\", \"gender\"]).size().reset_index(name=\"n\")\nrate_n.describe()\n\n       user_id       n\ncount  6040.00 6040.00\nmean   3020.50  165.60\nstd    1743.74  192.75\nmin       1.00   20.00\n25%    1510.75   44.00\n50%    3020.50   96.00\n75%    4530.25  208.00\nmax    6040.00 2314.00\n\n\n\np = (\n    so.Plot(rate_n, x=\"n\", color=\"gender\")\n    .add(so.Line(), so.Hist())\n)\np\n\n\n\n\n\np.scale(x=\"log\")\n\n\n\n\n8.2 유저 개인별로 평점(rating)의 평균과 표준편차, 개수를 구합니다.\n\npd.options.display.max_rows = 7\n\nuser_stats = (\n    user_rating\n    .groupby(\"user_id\")[\"rating\"]\n    .agg([\"mean\", \"std\", \"count\"])\n)\nuser_stats\n\n         mean  std  count\nuser_id                  \n1        4.19 0.68     53\n2        3.71 1.00    129\n3        3.90 0.98     51\n...       ...  ...    ...\n6038     3.80 1.11     20\n6039     3.88 0.73    123\n6040     3.58 1.18    341\n\n[6040 rows x 3 columns]\n\n\n8.3 이 세 변수의 관계를 보기 위해, 평점 개수를 10개의 구간으로 pd.cut을 이용해 discretize해서 살펴봅니다.\n\n8.1에서 분포를 살펴보았으면, 개수를 먼저 log 스케일로 변환해서 구간으로 쪼개는 것이 유리함을 알 것입니다.\n즉, 다수는 2백개 이하의 평점을 남긴 반면, 소수의 유저들 중에는 수천개의 평점을 남긴 사람도 있습니다.\n10개 구간으로 discretized된 (log) count를 .facet을 이용해 다음과 같이 유저들 각자의 평점 평균과 표준편차의 관계를 살펴봅니다.\n이 현상을 설명할 수 있을까요?\n평균적으로 낮은 평점을 준 소위 짠 유저들이 더 비판적이고 고민끝에 평점을 준 것이라고 추측할 수 있을까요?\n\n\nuser_stats[\"lcount\"] = np.log(user_stats[\"count\"])\nuser_stats[\"lcount_cat\"] = pd.cut(user_stats[\"lcount\"], 10, labels=False)\n(\n    so.Plot(user_stats.query('mean > 2 & lcount_cat < 9'), x=\"mean\", y=\"std\")\n    .add(so.Dots(alpha=.3))\n    .add(so.Line(), so.PolyFit(5))\n    .facet(\"lcount_cat\", wrap=3)\n    .layout(size=(15, 12))\n)\n\n\n\n\n\n(\n    so.Plot(user_stats.query('mean > 2 & lcount_cat < 9'), x=\"mean\", y=\"std\")\n    .add(so.Line(), so.PolyFit(1), color=\"lcount_cat\")\n)\n\n\n\n\n\n장르별로 남녀의 선호 차이를 살펴봅니다.\n\nmovies 데이터는 genres가 | 기호로 나누어 표기되어 있어서 분석을 위해서는 가공할 필요가 있는데, 다음 코드를 이용해 long format으로 바꾸세요.\n\n\n\nmovies_long = movies.copy()\n\nmovies_long[\"genres\"] = movies_long[\"genres\"].str.split(\"|\")\nmovies_long = movies_long.explode(\"genres\")\n\n\nmovies_long.head(8)\n\n   movie_id                    title      genres\n0         1         Toy Story (1995)   Animation\n0         1         Toy Story (1995)  Children's\n0         1         Toy Story (1995)      Comedy\n1         2           Jumanji (1995)   Adventure\n1         2           Jumanji (1995)  Children's\n1         2           Jumanji (1995)     Fantasy\n2         3  Grumpier Old Men (1995)      Comedy\n2         3  Grumpier Old Men (1995)     Romance\n\n\n\nmovies_long_all = movies_long.merge(user_rating)\nmovies_long_all \n\n         movie_id                  title     genres  user_id gender  age   \n0               1       Toy Story (1995)  Animation        1      F    1  \\\n1               1       Toy Story (1995)  Animation        6      F   50   \n2               1       Toy Story (1995)  Animation        8      M   25   \n3               1       Toy Story (1995)  Animation        9      M   25   \n...           ...                    ...        ...      ...    ...  ...   \n2101811      3952  Contender, The (2000)   Thriller     5831      M   25   \n2101812      3952  Contender, The (2000)   Thriller     5837      M   25   \n2101813      3952  Contender, The (2000)   Thriller     5927      M   35   \n2101814      3952  Contender, The (2000)   Thriller     5998      M   18   \n\n         occupation    zip  rating   timestamp  \n0                10  48067       5   978824268  \n1                 9  55117       4   978237008  \n2                12  11413       4   978233496  \n3                17  61614       5   978225952  \n...             ...    ...     ...         ...  \n2101811           1  92120       3   986223125  \n2101812           7  60607       4  1011902656  \n2101813          14  10003       1   979852537  \n2101814           4  61820       4  1001781044  \n\n[2101815 rows x 10 columns]\n\n\n9.1 장르별로 평점의 개수를 간단히 플랏으로 살펴보는데 남녀 별로 따로 비율이 나오도록 해보고, 남녀 차이가 특히 많이 나는 장르를 살펴보세요.\n\n(\n    so.Plot(movies_long_all, y=\"genres\", color=\"gender\")\n    .add(so.Bar(), so.Hist(\"proportion\", common_norm=False), so.Dodge())\n)\n\n\n\n\n9.2 이번에는 장르별로 평점의 평균를 남녀별로 간단히 플랏으로 확인해보세요.\n\n(\n    so.Plot(movies_long_all, y=\"genres\", x=\"rating\", color=\"gender\")\n    .add(so.Bar(), so.Agg(), so.Dodge())\n    .limit(x=(3, 4.2))\n)\n\n\n\n\n9.3 위의 플랏에서 살펴본 평균 평점의 값을 직접 구해봅니다. 장르별, 남녀로 그룹핑을 하여 평균 평점을 다음과 같이 나오도록 구해보세요.\n\ngenre_gender_wide = (\n    movies_long_all.groupby([\"genres\", \"gender\"])[\"rating\"]\n    .mean()\n    .unstack()\n    .reset_index()\n)\ngenre_gender_wide\n\ngender      genres    F    M\n0           Action 3.49 3.49\n1        Adventure 3.51 3.47\n2        Animation 3.74 3.66\n3       Children's 3.57 3.36\n..             ...  ...  ...\n14          Sci-Fi 3.45 3.47\n15        Thriller 3.57 3.57\n16             War 3.89 3.89\n17         Western 3.55 3.66\n\n[18 rows x 3 columns]\n\n\n\n# pivot_table을 이용하면,\nmovies_long_all.pivot_table(index=\"genres\", columns=\"gender\", values=\"rating\")\n\ngender        F    M\ngenres              \nAction     3.49 3.49\nAdventure  3.51 3.47\nAnimation  3.74 3.66\nChildren's 3.57 3.36\n...         ...  ...\nSci-Fi     3.45 3.47\nThriller   3.57 3.57\nWar        3.89 3.89\nWestern    3.55 3.66\n\n[18 rows x 2 columns]\n\n\n9.4 영화별 남녀의 평균 평점의 차이(Female - Male) 순으로 정렬된 플랏을 대략적으로 다음과 같이 그려봅니다.\n\ngenre_gender_diff = genre_gender_wide.assign(\n    diff = lambda x: x.F - x.M\n).sort_values(\"diff\")\ngenre_gender_diff\n\ngender      genres    F    M  diff\n17         Western 3.55 3.66 -0.10\n9        Film-Noir 4.02 4.09 -0.07\n5            Crime 3.69 3.71 -0.02\n..             ...  ...  ...   ...\n13         Romance 3.67 3.57  0.10\n11         Musical 3.81 3.60  0.21\n3       Children's 3.57 3.36  0.21\n\n[18 rows x 4 columns]\n\n\n\ngenre_gender_mean = (\n    movies_long_all.groupby([\"genres\", \"gender\"])[\"rating\"]\n    .mean()\n    .reset_index()\n)\ngenre_gender_mean\n\n       genres gender  rating\n0      Action      F    3.49\n1      Action      M    3.49\n2   Adventure      F    3.51\n..        ...    ...     ...\n33        War      M    3.89\n34    Western      F    3.55\n35    Western      M    3.66\n\n[36 rows x 3 columns]\n\n\n\n(\n    so.Plot(genre_gender_mean, y=\"genres\", x=\"rating\", color=\"gender\")\n    .add(so.Bar(), so.Dodge())\n    .scale(\n        y=so.Nominal(order=genre_gender_diff[\"genres\"].values),\n    )\n    .limit(x=(3, 4.2))\n)\n\n\n\n\n\n(\n    so.Plot(movies_long_all, x=\"rating\", y=\"genres\", color=\"gender\")\n    .add(so.Range(), so.Est(\"mean\", errorbar=\"sd\"), so.Dodge())\n    .add(so.Dot(pointsize=3), so.Agg(\"mean\"), so.Dodge())\n    .scale(\n        y=so.Nominal(order=genre_gender_diff[\"genres\"].values)\n    )\n)\n\n\n\n\n\n장르별로 나이대에 따른 영화시청에 차이가 있는지 살펴봅니다.\n\n10.1 우선, 위에서 western 장르가 남녀의 평점 차이가 가장 크게 나타나 남성이 선호하는 것으로 보이는데 western 장르만 따로 떼어 나이대 별로 rating에 차이가 있는지 살펴봅니다.\n\nwestern = movies_long_all.query('genres == \"Western\"')\n\n\n(\n    so.Plot(western, x=\"age\", y=\"rating\", color=\"gender\")\n    .add(so.Line(), so.PolyFit(5))\n)\n\n\n\n\n\nwestern_age_gender = western.groupby([\"age\", \"gender\"])[\"rating\"].agg([\"mean\", \"size\"]).reset_index()\nwestern_age_gender\n\n    age gender  mean  size\n0     1      F  3.60    91\n1     1      M  3.57   244\n2    18      F  3.24   503\n..  ...    ...   ...   ...\n11   50      M  3.73  2090\n12   56      F  3.77   220\n13   56      M  3.80  1113\n\n[14 rows x 4 columns]\n\n\n\nwestern_age_gender[\"total\"] = western_age_gender.groupby(\"gender\")[\"size\"].transform(\"sum\")\n\n\nwestern_age_gender = western_age_gender.assign(\n    ratio = lambda x: x[\"size\"] / x[\"total\"]\n)\nwestern_age_gender\n\n    age gender  mean  size  total  ratio\n0     1      F  3.60    91   3477   0.03\n1     1      M  3.57   244  17206   0.01\n2    18      F  3.24   503   3477   0.14\n..  ...    ...   ...   ...    ...    ...\n11   50      M  3.73  2090  17206   0.12\n12   56      F  3.77   220   3477   0.06\n13   56      M  3.80  1113  17206   0.06\n\n[14 rows x 6 columns]\n\n\n\n(\n    so.Plot(western_age_gender, x=\"age\", y=\"mean\", pointsize=\"ratio\", color=\"gender\")\n    .add(so.Dot())\n    .scale(pointsize=(5, 25))\n    .scale(x=so.Continuous().tick(at=[1, 18, 25, 35, 45, 50, 56]))\n)\n\n\n\n\n\n(\n    so.Plot(movies_long_all, x=\"age\", y=\"rating\", color=\"gender\")\n    .add(so.Line(), so.PolyFit(5))\n    .facet(\"genres\", wrap=5)\n    .share(y=False)\n    .layout(size=(10, 8))\n    .scale(x=so.Continuous().tick(at=[1, 18, 25, 35, 45, 50, 56]))\n)\n\n\n\n\n\n영화 제목에 있는 출시년도를 추출해 이용하기 위해 다음 코드를 활용하세요.\n\n\nmovies[\"year\"] = movies[\"title\"].str.extract(r'\\((\\d{4})\\)').astype(\"int\")\nmovies\n\n      movie_id                       title                        genres  year\n0            1            Toy Story (1995)   Animation|Children's|Comedy  1995\n1            2              Jumanji (1995)  Adventure|Children's|Fantasy  1995\n2            3     Grumpier Old Men (1995)                Comedy|Romance  1995\n3            4    Waiting to Exhale (1995)                  Comedy|Drama  1995\n...        ...                         ...                           ...   ...\n3879      3949  Requiem for a Dream (2000)                         Drama  2000\n3880      3950            Tigerland (2000)                         Drama  2000\n3881      3951     Two Family House (2000)                         Drama  2000\n3882      3952       Contender, The (2000)                Drama|Thriller  2000\n\n[3883 rows x 4 columns]\n\n\n11.1 먼저 출시년도별로 얼마나 영화가 있는지 분포를 살펴보세요.\n\n(\n    so.Plot(movies, x=\"year\")\n    .add(so.Bars(), so.Hist())\n)\n\n\n\n\n11.2 출시년도가 없는 영화가 있는가요?\n\nmovies.year.value_counts(dropna=False)\n\n1996    345\n1995    342\n1998    337\n       ... \n1922      2\n1920      2\n1921      1\nName: year, Length: 81, dtype: int64\n\n\n11.3 오래된 영화일 수록 나이든 사람들의 시청 비율이 높을지에 대해 분포를 살펴보세요.\n\nyear_movies = pd.merge(user_rating[[\"user_id\", \"gender\", \"age\", \"movie_id\", \"rating\"]], movies)\nyear_movies\n\n         user_id gender  age  movie_id  rating   \n0              1      F    1      1193       5  \\\n1              2      M   56      1193       5   \n2             12      M   25      1193       4   \n3             15      M   25      1193       4   \n...          ...    ...  ...       ...     ...   \n1000205     5675      M   35      2703       3   \n1000206     5780      M   18      2845       1   \n1000207     5851      F   18      3607       5   \n1000208     5938      M   25      2909       4   \n\n                                               title                genres   \n0             One Flew Over the Cuckoo's Nest (1975)                 Drama  \\\n1             One Flew Over the Cuckoo's Nest (1975)                 Drama   \n2             One Flew Over the Cuckoo's Nest (1975)                 Drama   \n3             One Flew Over the Cuckoo's Nest (1975)                 Drama   \n...                                              ...                   ...   \n1000205                        Broken Vessels (1998)                 Drama   \n1000206                            White Boys (1999)                 Drama   \n1000207                     One Little Indian (1973)  Comedy|Drama|Western   \n1000208  Five Wives, Three Secretaries and Me (1998)           Documentary   \n\n         year  \n0        1975  \n1        1975  \n2        1975  \n3        1975  \n...       ...  \n1000205  1998  \n1000206  1999  \n1000207  1973  \n1000208  1998  \n\n[1000209 rows x 8 columns]\n\n\n\nyear_movies = year_movies.assign(\n    age = lambda x: pd.Categorical(x.age.astype(\"string\"), categories=[\"1\", \"18\", \"25\", \"35\", \"45\", \"50\", \"56\"], ordered=True)\n)\n\n\n(\n    so.Plot(year_movies, x=\"year\", color=\"age\")\n    .add(so.Bars(), so.Hist(\"proportion\", common_norm=False, discrete=True))\n    .share(y=False)\n    .facet(\"age\", wrap=1)\n    .layout(size=(8, 12))\n)\n\n\n\n\n\n(\n    so.Plot(year_movies, x=\"year\", color=\"age\")\n    .add(so.Bars(), so.Hist(\"proportion\", common_norm=False, discrete=True))\n    .share(y=False)\n    .facet(row=\"age\", col=\"gender\")\n    .layout(size=(10, 12))\n)\n\n\n\n\n\n10년 기준으로 년대를 정했을 때, 코미디 장르의 영화 비율의 년대별 변화를 살펴봅니다.\n\n\nmovies_long[\"year\"] = movies_long[\"title\"].str.extract(r'\\((\\d{4})\\)').astype(\"int\")\n\nmovies_long_10 = movies_long.assign(\n    decade = lambda x: np.int_(np.floor(x.year / 10) * 10)\n)\nmovies_long_10\n\n      movie_id                    title      genres  year  decade\n0            1         Toy Story (1995)   Animation  1995    1990\n0            1         Toy Story (1995)  Children's  1995    1990\n0            1         Toy Story (1995)      Comedy  1995    1990\n...        ...                      ...         ...   ...     ...\n3881      3951  Two Family House (2000)       Drama  2000    2000\n3882      3952    Contender, The (2000)       Drama  2000    2000\n3882      3952    Contender, The (2000)    Thriller  2000    2000\n\n[6408 rows x 5 columns]\n\n\n\n# pd.crosstab의 비율을 이용하면,\ndecade_perc = pd.crosstab(\n    movies_long_10[\"decade\"], movies_long_10[\"genres\"], normalize=\"index\"\n).stack()\n\ndecade_perc\n\ndecade  genres   \n1910    Action      0.20\n        Adventure   0.20\n        Animation   0.00\n                    ... \n2000    Thriller    0.10\n        War         0.01\n        Western     0.00\nLength: 180, dtype: float64\n\n\n\n(\n    so.Plot(decade_perc.reset_index(name=\"perc\"), x=\"decade\", y=\"perc\", color=\"genres\")\n    .add(so.Line())\n    .facet(\"genres\", wrap=5)\n    .share(y=False)\n    .layout(size=(12, 8))\n)\n\n\n\n\n\n(\n    so.Plot(decade_perc.reset_index(name=\"perc\").query('genres == \"Comedy\"'), x=\"decade\", y=\"perc\")\n    .add(so.Line())\n)"
  },
  {
    "objectID": "contents/exercise_transform.html",
    "href": "contents/exercise_transform.html",
    "title": "Exercises",
    "section": "",
    "text": "Load Packages\n# numerical calculation & data frames\nimport numpy as np\nimport pandas as pd\n\n# visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport seaborn.objects as so\n\n# statistics\nimport statsmodels.api as sm"
  },
  {
    "objectID": "contents/exercise_transform.html#a",
    "href": "contents/exercise_transform.html#a",
    "title": "Exercises",
    "section": "A",
    "text": "A\n다음 조건을 만족하는 항공편을 필터링 해보세요. (1~6)\n\nHad an arrival delay of two or more hours\nFlew to Houston (IAH or HOU)\nDeparted in summer (July, August, and September)\nArrived more than two hours late, but didn’t leave late\nWere delayed by at least an hour, but made up over 30 minutes in flight\n출발할 때 예정시간보다 1시간 이상 지연되어 출발하였으나 빠르게 비행하여 출발 지연된 시간보다 도착 지연이 30분이상 단축된 항공편들입니다. (예를 들어, 1시간 늦게 출발했는데, 도착은 28분 지연된 항공편)\nDeparted between midnight and 6am (inclusive)\n\n\n\nFind the fastest flights.\nSort flights to find the most delayed flights. Find the flights that left earliest (예정시간보다 가장 일찍 출발한).\nWhich flights travelled the farthest? Which travelled the shortest?\n각 도착지 별로, 뉴욕에서 출항한 항공편이 1년 중 몇 일 있었는가?\n뉴욕에서 1년 중 300일 이상 출항하는 도착지들을 구하면?"
  },
  {
    "objectID": "contents/exercise_transform.html#b",
    "href": "contents/exercise_transform.html#b",
    "title": "Exercises",
    "section": "B",
    "text": "B\n\nOur definition of cancelled flights (dep_delay or arr_delay is missing) is slightly suboptimal. Why? Which is the most important column?\n\n예를 들어, 출발지연은 missing이 아니나 도착지연은 missing인 것이 있음\n\nLook at the number of cancelled flights per day. Is there a pattern? Is the proportion of cancelled flights related to the (daily) average delay?\n\n취소되는 항공편들이 많은 것과 관계 있는 것은 무엇이 있을까…\n\nWhat time of day should you fly if you want to avoid delays as much as possible?\nFor each destination, compute the total minutes of delay. For each flight, compute the proportion of the total delay for its destination.\nFind all destinations that are flown by at least two carriers. Use that information to rank the carriers.\n\n즉, 적어도 두 항공사가 출항하는 도착지들도 한정한 후,\n다양한 곳으로 출항할수록 높은 순위의 항공사라고 보고, 항공사들의 순위를 정해봄"
  },
  {
    "objectID": "contents/exercise_transform.html#c",
    "href": "contents/exercise_transform.html#c",
    "title": "Exercises",
    "section": "C",
    "text": "C\nChallenges:\n\nWhich carrier has the worst arrival delays? Challenge: can you disentangle the effects of bad airports vs. bad carriers? Why/why not?\n\n항공사(carrier)마다 취항하는 곳에 차이가 날 수 있다면, 그건 그 노선 혹은 공항의 문제이지 항공사의 문제는 아닐 수도 있음을 암시하는 것임\n\nWhich plane (tailnum) has the worst on-time record?\n\non-time을 적절히 정의한 후에 진행; 여러 방식이 있을 수 있음\n예를 들어, 늦게 도착하지 않은 항공편의 “갯수”로 보거나\n도착지연의 평균값을 기준으로 볼 수도 있음\n\nLook at each destination. Can you find flights that are suspiciously fast? (i.e. flights that represent a potential data entry error).\n\n빠르게 비행한 이유: 제트 기류? 정체가 심한 공항?…\n같은 루트를 비행하는 항공편들 안에서 특이점이라면 의심해 볼만함…\n서로 다른 루트를 비행하는 항공편들과의 비교는?\n빠르다는 것을 비교하려면 동일한 루트에서 비교해야 적절함\n다른 루트의 항공편들까지 같이 비교하려면 어떤 방식이 있겠는가?\n\nCompute the air time of a flight relative to the shortest flight to that destination. Which flights were most delayed in the air?\n\n“상대적”의 의미가 값의 차이로 볼지 비율의 차이로 볼지도 고려해 볼 것\n\n** For each plane, count the number of flights before the first delay of greater than 1 hour.\n\nnp.cumsum을 활용"
  },
  {
    "objectID": "contents/exercise_wrangle.html",
    "href": "contents/exercise_wrangle.html",
    "title": "Exercises",
    "section": "",
    "text": "Load Packages\n# numerical calculation & data frames\nimport numpy as np\nimport pandas as pd\n\n# visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport seaborn.objects as so\n\n# statistics\nimport statsmodels.api as sm\n\n\n\n\nOptions\n# pandas options\npd.set_option(\"mode.copy_on_write\", True)\npd.options.display.precision = 2\npd.options.display.float_format = '{:.2f}'.format  # pd.reset_option('display.float_format')\npd.options.display.max_rows = 7\n\n# Numpy options\nnp.set_printoptions(precision = 2, suppress=True)\n\n\n\nThe nycflight13 datasets\nCombine 섹션에서 다른 nycflight13의 4개의 relational data를 이용하세요.\n\nAdd the location of the origin and destination (i.e. the lat and lon in airports) to flights.\nIs there a relationship between the age of a plane and its delays?\nWhat weather conditions make it more likely to see a delay?\nflights 테이블에서 하루 평균 도착지연(arr_delay)가 가장 큰 10일에 해당하는 항공편을 선택\nflights 테이블의 도착지(dest)에 대한 공항정보가 airports 테이블에 없는 그러한 도착지(dest)를 구하면?\nFilter flights (항공편) in flights to only show flights with planes that have flown at least 100 flights.\nFind the 48 hours (over the course of the whole year) that have the worst (departure) delays.\n\nflights의 hour 열을 이용할 것\n\nYou might expect that there’s an implicit relationship between plane and airline, because each plane is flown by a single airline. Confirm or reject this hypothesis using the tools you’ve learned above.\n\n즉, 각 비행기는 특정 항공사에서만 운행되는가의 질문임. 2개 이상의 항공사에서 운항되는 비행기가 있는지 확인해 볼 것\n그리고, 2개 이상의 항공사에서 운항되는 비행기들만 포함하고, 그 항공사들의 full name을 함께 포함하는 테이블을 만들어 볼 것"
  },
  {
    "objectID": "contents/import.html",
    "href": "contents/import.html",
    "title": "Data Loading",
    "section": "",
    "text": "Load Packages\n# numerical calculation & data frames\nimport numpy as np\nimport pandas as pd\n\n# visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport seaborn.objects as so\n\n# statistics\nimport statsmodels.api as sm\n\n\n\n\nOptions\n# pandas options\npd.set_option(\"mode.copy_on_write\", True)\npd.options.display.precision = 2\npd.options.display.float_format = '{:.2f}'.format  # pd.reset_option('display.float_format')\npd.options.display.max_rows = 7\n\n# Numpy options\nnp.set_printoptions(precision = 2, suppress=True)"
  },
  {
    "objectID": "contents/inspection.html",
    "href": "contents/inspection.html",
    "title": "Inspecting data",
    "section": "",
    "text": "Load Packages\n# numerical calculation & data frames\nimport numpy as np\nimport pandas as pd\n\n# visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport seaborn.objects as so\nimport plotly.express as px\n\n# statistics\nimport statsmodels.api as sm"
  },
  {
    "objectID": "contents/inspection.html#useful-method",
    "href": "contents/inspection.html#useful-method",
    "title": "Inspecting data",
    "section": "Useful method",
    "text": "Useful method\n.head(), .tail(), .sample()\n.info(), .describe(),\n.value_counts(),\n.sort_values(), .nlargest(), .nsmallest()\nData: Tips\n일정기간 한 웨이터가 얻은 팁에 대한 데이터\n\n# load a dataset\ntips = sns.load_dataset(\"tips\")\ntips\n\n     total_bill  tip     sex smoker   day    time  size\n0         16.99 1.01  Female     No   Sun  Dinner     2\n1         10.34 1.66    Male     No   Sun  Dinner     3\n2         21.01 3.50    Male     No   Sun  Dinner     3\n3         23.68 3.31    Male     No   Sun  Dinner     2\n..          ...  ...     ...    ...   ...     ...   ...\n240       27.18 2.00  Female    Yes   Sat  Dinner     2\n241       22.67 2.00    Male    Yes   Sat  Dinner     2\n242       17.82 1.75    Male     No   Sat  Dinner     2\n243       18.78 3.00  Female     No  Thur  Dinner     2\n\n[244 rows x 7 columns]\n\n\n\n# DataFrame의 값들: ndarray\ntips.values # or tips.to_numpy()\n\narray([[16.99, 1.01, 'Female', ..., 'Sun', 'Dinner', 2],\n       [10.34, 1.66, 'Male', ..., 'Sun', 'Dinner', 3],\n       [21.01, 3.5, 'Male', ..., 'Sun', 'Dinner', 3],\n       ...,\n       [22.67, 2.0, 'Male', ..., 'Sat', 'Dinner', 2],\n       [17.82, 1.75, 'Male', ..., 'Sat', 'Dinner', 2],\n       [18.78, 3.0, 'Female', ..., 'Thur', 'Dinner', 2]], dtype=object)\n\n\n\ntips.head() # 처음 N개 나열\n\n   total_bill  tip     sex smoker  day    time  size\n0       16.99 1.01  Female     No  Sun  Dinner     2\n1       10.34 1.66    Male     No  Sun  Dinner     3\n2       21.01 3.50    Male     No  Sun  Dinner     3\n3       23.68 3.31    Male     No  Sun  Dinner     2\n4       24.59 3.61  Female     No  Sun  Dinner     4\n\n\n\ntips.info()\n\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 244 entries, 0 to 243\nData columns (total 7 columns):\n #   Column      Non-Null Count  Dtype   \n---  ------      --------------  -----   \n 0   total_bill  244 non-null    float64 \n 1   tip         244 non-null    float64 \n 2   sex         244 non-null    category\n 3   smoker      244 non-null    category\n 4   day         244 non-null    category\n 5   time        244 non-null    category\n 6   size        244 non-null    int64   \ndtypes: category(4), float64(2), int64(1)\nmemory usage: 7.4 KB\n\n\n\ntips.describe() # numerical type만 나열\n\n\n\n       total_bill    tip   size\ncount      244.00 244.00 244.00\nmean        19.79   3.00   2.57\nstd          8.90   1.38   0.95\nmin          3.07   1.00   1.00\n25%         13.35   2.00   2.00\n50%         17.80   2.90   2.00\n75%         24.13   3.56   3.00\nmax         50.81  10.00   6.00\n\n\n\n\n\ntips.describe(include=\"all\") # all types 나열\n\n        total_bill    tip   sex smoker  day    time   size\ncount       244.00 244.00   244    244  244     244 244.00\nunique         NaN    NaN     2      2    4       2    NaN\ntop            NaN    NaN  Male     No  Sat  Dinner    NaN\nfreq           NaN    NaN   157    151   87     176    NaN\n...            ...    ...   ...    ...  ...     ...    ...\n25%          13.35   2.00   NaN    NaN  NaN     NaN   2.00\n50%          17.80   2.90   NaN    NaN  NaN     NaN   2.00\n75%          24.13   3.56   NaN    NaN  NaN     NaN   3.00\nmax          50.81  10.00   NaN    NaN  NaN     NaN   6.00\n\n[11 rows x 7 columns]\n\n\n\ntips.describe(include=\"category\")\n\n\n\n         sex smoker  day    time\ncount    244    244  244     244\nunique     2      2    4       2\ntop     Male     No  Sat  Dinner\nfreq     157    151   87     176\n\n\n\n\n\ns1 = tips[\"day\"].value_counts() # \"day\" 칼럼을 선택 후 각 카테고리별 counts\ns2 = tips[\"day\"].value_counts(sort=False) # default: sort is true\ns3 = tips[\"day\"].value_counts(normalize=True) # 카테고리별 비율\ns4 = tips[[\"sex\", \"smoker\"]].value_counts() # \"sex\", \"smoker\" 칼럼을 선택 후 유니크한 카테고리별 counts\n\n\n\n\n\n\nSat     87\nSun     76\nThur    62\nFri     19\nName: day, dtype: int64\n(a) s1\n\n\n\n\nThur    62\nFri     19\nSat     87\nSun     76\nName: day, dtype: int64\n(b) s2\n\n\n\n\n\n\nSat    0.36\nSun    0.31\nThur   0.25\nFri    0.08\nName: day, dtype: float64\n(c) s3\n\n\n\n\nsex     smoker\nMale    No        97\n        Yes       60\nFemale  No        54\n        Yes       33\ndtype: int64\n(d) s4\n\n\n\nFigure 1: value_count()의 arguments\n\n\n\n\n\n\n\n\nTip\n\n\n\n다음 두 가지 형태도 가능하며, 차이에 유의\ntips[[\"day\"]].value_counts()  # double bracket\ntips.value_counts(\"day\")  # argument\ntips.value_counts([\"day\", \"time\"])\n\n\n\nData: palmerpenguins\n\n# load a dataset\npenguins = sns.load_dataset(\"penguins\")\npenguins\n\n    species     island  bill_length_mm  bill_depth_mm  flipper_length_mm  \\\n0    Adelie  Torgersen           39.10          18.70             181.00   \n1    Adelie  Torgersen           39.50          17.40             186.00   \n2    Adelie  Torgersen           40.30          18.00             195.00   \n3    Adelie  Torgersen             NaN            NaN                NaN   \n..      ...        ...             ...            ...                ...   \n340  Gentoo     Biscoe           46.80          14.30             215.00   \n341  Gentoo     Biscoe           50.40          15.70             222.00   \n342  Gentoo     Biscoe           45.20          14.80             212.00   \n343  Gentoo     Biscoe           49.90          16.10             213.00   \n\n     body_mass_g     sex  \n0        3750.00    Male  \n1        3800.00  Female  \n2        3250.00  Female  \n3            NaN     NaN  \n..           ...     ...  \n340      4850.00  Female  \n341      5750.00    Male  \n342      5200.00  Female  \n343      5400.00    Male  \n\n[344 rows x 7 columns]\n\n\n\npenguins.info()\n\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 344 entries, 0 to 343\nData columns (total 7 columns):\n #   Column             Non-Null Count  Dtype  \n---  ------             --------------  -----  \n 0   species            344 non-null    object \n 1   island             344 non-null    object \n 2   bill_length_mm     342 non-null    float64\n 3   bill_depth_mm      342 non-null    float64\n 4   flipper_length_mm  342 non-null    float64\n 5   body_mass_g        342 non-null    float64\n 6   sex                333 non-null    object \ndtypes: float64(4), object(3)\nmemory usage: 18.9+ KB\n\n\n\npenguins.describe(include=\"object\")\n\n\n\n       species  island   sex\ncount      344     344   333\nunique       3       3     2\ntop     Adelie  Biscoe  Male\nfreq       152     168   168\n\n\n\n\n\npenguins[[\"island\", \"species\"]].value_counts()\n\nisland     species  \nBiscoe     Gentoo       124\nDream      Chinstrap     68\n           Adelie        56\nTorgersen  Adelie        52\nBiscoe     Adelie        44\ndtype: int64\n\n\n\npenguins[[\"sex\", \"species\"]].value_counts(dropna=False) # NA은 기본적으로 생략\n\nsex     species  \nFemale  Adelie       73\nMale    Adelie       73\n        Gentoo       61\nFemale  Gentoo       58\n        Chinstrap    34\nMale    Chinstrap    34\nNaN     Adelie        6\n        Gentoo        5\ndtype: int64\n\n\n\npenguins.isna().sum() # NA의 개수\n\nspecies               0\nisland                0\nbill_length_mm        2\nbill_depth_mm         2\nflipper_length_mm     2\nbody_mass_g           2\nsex                  11\ndtype: int64\n\n\n\ntips.sort_values(\"tip\", ascending=False)\n\n     total_bill   tip     sex smoker  day    time  size\n170       50.81 10.00    Male    Yes  Sat  Dinner     3\n212       48.33  9.00    Male     No  Sat  Dinner     4\n23        39.42  7.58    Male     No  Sat  Dinner     4\n59        48.27  6.73    Male     No  Sat  Dinner     4\n..          ...   ...     ...    ...  ...     ...   ...\n236       12.60  1.00    Male    Yes  Sat  Dinner     2\n111        7.25  1.00  Female     No  Sat  Dinner     1\n67         3.07  1.00  Female    Yes  Sat  Dinner     1\n92         5.75  1.00  Female    Yes  Fri  Dinner     2\n\n[244 rows x 7 columns]\n\n\n\ntips.sort_values([\"size\", \"tip\"], ascending=[False, True])\n\n     total_bill  tip     sex smoker   day    time  size\n125       29.80 4.20  Female     No  Thur   Lunch     6\n143       27.05 5.00  Female     No  Thur   Lunch     6\n156       48.17 5.00    Male     No   Sun  Dinner     6\n141       34.30 6.70    Male     No  Thur   Lunch     6\n..          ...  ...     ...    ...   ...     ...   ...\n67         3.07 1.00  Female    Yes   Sat  Dinner     1\n111        7.25 1.00  Female     No   Sat  Dinner     1\n82        10.07 1.83  Female     No  Thur   Lunch     1\n222        8.58 1.92    Male    Yes   Fri   Lunch     1\n\n[244 rows x 7 columns]\n\n\n\ntips.nlargest(3, \"tip\")  # keep=\"first\", \"last\", \"all\"\n\n     total_bill   tip   sex smoker  day    time  size\n170       50.81 10.00  Male    Yes  Sat  Dinner     3\n212       48.33  9.00  Male     No  Sat  Dinner     4\n23        39.42  7.58  Male     No  Sat  Dinner     4"
  },
  {
    "objectID": "contents/ml.html",
    "href": "contents/ml.html",
    "title": "Machine Learning",
    "section": "",
    "text": "Load packages\n# numerical calculation & data frames\nimport numpy as np\nimport pandas as pd\n\n# visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport seaborn.objects as so\n\n# statistics\nimport statsmodels.api as sm\n\n\n\n\nOptions\n# pandas options\npd.options.display.precision = 2\npd.options.display.float_format = '{:.2f}'.format  # pd.reset_option('display.float_format')\n# pd.options.display.max_rows = 7\n\n# Numpy options\nnp.set_printoptions(precision = 2, suppress=True)\n\n\n\nfrom pathlib import Path\nimport pandas as pd\nimport tarfile\nimport urllib.request\n\ndef load_housing_data():\n    tarball_path = Path(\"data/housing.tgz\")\n    if not tarball_path.is_file():\n        url = \"https://github.com/ageron/data/raw/main/housing.tgz\"\n        urllib.request.urlretrieve(url, tarball_path)\n        with tarfile.open(tarball_path) as housing_tarball:\n            housing_tarball.extractall(path=\"data\")\n    return pd.read_csv(Path(\"data/housing/housing.csv\"))\n\nhousing = load_housing_data()\n\n\nhousing = pd.read_csv(\"https://raw.githubusercontent.com/ageron/data/main/housing/housing.csv\")\n\n\nhousing\n\n       longitude  latitude  housing_median_age  total_rooms  total_bedrooms  \\\n0        -122.23     37.88               41.00       880.00          129.00   \n1        -122.22     37.86               21.00      7099.00         1106.00   \n2        -122.24     37.85               52.00      1467.00          190.00   \n3        -122.25     37.85               52.00      1274.00          235.00   \n4        -122.25     37.85               52.00      1627.00          280.00   \n...          ...       ...                 ...          ...             ...   \n20635    -121.09     39.48               25.00      1665.00          374.00   \n20636    -121.21     39.49               18.00       697.00          150.00   \n20637    -121.22     39.43               17.00      2254.00          485.00   \n20638    -121.32     39.43               18.00      1860.00          409.00   \n20639    -121.24     39.37               16.00      2785.00          616.00   \n\n       population  households  median_income  median_house_value  \\\n0          322.00      126.00           8.33           452600.00   \n1         2401.00     1138.00           8.30           358500.00   \n2          496.00      177.00           7.26           352100.00   \n3          558.00      219.00           5.64           341300.00   \n4          565.00      259.00           3.85           342200.00   \n...           ...         ...            ...                 ...   \n20635      845.00      330.00           1.56            78100.00   \n20636      356.00      114.00           2.56            77100.00   \n20637     1007.00      433.00           1.70            92300.00   \n20638      741.00      349.00           1.87            84700.00   \n20639     1387.00      530.00           2.39            89400.00   \n\n      ocean_proximity  \n0            NEAR BAY  \n1            NEAR BAY  \n2            NEAR BAY  \n3            NEAR BAY  \n4            NEAR BAY  \n...               ...  \n20635          INLAND  \n20636          INLAND  \n20637          INLAND  \n20638          INLAND  \n20639          INLAND  \n\n[20640 rows x 10 columns]\n\n\n\nhousing = housing.assign(\n    median_house_value = lambda x: x[\"median_house_value\"] / 1000,\n    bedrooms_ratio = lambda x: x.total_bedrooms / x.total_rooms,\n    rooms_per_house = lambda x: x.total_rooms / x.households,\n    people_per_house = lambda x: x.population / x.households,\n).query(\n    'ocean_proximity != \"ISLAND\" & median_house_value < 500 & housing_median_age < 50 & median_income < 10')\n\n\nhousing.corr()\n\n/var/folders/mp/vcywncl97ml2q4c_5k2r573m0000gn/T/ipykernel_33353/1598269145.py:1: FutureWarning: The default value of numeric_only in DataFrame.corr is deprecated. In a future version, it will default to False. Select only valid columns or specify the value of numeric_only to silence this warning.\n  housing.corr()\n\n\n                    longitude  latitude  housing_median_age  total_rooms  \\\nlongitude                1.00     -0.92               -0.03         0.03   \nlatitude                -0.92      1.00               -0.06        -0.03   \nhousing_median_age      -0.03     -0.06                1.00        -0.38   \ntotal_rooms              0.03     -0.03               -0.38         1.00   \ntotal_bedrooms           0.06     -0.06               -0.33         0.94   \npopulation               0.09     -0.11               -0.28         0.86   \nhouseholds               0.05     -0.07               -0.31         0.92   \nmedian_income           -0.02     -0.07               -0.19         0.23   \nmedian_house_value      -0.03     -0.17                0.02         0.15   \nbedrooms_ratio           0.12     -0.14                0.14        -0.19   \nrooms_per_house         -0.04      0.13               -0.18         0.14   \npeople_per_house         0.02     -0.01                0.02        -0.03   \n\n                    total_bedrooms  population  households  median_income  \\\nlongitude                     0.06        0.09        0.05          -0.02   \nlatitude                     -0.06       -0.11       -0.07          -0.07   \nhousing_median_age           -0.33       -0.28       -0.31          -0.19   \ntotal_rooms                   0.94        0.86        0.92           0.23   \ntotal_bedrooms                1.00        0.88        0.98           0.03   \npopulation                    0.88        1.00        0.91           0.05   \nhouseholds                    0.98        0.91        1.00           0.05   \nmedian_income                 0.03        0.05        0.05           1.00   \nmedian_house_value            0.08        0.03        0.10           0.66   \nbedrooms_ratio                0.08        0.03        0.06          -0.64   \nrooms_per_house               0.01       -0.07       -0.08           0.31   \npeople_per_house             -0.04        0.06       -0.03          -0.00   \n\n                    median_house_value  bedrooms_ratio  rooms_per_house  \\\nlongitude                        -0.03            0.12            -0.04   \nlatitude                         -0.17           -0.14             0.13   \nhousing_median_age                0.02            0.14            -0.18   \ntotal_rooms                       0.15           -0.19             0.14   \ntotal_bedrooms                    0.08            0.08             0.01   \npopulation                        0.03            0.03            -0.07   \nhouseholds                        0.10            0.06            -0.08   \nmedian_income                     0.66           -0.64             0.31   \nmedian_house_value                1.00           -0.23             0.11   \nbedrooms_ratio                   -0.23            1.00            -0.41   \nrooms_per_house                   0.11           -0.41             1.00   \npeople_per_house                 -0.03           -0.00            -0.00   \n\n                    people_per_house  \nlongitude                       0.02  \nlatitude                       -0.01  \nhousing_median_age              0.02  \ntotal_rooms                    -0.03  \ntotal_bedrooms                 -0.04  \npopulation                      0.06  \nhouseholds                     -0.03  \nmedian_income                  -0.00  \nmedian_house_value             -0.03  \nbedrooms_ratio                 -0.00  \nrooms_per_house                -0.00  \npeople_per_house                1.00  \n\n\n\n(\n    so.Plot(housing, x='longitude', y='latitude', pointsize=\"population\", color=\"median_house_value\")\n    .add(so.Dot(alpha=.5))\n    .scale(pointsize=(5, 20))\n)\n\n\n\n\n\ncor = housing.corr()\ncor[\"median_house_value\"].sort_values()\n\n/var/folders/mp/vcywncl97ml2q4c_5k2r573m0000gn/T/ipykernel_33353/1491143236.py:1: FutureWarning: The default value of numeric_only in DataFrame.corr is deprecated. In a future version, it will default to False. Select only valid columns or specify the value of numeric_only to silence this warning.\n  cor = housing.corr()\n\n\nbedrooms_ratio       -0.23\nlatitude             -0.17\npeople_per_house     -0.03\nlongitude            -0.03\nhousing_median_age    0.02\npopulation            0.03\ntotal_bedrooms        0.08\nhouseholds            0.10\nrooms_per_house       0.11\ntotal_rooms           0.15\nmedian_income         0.66\nmedian_house_value    1.00\nName: median_house_value, dtype: float64\n\n\n\n(\n    so.Plot(housing, x='median_income', y='median_house_value')\n    .add(so.Dots(color=\".6\", alpha=.1))\n    .add(so.Line(), so.PolyFit(5))\n    .facet(\"ocean_proximity\")\n    .layout(size=(12, 6))\n)\n\n\n\n\n\n(\n    so.Plot(housing.query('population < 5000'), x='population', y='median_house_value')\n    .add(so.Dots(color=\".6\", alpha=.1))\n    .add(so.Line(), so.PolyFit(5))\n)\n\n\n\n\n\n(\n    so.Plot(housing.query('households < 2000'), x='households', y='median_house_value')\n    .add(so.Dots(color=\".6\", alpha=.1))\n    .add(so.Line(), so.PolyFit(5))\n    .facet('ocean_proximity')\n)\n\n\n\n\n\n(\n    so.Plot(housing, x='total_rooms', y='median_house_value')\n    .add(so.Dots(color=\".6\", alpha=.1))\n    .add(so.Line(), so.PolyFit(5))\n)\n\n\n\n\n\n(\n    so.Plot(housing.query('total_rooms < 5000'), x='total_rooms', y='median_house_value')\n    .add(so.Dots(color=\".6\", alpha=.1))\n    .add(so.Line(), so.PolyFit(5))\n    .limit(y=(100, 300))\n    .facet('ocean_proximity')\n)\n\n\n\n\n\n(\n    so.Plot(housing.query('total_bedrooms < 1500'), x='total_bedrooms', y='median_house_value')\n    .add(so.Dots(color=\".6\", alpha=.1))\n    .add(so.Line(), so.PolyFit(5))\n    .limit(y=(100, 300))\n    .facet('ocean_proximity')\n)\n\n\n\n\n\n(\n    so.Plot(housing.query('bedrooms_ratio < 0.4'), x='bedrooms_ratio', y='median_house_value')\n    .add(so.Dots(color=\".6\", alpha=.1))\n    .add(so.Line(), so.PolyFit(5))\n    .facet('ocean_proximity')\n)\n\n\n\n\n\n(\n    so.Plot(housing.query('rooms_per_house < 10'), x='rooms_per_house', y='median_house_value')\n    .add(so.Dots(color=\".6\", alpha=.1))\n    .add(so.Line(), so.PolyFit(5))\n    .facet(\"ocean_proximity\")\n)\n\n\n\n\n\n(\n    so.Plot(housing.query('people_per_house < 6'), x='people_per_house', y='median_house_value')\n    .add(so.Dots(color=\".6\", alpha=.1))\n    .add(so.Line(), so.PolyFit(3))\n    .facet(\"ocean_proximity\")\n    .layout(size=(12, 6))\n)\n\n\n\n\n\n(\n    so.Plot(housing, x='housing_median_age', y='median_house_value')\n    .add(so.Dots(color=\".6\", alpha=.1))\n    .add(so.Line(), so.PolyFit(5))\n    .facet(\"ocean_proximity\")\n    .layout(size=(12, 6))\n)"
  },
  {
    "objectID": "contents/modelbasic.html",
    "href": "contents/modelbasic.html",
    "title": "Model basics",
    "section": "",
    "text": "The goal of a model is to provide a simple low-dimensional summary of a dataset. Ideally, the model will capture true “signals” (i.e. patterns generated by the phenomenon of interest), and ignore “noise” (i.e. random variation that you’re not interested in).\n* physics: models for the physical world\n\n이상적으로, 모형(model)이 현상으로부터 노이즈가 제거된 진정한 신호를 잡아내 주기를 기대.\n\n\n\n\n\n\n\n\n\n\n예를 들어, 캐럿과 가격의 진정한 관계를 모델로 표현\nlinear model: y = ax + b\nlog(price) ~ a * log(carat) + b\n나머지 residuals은 노이즈?\n이 책에서는\n\npredictive models(예측 모형)만을 다룸 (supervised learning)\ndata discovery models은 machine/statistical learning에서… (unsupervised learning)\n\n예측이 아닌, 데이터에 내재하는 흥미로운 관계들을 발견. ex) clustering analysis\n\n\n\n\nMachine learning arose as a subfield of Artificial Intelligence.\nStatistical learning arose as a subfield of Statistics.\nThere is much overlap — both fields focus on supervised and unsupervised problems:\n\nMachine learning has a greater emphasis on large scale applications and prediction accuracy.\nStatistical learning emphasizes models and their interpretability, and precision and uncertainty.\n\nBut the distinction has become more and more blurred, and there is a great deal of “cross-fertilization”.\nMachine learning has the upper hand in Marketing!\n            Trevor Hastie and Robert Tibshirani, An Introduction to Statistical Learning\n\n\n\n이 책에서 모델은 탐색적 데이터 분석(EDA)의 한 도구로 사용하나 전통적으로 모델은 가설을 검정하거나 모집단에 대한 추론을 위해 사용됨\n\nEach observation can either be used for exploration or confirmation, not both.\nYou can use an observation as many times as you like for exploration, but you can only use it once for confirmation. As soon as you use an observation twice, you’ve switched from confirmation to exploration.\n\nyou should never sell an exploratory analysis as a confirmatory analysis because it is fundamentally misleading.\n통계적 검정에 관심이 있다면, 분석 전에 다음과 같이 데이터를 나누는 것을 고려\n\n60% of your data goes into a training (or exploration) set. You’re allowed to do anything you like with this data: visualise it and fit tons of models to it.\n20% goes into a query set. You can use this data to compare models or visualisations by hand, but you’re not allowed to use it as part of an automated process.\n20% is held back for a test set. You can only use this data ONCE, to test your final model. (최종 모형의 테스트)"
  },
  {
    "objectID": "contents/modelbasic.html#a-simple-model",
    "href": "contents/modelbasic.html#a-simple-model",
    "title": "Model basics",
    "section": "A simple model",
    "text": "A simple model\n\n\n     x     y\n0    1  4.20\n1    1  7.51\n2    1  2.13\n..  ..   ...\n27  10 24.97\n28  10 23.35\n29  10 21.98\n\n[30 rows x 2 columns]\n\n\n\n\n\n\n\n\n패턴: 강한 선형 관계\n선형 모델 family인 \\(y = a_2 x + a_1\\)을 세움\n무수히 많은 \\(a_1, a_2\\)의 값들 중 위 데이터에 가장 가까운 값을 찾음\n\n그 예로, 임의로 250개의 선형 모델을 그려봄\n\n\n\n\n\n\n\n이 선형모델 중 데이터에 가장 “가까운” 모델을 찾고자 하는데, 데이터와 모델과의 거리를 정의해야 함.\n\\(d =|~data - model~|\\)\n예) 모델과 데이터의 수직 거리의 총체 (residuals)\n\nModel 1.1: \\(y = 1.5x+7\\)의 경우, 이 모델이 예측하는 값들\n\n\narray([ 8.5,  8.5,  8.5, 10. , 10. , 10. , 11.5, 11.5, 11.5, 13. , 13. ,\n       13. , 14.5, 14.5, 14.5, 16. , 16. , 16. , 17.5, 17.5, 17.5, 19. ,\n       19. , 19. , 20.5, 20.5, 20.5, 22. , 22. , 22. ])\n\n\n\n\n\n\n\n\nModel evaluation: RMSE, MAE\n\n\n\nThe prediction accuracy of the models\n\nRoot-mean-squared deviation/error: \\(RMSE = \\displaystyle\\sqrt{\\frac{1}{n} \\sum_{i=1}^{n}{(y_i -\\hat y_i)^2}}\\)\nMean absolute error: \\(MAE = \\displaystyle\\frac{1}{n} \\sum_{i=1}^{n}{|~y_i -\\hat y_i~|}\\) : 이상치에 덜 민감함\n\n\n\nModel 1.1의 RMSE:\n\n\n2.67\n\n\n즉, 데이터셋 sim1과 model 1.1 과의 거리 \\(d=|~sim1 -model1~| = 2.67\\)\n위의 250개의 모델에 대해 각각 거리를 구하면\n\n\n       a1    a2  dist\n0   21.79 -2.92 17.42\n1   -2.83 -0.57 22.83\n2   -6.39  2.16 10.26\n..    ...   ...   ...\n247  0.51  4.19 10.38\n248 27.94 -0.84 11.59\n249 27.93  2.45 25.99\n\n[250 rows x 3 columns]\n\n\n이 중 제일 좋은 모델(dist가 최소) 10개의 모델을 그리면,\n\n\n\n\n\n250개의 모델 중 10개의 모델을 다음과 같은 \\((a1, a2)\\) 평면으로 살펴보면,\n즉, model space라고 볼 수 있음\n오렌지 색은 위에서 구한 10 best models\n\n\n\n\n\n점차 촘촘한 간격으로 grid search를 하면서 거리를 최소로 하는 모델을 찾아가는 것이고, 실제로는 Newton-Raphson search를 통해 최소값을 구하는 알고리즘을 통해 구할 수 있음.\n즉, 거리를 최소로 하는 a1, a2를 찾으면,\n\nfrom scipy.optimize import minimize\nminimize(measure_distance, [0, 0], args=(sim1)).x\n\narray([4.22, 2.05])"
  },
  {
    "objectID": "contents/modelbasic.html#summary",
    "href": "contents/modelbasic.html#summary",
    "title": "Model basics",
    "section": "Summary",
    "text": "Summary\nsim1을 이용한 위의 예는 모든 모델에 적용될 수 있음\n\n즉, \\(y = f(x1, x2,...)\\) 형태의 a family of models을 구성한 후\n모델과 데이터와의 거리 \\(d =|~data - model~|\\)를 정의한 후\n거리 \\(d\\)가 최소가 되는 파라미터를 구하면, a family of models 중 best model을 만들 수 있음\n새로운 a family of models을 구성해서 위를 반복하면, 여러 다른 모델들을 비교할 수 있음\n\n\n\nIntercept   4.22\nx           2.05\ndtype: float64\n\n\n앞서 다룬 선형 모형, linear (regression) model은 일반적인 \\(\\hat{y} = a_0 + a_1 x_1 + a_2 x_2 + ~... ~ + a_n x_n\\) 형태를 띄고,\n\n앞의 예는 \\(n=1\\) 에 해당하며, \\(\\hat{y} =a_0 +a_1x_1\\)에 대해서 다음과 같이 편리하게 적용할 수있음\nfrom statsmodels.formula.api import ols\n\nsim1_mod <- ols(\"y ~ x\", data = sim1)\n\nsim1_mod.fit().params # 모델의 parameter 즉, coefficients를 내줌\n# Intercept   4.22\n# x           2.05  # 위에서 구한 파라미터값과 동일함\n(참고) Linear models의 경우 위에서 처럼 optimization을 이용하지 않고 방정식의 해를 구하듯 exact form으로 최소값을 구함\n\\(n=2\\) 인 경우, 즉 두 변수 x1, x2로 y를 예측하는 경우,\nols(\"y ~ x1 + x2\", data = df)\n모형 세울 때, Wilkinson-Rodgers notation을 사용하는 것이 매우 효과적인데,\n(initially described in Symbolic Description of Factorial Models for Analysis of Variance by G. N. Wilkinson and C. E. Rogers, 1973)\n\nformula: y ~ x1 + x2는 모형 \\(\\hat{y} = a_0 +a_1x_1 + a_2x_2\\) 을 의미\nstatsmodels는 formula notation으로 모형을 세우는 것을 지원함: link\nsklearn은 formula notation을 직접 지원하지 않지만, patsy 패키지를 이용하여 design matrix를 직접 얻어 적용할 수 있음: patsy in scikit-learn 또는 PatsyTransformer\n\n예를 들어,\n\n\nhouses = sm.datasets.get_rdataset(\"SaratogaHouses\", \"mosaicData\").data\n\n# statsmodels\nfrom statsmodels.formula.api import ols\n\nols(\"price ~ livingArea + bedrooms\", data=houses).fit().params\n\nIntercept     36667.90\nlivingArea      125.40\nbedrooms     -14196.77\ndtype: float64\n\n\n\n# patsy\nfrom patsy import dmatrices # design matrix\n\nformula = \"price ~ livingArea + bedrooms\"\ny, X = dmatrices(formula, data=houses, return_type=\"dataframe\")\n\nprint(y); print(X)\n\n\n\n\n\n\n\n         price\n0    132500.00\n1    181115.00\n2    109000.00\n...        ...\n1725 194900.00\n1726 125000.00\n1727 111300.00\n\n[1728 rows x 1 columns]\n\n\n      livingArea  bedrooms\n0         906.00      2.00\n1        1953.00      3.00\n2        1944.00      4.00\n...          ...       ...\n1725     1099.00      2.00\n1726     1225.00      3.00\n1727     1959.00      3.00\n\n[1728 rows x 2 columns]\n\n\n\n\n# scikit-learn\nfrom sklearn.linear_model import LinearRegression\n\nformula = \"price ~ livingArea + bedrooms - 1\"\ny, X = dmatrices(formula, data=houses, return_type=\"dataframe\")\n\nmod = LinearRegression().fit(X, y)\n\nprint(mod.coef_); print(mod.intercept_)\n\n\n\n\narray([[   125.4 , -14196.77]])\n\n\narray([36667.9])"
  },
  {
    "objectID": "contents/modelbasic.html#predictions-the-pattern-that-the-model-has-captured",
    "href": "contents/modelbasic.html#predictions-the-pattern-that-the-model-has-captured",
    "title": "Model basics",
    "section": "Predictions: the pattern that the model has captured",
    "text": "Predictions: the pattern that the model has captured\n우선, 예측 변수들의 데이터 값을 커버하는 grid를 구성\n\nsim1\n\n     x     y\n0    1  4.20\n1    1  7.51\n2    1  2.13\n..  ..   ...\n27  10 24.97\n28  10 23.35\n29  10 21.98\n\n[30 rows x 2 columns]\n\n\n\n# create a grid for the range of x sim1\ngrid = pd.DataFrame(dict(x=np.linspace(sim1.x.min(), sim1.x.max(), 10)))\n\n모델에 grid를 입력하여 prediction값을 추가\n\n# a model for sim1\nsim1_mod = ols(\"y ~ x\", data=sim1).fit()\n\ngrid[\"pred\"] = sim1_mod.predict(grid) # column 이름이 매치되어야 함\ngrid\n\n       x  pred\n0   1.00  6.27\n1   2.00  8.32\n2   3.00 10.38\n..   ...   ...\n7   8.00 20.63\n8   9.00 22.68\n9  10.00 24.74\n\n[10 rows x 2 columns]\n\n\n\n# 또는\nsim1[\"fitted\"] = sim1_mod.fittedvalues\nsim1[\"fitted2\"] = sim1_mod.predict(sim1.x)\n\nsim1\n\n     x     y  fitted  fitted2\n0    1  4.20    6.27     6.27\n1    1  7.51    6.27     6.27\n2    1  2.13    6.27     6.27\n..  ..   ...     ...      ...\n27  10 24.97   24.74    24.74\n28  10 23.35   24.74    24.74\n29  10 21.98   24.74    24.74\n\n[30 rows x 4 columns]\n\n\nprediction을 시각화\n\n(\n    so.Plot(sim1, x='x', y='y')\n    .add(so.Dot(color=\".6\"))\n    .add(so.Line(), x=grid.x, y=grid.pred) # prediction!\n)"
  },
  {
    "objectID": "contents/modelbasic.html#residuals-what-the-model-has-missed.",
    "href": "contents/modelbasic.html#residuals-what-the-model-has-missed.",
    "title": "Model basics",
    "section": "Residuals: what the model has missed.",
    "text": "Residuals: what the model has missed.\n\\(e = Y - \\hat{Y}\\) : 관측값 - 예측값\n\nsim1[\"resid\"] = sim1_mod.resid  # Y - Y_hat\n\n\nsim1\n\n     x     y  fitted  fitted2  resid\n0    1  4.20    6.27     6.27  -2.07\n1    1  7.51    6.27     6.27   1.24\n2    1  2.13    6.27     6.27  -4.15\n..  ..   ...     ...      ...    ...\n27  10 24.97   24.74    24.74   0.23\n28  10 23.35   24.74    24.74  -1.39\n29  10 21.98   24.74    24.74  -2.76\n\n[30 rows x 5 columns]\n\n\n우선, residuals의 분포를 시각화해서 살펴보면,\n\n(\n    so.Plot(sim1, x='resid')\n    .add(so.Line(), so.Hist(binwidth=.4))\n)\n\n\n\n\n예측 변수와 residuals의 관계를 시각화해서 보면,\n\n(\n    so.Plot(sim1, x='x', y='resid')\n    .add(so.Dot())\n    .add(so.Line(), so.PolyFit(5))\n)\n\n\n\n\n위의 residuals은 특별한 패턴을 보이지 않아야 모델이 데이터의 패턴을 잘 잡아낸 것으로 판단할 수 있음.\n아래는 원래 데이터와 일차 선형 모형에 대한 예측값의 관계를 시각화한 것\n\n\n\n\n\nResiduals에 패턴이 보이는 경우"
  },
  {
    "objectID": "contents/modelbasic.html#categorical-variables",
    "href": "contents/modelbasic.html#categorical-variables",
    "title": "Model basics",
    "section": "Categorical variables",
    "text": "Categorical variables\n카테고리 변수가 predictor인 경우 복잡해짐\n\nformula y ~ sex의 경우, \\(y=a_0 +a_1sex\\) 로 변환될 수 없음 (성별을 연산할 수 없음)\n실제로, formula는 \\(sex[T.male]\\) 라는 indicator/dummy variable을 새로 만들어 membership을 나타내 줌:\ndummy-coding 또는 one-hot encoding 이라고 부름.\n\n\\(y=a_0 +a_1sex[T.male]\\)   (남성일 때, \\(sex[T.male]=1\\), 그렇지 않은 경우 0)\n\n\n\ndf = pd.DataFrame({\"sex\": [\"male\", \"female\", \"male\"], \"response\": [10, 21, 13]})\ndf\n\n      sex  response\n0    male        10\n1  female        21\n2    male        13\n\n\n\ny, X = dmatrices(\"response ~ sex\", data=df, return_type=\"dataframe\")\nX\n\n   Intercept  sex[T.male]\n0       1.00         1.00\n1       1.00         0.00\n2       1.00         1.00\n\n\n\n\n세 개의 범주인 경우: 가령, 아래와 같이 3개의 범주를 가졌다면, 두 개의 변수 sex[T.male], sex[T.neutral]가 생성\n일반적으로 n개의 범주를 가진 변수인 경우 n-1개의 변수가 생성\n\n\ndf = pd.DataFrame({\"sex\": [\"male\", \"female\", \"male\", \"neutral\"], \"response\": [10, 21, 13, 5]})\ndf\n\n       sex  response\n0     male        10\n1   female        21\n2     male        13\n3  neutral         5\n\n\n\ny, X = dmatrices(\"response ~ sex\", data=df, return_type=\"dataframe\")\nX\n\n   Intercept  sex[T.male]  sex[T.neutral]\n0       1.00         1.00            0.00\n1       1.00         0.00            0.00\n2       1.00         1.00            0.00\n3       1.00         0.00            1.00\n\n\nFormula는 편리하게 범주형 변수를 처리해 주기 때문에 범주형 변수의 복잡한 처리과정을 걱정할 필요가 없음\n\npd.get_dummies(df[\"sex\"], drop_first=True, prefix=\"sex\")\n\n   sex_male  sex_neutral\n0      True        False\n1     False        False\n2      True        False\n3     False         True\n\n\n\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn import set_config\n\n\n# one-hot encoding for sex in df\nenc = OneHotEncoder(sparse_output=False, drop=\"first\")\nenc.fit_transform(df[[\"sex\"]])\n\narray([[1., 0.],\n       [0., 0.],\n       [1., 0.],\n       [0., 1.]])\n\n\n\nenc.get_feature_names_out()\n\narray(['sex_male', 'sex_neutral'], dtype=object)\n\n\n\nsim2 = pd.read_csv(\"data/sim2.csv\")\nsim2\n\n    x    y\n0   a 1.94\n1   a 1.18\n2   a 1.24\n.. ..  ...\n37  d 2.13\n38  d 2.49\n39  d 0.30\n\n[40 rows x 2 columns]"
  },
  {
    "objectID": "contents/modelling1.html",
    "href": "contents/modelling1.html",
    "title": "Model building I",
    "section": "",
    "text": "Load Packages\n# numerical calculation & data frames\nimport numpy as np\nimport pandas as pd\n\n# visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport seaborn.objects as so\nimport sbcustom as sbc\n\n# statistics\nimport statsmodels.api as sm"
  },
  {
    "objectID": "contents/modelling1.html#price-and-carat",
    "href": "contents/modelling1.html#price-and-carat",
    "title": "Model building I",
    "section": "Price and carat",
    "text": "Price and carat\n다이아몬드의 퀄리티(cut, color, clarity)가 좋을수록 가벼워짐\n\nprice = (\n    so.Plot(diamonds, x='carat', y='price')\n    .add(so.Dots(alpha=.1))\n)\ncut = sbc.rangeplot(diamonds, x=\"cut\", y=\"carat\")\ncolor = sbc.rangeplot(diamonds, x=\"color\", y=\"carat\")\nclarity = sbc.rangeplot(diamonds, x=\"clarity\", y=\"carat\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n 다이아몬드의 퀄리티가 가격에 주는 영향/예측을 정확히 파악하기 위해 다음과 같은 절차를 통해 가격 대신 “캐럿으로 설명되지 않는 가격”(residuals)으로 종속변수를 대체함\n\n우선, 2.5캐럿 이하로 제한하고,\n가격과 캐럿을 log-transform하여 선형모형을 세움\n이 모형으로 잔차를 구하고,\n다이아몬드의 퀄리티와 이 잔차와의 관계를 살펴봄\n\n\ndiamonds2 = diamonds.query(\"carat < 2.5\").assign(\n    lprice=lambda x: np.log2(x.price), \n    lcarat=lambda x: np.log2(x.carat)\n)\n\n\n(\n    so.Plot(diamonds2, x='lcarat', y='lprice')\n    .add(so.Dots(color=\".6\", alpha=.1))\n    .add(so.Line(), so.PolyFit(5))\n)\n\n\n\n\n\n# 캐럿으로 가격을 예측하는 선형모형\nfrom statsmodels.formula.api import ols\nmod_diamonds = ols(\"lprice ~ lcarat\", data=diamonds2).fit()\n\n\nmod_diamonds.params\n\nIntercept   12.19\nlcarat       1.68\ndtype: float64\n\n\nModel: \\(\\displaystyle lprice = 12.19\\cdot lcarat + 1.68 + e\\)\n\n# data range from the carat variable\ngrid = pd.DataFrame({\"carat\": []})\ngrid[\"carat\"]= np.linspace(diamonds2.carat.min(), diamonds2.carat.max(), 20)\ngrid = grid.assign(\n    lcarat=lambda x: np.log2(x.carat),\n    lprice=lambda x: mod_diamonds.predict(x.lcarat),\n    price=lambda x: 2**x.lprice\n)\n\n\ngrid\n\n    carat  lcarat  lprice    price\n0    0.20   -2.32    8.29   312.79\n1    0.32   -1.64    9.43   691.47\n2    0.44   -1.18   10.21  1182.86\n..    ...     ...     ...      ...\n17   2.25    1.17   14.16 18318.33\n18   2.37    1.24   14.29 19999.52\n19   2.49    1.32   14.41 21740.08\n\n[20 rows x 4 columns]\n\n\n\n(\n    so.Plot(diamonds2, x='carat', y='price')\n    .add(so.Dots(color=\".6\", alpha=.1))\n    .add(so.Line(), x=grid.carat, y=grid.price)\n)\n\n\n\n\n\n캐럿과 가격은 비선형적인 관계에 있으며, 이를 log-transform하여 선형적인 관계로 만들어줌\n또한, variation은 캐럿이 증가함에 따라 비례해서 커지는 양상을 보임; 이 또한 log-transform을 통해 해결되었음\n\nResidual plot: 위 모형은 충분히 좋은가?\n\ndiamonds2[\"lresid\"] = mod_diamonds.resid\n\n(\n    so.Plot(diamonds2, x='lcarat', y='lresid')\n    .add(so.Dots(alpha=.1))\n)\n\n\n\n\n이제, 다이아몬드의 퀄리티와 위에서 구한 가격의 residuals과의 관계를 살펴보면,\n\ny축은 log2 scale로 변환된 것이므로, 원래 단위로 이해하면,\n\nresidual +1은 캐럿으로 예측되는 가격(residual = 0)보다 가격이 2배 비싸다는 것을 의미\nresidual -1은 캐럿으로 예측되는 가격(residual = 0)보다 가격이 1/2배 낮다는 것을 의미\n\n이는 캐럿의 영향을 고려한 후에, 다이아몬드의 퀄리티 각각이 가격에 (상대적으로) 얼마나 영향을 주는지를 가늠할 수 있음\n\n\ncut = sbc.rangeplot(diamonds2, x=\"cut\", y=\"lresid\")\ncolor = sbc.rangeplot(diamonds2, x=\"color\", y=\"lresid\")\nclarity = sbc.rangeplot(diamonds2, x=\"clarity\", y=\"lresid\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmod1 = ols(\"lprice ~ lcarat + cut\", data=diamonds2).fit()\nmod2 = ols(\"lprice ~ lcarat + color\", data=diamonds2).fit()\nmod3 = ols(\"lprice ~ lcarat + clarity\", data=diamonds2).fit()\n\n# mod.params\n\n\n\n\nIntercept          11.84\ncut[T.Good]         0.23\ncut[T.Very Good]    0.34\ncut[T.Premium]      0.33\ncut[T.Ideal]        0.45\nlcarat              1.70\ndtype: float64\n\n\nIntercept    12.37\ncolor[T.E]   -0.04\ncolor[T.F]   -0.05\ncolor[T.G]   -0.08\ncolor[T.H]   -0.27\ncolor[T.I]   -0.41\ncolor[T.J]   -0.61\nlcarat        1.73\ndtype: float64\n\n\n\n\nIntercept         11.24\nclarity[T.SI2]     0.66\nclarity[T.SI1]     0.87\nclarity[T.VS2]     1.08\nclarity[T.VS1]     1.15\nclarity[T.VVS2]    1.38\nclarity[T.VVS1]    1.45\nclarity[T.IF]      1.58\nlcarat             1.81\ndtype: float64\n\n\n\n다이아몬드의 3가지 퀄리티가 서로 연관되어 있다면?\n\ntable1 = diamonds.groupby([\"cut\", \"color\"]).size().reset_index(name=\"n\")\ntable2 = diamonds.groupby([\"cut\", \"clarity\"]).size().reset_index(name=\"n\")\ntable3 = diamonds.groupby([\"color\", \"clarity\"]).size().reset_index(name=\"n\")\n\n\np1 = so.Plot(table1, x=\"cut\", y=\"color\", pointsize=\"n\", color=\"n\").add(so.Dot()).scale(pointsize=(5, 30))\np2 = so.Plot(table2, x=\"cut\", y=\"clarity\", pointsize=\"n\", color=\"n\").add(so.Dot()).scale(pointsize=(5, 30))\np3 = so.Plot(table3, x=\"color\", y=\"clarity\", pointsize=\"n\", color=\"n\").add(so.Dot()).scale(pointsize=(5, 30))"
  },
  {
    "objectID": "contents/modelling1.html#a-more-complicated-model",
    "href": "contents/modelling1.html#a-more-complicated-model",
    "title": "Model building I",
    "section": "A more complicated model",
    "text": "A more complicated model\n\n다이아몬드의 3가지 퀄리티와 carat이 모두 연관되어 있어, 각각의 고유한 효과를 보기 위해 다음과 같이 모든 예측변수들을 포함하는 모형을 세울 수 있음\n\n\nmod_full = ols('lprice ~ lcarat + cut + color + clarity', data=diamonds2).fit()\n\n\ngrid = pd.DataFrame({\"cut\": [\"Fair\", \"Good\", \"Very Good\", \"Premium\", \"Ideal\"]})\ngrid[\"color\"] = diamonds2.color.mode()[0]\ngrid[\"clarity\"] = diamonds2.clarity.mode()[0]\ngrid[\"lcarat\"] = diamonds2.lcarat.median()\n\n\ngrid\n\n         cut color clarity  lcarat\n0       Fair     G     SI1   -0.51\n1       Good     G     SI1   -0.51\n2  Very Good     G     SI1   -0.51\n3    Premium     G     SI1   -0.51\n4      Ideal     G     SI1   -0.51\n\n\n즉, G 컬러이고, SI1의 투명도와, 로그 캐럿 -0.51 무게인 다이아몬드에 대해서, cut이 좋아질수록 가격이 얼마나 올라가는지를 예측해 본다면,\n\ngrid[\"lpred\"] = mod_full.predict(grid)\ngrid[\"pred\"] = 2**grid.lpred\ngrid\n\n         cut color clarity  lcarat  lpred    pred\n0       Fair     G     SI1   -0.51  10.99 2035.36\n1       Good     G     SI1   -0.51  11.10 2202.21\n2  Very Good     G     SI1   -0.51  11.16 2285.37\n3    Premium     G     SI1   -0.51  11.19 2337.24\n4      Ideal     G     SI1   -0.51  11.22 2388.52\n\n\n\n(\n    so.Plot(grid, x='cut', y='pred')\n    .add(so.Line(marker=\"o\"))\n    .limit(y=(1300, 4100))\n)\n\n\n\n\n\n\n\n\ncut 대신 color와 clarity에 대해서도 그려볼 것\n\n\n\n\n\n\n\n\n\n\n\n2**mod_full.params[-8:-1]\n\nclarity[T.SI2]    1.50\nclarity[T.SI1]    1.77\nclarity[T.VS2]    2.06\nclarity[T.VS1]    2.20\nclarity[T.VVS2]   2.52\nclarity[T.VVS1]   2.71\nclarity[T.IF]     2.98\ndtype: float64\n\n\nResiduals 분석\n\ndiamonds2[\"lresid_full\"] = mod_full.resid\n\n\n(\n    so.Plot(diamonds2, x='lcarat', y='lresid_full')\n    .add(so.Dots(alpha=.1))\n)\n\n\n\n\n이상치들만 자세히 들여다보면,\n\nfrom numpy import abs\n\ndiamonds2.query(\"abs(lresid_full) > 1\").assign(\n    pred_full=lambda x: 2 ** mod_full.predict(x[[\"lcarat\", \"cut\", \"color\", \"clarity\"]]),\n    resid_full=lambda x: x.price - x.pred_full,\n).sort_values(\"resid_full\")\n\n       carat      cut color clarity  depth  table  price    x    y    z  \\\n22440   2.46  Premium     E     SI2  59.70  59.00  10470 8.82 8.76 5.25   \n41918   1.03     Fair     E      I1  78.20  54.00   1262 5.72 5.59 4.42   \n38153   0.25     Fair     F     SI2  54.40  64.00   1013 4.30 4.23 2.32   \n...      ...      ...   ...     ...    ...    ...    ...  ...  ...  ...   \n5325    0.61     Good     F     SI2  62.50  65.00   3807 5.36 5.29 3.33   \n8203    0.51     Fair     F    VVS2  60.70  66.00   4368 5.21 5.11 3.13   \n21935   1.01     Fair     D     SI2  64.60  58.00  10011 6.25 6.20 4.02   \n\n       lprice  lcarat  lresid_full  pred_full  resid_full  \n22440   13.35    1.30        -1.17   23630.26   -13160.26  \n41918   10.30    0.04        -1.07    2650.65    -1388.65  \n38153    9.98   -2.00         1.94     264.51      748.49  \n...       ...     ...          ...        ...         ...  \n5325    11.89   -0.71         1.31    1539.74     2267.26  \n8203    12.09   -0.97         1.36    1706.07     2661.93  \n21935   13.29    0.01         1.30    4052.40     5958.60  \n\n[16 rows x 15 columns]\n\n\n좀 더 체계적으로 다음과 같이 모형의 복잡성이 올라감에 따라 예측의 정확성이 어떻게 변하는지 알아보면\n\ndiamonds2 = diamonds.query(\"carat < 2.5\").assign(\n    lprice=lambda x: np.log2(x.price), \n    lcarat=lambda x: np.log2(x.carat)\n)\n\n# nested models\ndiamonds2_mod1 = ols(\"lprice ~ lcarat\", data=diamonds2).fit()\ndiamonds2_mod2 = ols(\"lprice ~ lcarat + clarity\", data=diamonds2).fit()\ndiamonds2_mod3 = ols(\"lprice ~ lcarat + cut + color + clarity\", data=diamonds2).fit()\n\n\n\ncode\ndiamonds2_mods = diamonds2.assign(\n    mod1=diamonds2_mod1.resid,\n    mod2=diamonds2_mod2.resid,\n    mod3=diamonds2_mod3.resid,\n)\n\ndiamonds2_mods = diamonds2_mods.melt(\n    id_vars=[\"lcarat\", \"lprice\"],\n    value_vars=[\"mod1\", \"mod2\", \"mod3\"],\n    var_name=\"model\",\n    value_name=\"resid\",\n)\n\n(\n    so.Plot(diamonds2_mods, x='lcarat', y='resid', color='model')\n    .add(so.Dots(alpha=.1))\n    .facet(\"model\")\n    .layout(size=(8, 5))\n)\n\n\n\n\n\n\n\ncode\n(\n    so.Plot(diamonds2_mods, x='resid', color='model')\n    .add(so.Line(), so.Hist(bins=50))\n    .layout(size=(5, 3))\n)\n\n\n\n\n\n\n\ncode\nfrom statsmodels.tools.eval_measures import rmse, meanabs\n\nmods = [diamonds2_mod1, diamonds2_mod2, diamonds2_mod3]\ny = diamonds2.price\nprint(\"The prediction accuracy of the models (original unit except R-squared):\\n\")\n\nfor mod in mods:\n    y_hat = 2**mod.fittedvalues\n    R2 = mod.rsquared\n\n    print(\n        f\"R-squared: {R2:.2f}, RMSE: {rmse(y, y_hat):.2f}, \"\n        f\"MAE:{meanabs(y, y_hat):.2f}\"\n    )\n\n\nThe prediction accuracy of the models (original unit except R-squared):\n\nR-squared: 0.93, RMSE: 1507.04, MAE:817.34\nR-squared: 0.97, RMSE: 1164.81, MAE:623.65\nR-squared: 0.98, RMSE: 732.70, MAE:390.61\n\n\n\n\n\n\n\n\nModel evaluation: R-squared, RMSE, MAE\n\n\n\nThe prediction accuracy of the models can be evaluated by the following metrics:\n(The strength of association)\n변량의 비율로 해석하고 싶다면,\n\\(\\displaystyle\\frac{V(predictions)}{V(Y)} + \\frac{V(residuals)}{V(Y)} = 1,\\)   (OLS estimate)\n즉, “모형에 의해 설명되는 \\(Y\\) 변량의 비율” + “모형에 의해 설명되지 않는 \\(Y\\) 변량의 비율” = 1\n첫 항을 \\(R^2\\) 라고 하고, 결정계수 혹은 R squared라고 부름\n따라서, \\(1-R^2\\) 는 설명되지 않는 변량의 비율이라고 할 수 있음.\n\\(또한, R\\)은 multiple correlation coefficient라고 부르는데, 이는 \\(Y\\)와 예측값 \\(\\hat Y\\)의 상관계수(Pearson’s correlation coefficient)를 의미함.\n비율이 아닌 \\(Y\\)의 단위와 동일한 단위로 해석하고 싶다면,\n\nRoot-mean-squared deviation/error: \\(RMSE = \\displaystyle\\sqrt{\\frac{1}{n} \\sum_{i=1}^{n}{(y_i -\\hat y_i)^2}}\\)\nMean absolute error: \\(MAE = \\displaystyle\\frac{1}{n} \\sum_{i=1}^{n}{|~y_i -\\hat y_i~|}\\) : 이상치에 덜 민감함"
  },
  {
    "objectID": "contents/modelling1.html#interactions",
    "href": "contents/modelling1.html#interactions",
    "title": "Model building I",
    "section": "Interactions",
    "text": "Interactions\n무게(carat)과 투명도(clarity)가 상호작용하여 가격에 영향을 준다는 가정하에, 즉, 투명도의 레벨에 따라 무게와 가격의 관계가 바뀔 수 있다는 가정\n\ndiamonds2_mod2 = ols(\"lprice ~ lcarat + clarity\", data=diamonds2).fit()\ndiamonds2_mod2_interact = ols(\"lprice ~ lcarat * clarity\", data=diamonds2).fit()\n\nPrediction 비교\n\n\ncode\ndiamonds2_mods = diamonds2.assign(\n    pred_add=diamonds2_mod2.fittedvalues,\n    pred_interact=diamonds2_mod2_interact.fittedvalues,\n)\n\ndiamonds2_mods = diamonds2_mods.melt(\n    id_vars=[\"lcarat\", \"lprice\", \"clarity\"],\n    value_vars=[\"pred_add\", \"pred_interact\"],\n    var_name=\"model\",\n    value_name=\"pred\",\n)\n\n(\n    so.Plot(diamonds2_mods, x='lcarat', y='pred', color='clarity')\n    .add(so.Line())\n    .scale(color=so.Nominal(order=diamonds2.clarity.cat.categories.tolist()))\n    .facet(\"model\")\n    .layout(size=(8, 4.5))\n)\n\n\n\n\n\nResiduals 비교\n\n\ncode\ndiamonds2_mods = diamonds2.assign(\n    resid_add=diamonds_mod2.resid,\n    resid_interact=diamonds_mod2_interact.resid,\n)\n\ndiamonds2_mods = diamonds2_mods.melt(\n    id_vars=[\"lcarat\", \"lprice\", \"clarity\"],\n    value_vars=[\"resid_add\", \"resid_interact\"],\n    var_name=\"model\",\n    value_name=\"resid\",\n)\n\n(\n    so.Plot(diamonds2_mods, x='lcarat', y='resid', color='clarity')\n    .add(so.Dots(alpha=.1))\n    .layout(size=(12, 5))\n    .facet(\"clarity\", \"model\")\n)"
  },
  {
    "objectID": "contents/modelling1.html#모델-파라미터의-해석",
    "href": "contents/modelling1.html#모델-파라미터의-해석",
    "title": "Model building I",
    "section": "모델 파라미터의 해석",
    "text": "모델 파라미터의 해석\n변수와 변수간의 관계성에 초점\n변수들을 “동시”에 고려해서 봄으로써 각 변수들의 “고유한 impact”의 방향과 크기를 해석하고자 함\nex. ols(lprice ~ lcarat + color + cut + clarity, data = diamonds2)\n다이아몬드 투명도(clarity)의 레벨이 하나씩 올라감에 따라 가격형성에 어떻게 혹은 얼마나 영향을 주는가?\n\n표현에 주의할 것: 인과관계가 있는 듯한 표현… lprice ~ clarity의 관계는?\n변수들을 개별적으로 보았을 때의 impact는 다른 변수들을 함께 고려하면 바뀌는 것이 일반적임 (서로 독립이 아니라면)\n\nex. 다이아몬드 투명도가 가격과 맺는 관계는 다른 변수를 고려하면 바뀜\n\nBias의 생성: 편견? 스키마?\n\n\n\n\n\n\n\n\n\n\n\n\nclarity[T.SI2]    0.59\nclarity[T.SI1]    0.82\nclarity[T.VS2]    1.04\n                  ... \nclarity[T.VVS1]   1.44\nclarity[T.IF]     1.58\nlcarat            1.89\nLength: 8, dtype: float64\n\n\n\n또한, 변수간의 상호작용을 고려하여, 각 변수들의 “고유한 impact”의 방향과 크기에 대해 정교한 분석이 가능\n\n\n\n\n\n\n\nlcarat                   1.60\nlcarat:clarity[T.SI2]    0.20\nlcarat:clarity[T.SI1]    0.22\nlcarat:clarity[T.VS2]    0.18\nlcarat:clarity[T.VS1]    0.23\nlcarat:clarity[T.VVS2]   0.25\nlcarat:clarity[T.VVS1]   0.23\nlcarat:clarity[T.IF]     0.27\ndtype: float64"
  },
  {
    "objectID": "contents/modelling1.html#fitted-모델의-예측-정확성과-특성",
    "href": "contents/modelling1.html#fitted-모델의-예측-정확성과-특성",
    "title": "Model building I",
    "section": "(fitted) 모델의 예측 정확성과 특성",
    "text": "(fitted) 모델의 예측 정확성과 특성\nResiduals의 분석\n변수의 개수가 증가하면, 즉 모델이 복잡할 수록 샘플에 대한 예측력은 높아짐.\n\n\n\n\n\n\nvariance의 증가: Bias-Variance Tradeoff\nSource\n\n\n\n반면, 변수들 간의 복잡한 correlation들이 모델의 해석에 오류를 가져올 수 있음."
  },
  {
    "objectID": "contents/modelling2.html",
    "href": "contents/modelling2.html",
    "title": "Model building II",
    "section": "",
    "text": "Load Packages\n# numerical calculation & data frames\nimport numpy as np\nimport pandas as pd\n\n# visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport seaborn.objects as so\n\n# statistics\nimport statsmodels.api as sm"
  },
  {
    "objectID": "contents/modelling2.html#day-of-week-요일",
    "href": "contents/modelling2.html#day-of-week-요일",
    "title": "Model building II",
    "section": "1. Day of week (요일)",
    "text": "1. Day of week (요일)\n항공편의 개수는 요일에 따른 효과가 크게 미치기 때문에 우선 요일의 효과를 살펴보면서 장기간의 트렌드를 이해하고자 함\n\n# add a column for the day of the week\ndaily[\"wday\"] = (\n    daily[\"date\"]\n    .dt.day_name()\n    .str[:3]\n    .astype(\"category\")\n    .cat.set_categories([\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"])\n)\n\n\ndaily\n\n          date    n wday\n0   2013-01-01  842  Tue\n1   2013-01-02  943  Wed\n2   2013-01-03  914  Thu\n..         ...  ...  ...\n362 2013-12-29  888  Sun\n363 2013-12-30  968  Mon\n364 2013-12-31  776  Tue\n\n[365 rows x 3 columns]\n\n\n\nimport sbcustom\nsbcustom.boxplot(daily, \"wday\", \"n\", alpha=.5)\n\n\n\n\n매우 강한 주말 효과를 제거하기 위해 모델을 만들어 residuals을 얻음\n\nfrom statsmodels.formula.api import ols \n# 또는 import statsmodels.formula.api as smf\n\nmod = ols(\"n ~ wday\", data=daily).fit()\n\n\npd.options.display.max_rows = 7\n\n\n# create a grid from wday with categorical dtype\ngrid = pd.DataFrame({\"wday\": [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"]})\n\n\ngrid[\"pred\"] = mod.predict(grid[\"wday\"])\ngrid\n\n  wday   pred\n0  Sun 891.48\n1  Mon 974.81\n2  Tue 951.36\n3  Wed 962.69\n4  Thu 965.75\n5  Fri 967.46\n6  Sat 744.62\n\n\n\n(\n    sbcustom\n    .boxplot(daily, \"wday\", \"n\", alpha=.5)\n    .add(so.Dot(color=\"blue\", marker=\"<\"), x=grid.wday, y=grid.pred)\n    .scale(x=so.Nominal(order=[\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"]))\n)\n\n\n\n\nResiduals: 요일의 효과를 제거한 후의 날짜와 항공편의 개수의 관계\n\n# add a column of residuals from mod\ndaily[\"resid\"] = mod.resid\n\n\nref_line = pd.DataFrame({\"x\": [\"2013-01-01\", \"2013-12-31\"], \"y\": [0, 0]})\nref_line[\"x\"] = pd.to_datetime(ref_line[\"x\"])\n\n(\n    so.Plot(daily, x='date', y='resid')\n    .add(so.Line())\n    .add(so.Line(color=\"red\", linestyle=\":\"), x=ref_line.x, y=ref_line.y)\n    .layout(size=(8.5, 5))\n)\n\n\n\n\n\n살펴볼 것들\n\n6월부터 모델이 잡아내지 못한 패턴들이 심해짐. 이를 위해 우선, 요일별로 잔차를 들여다 보면,\n\n\n(\n    so.Plot(daily, x='date', y='resid', color=\"wday\")\n    .add(so.Line())\n    .add(so.Line(color=\"red\", linestyle=\":\"), x=ref_line.x, y=ref_line.y)\n    .layout(size=(8.5, 5))\n)\n\n\n\n\n토요일의 패턴을 잡아내지 못했음:\n토요일 여름에 모델의 기대치보다(즉, 토요일 1년 평균보다) 더 많은 항공편이 있고, 가을에는 반대로 더 적은 항공편이 있음. 뒤에 이를 고려한 새로운 모델을 세워 봄\n\n특히나 적은 항공편이 있는 날들이 있어서 그 날들을 살펴보면\n\n\ndaily.query('resid < -100')\n\n          date    n wday   resid\n0   2013-01-01  842  Tue -109.36\n19  2013-01-20  786  Sun -105.48\n145 2013-05-26  729  Sun -162.48\n184 2013-07-04  737  Thu -228.75\n185 2013-07-05  822  Fri -145.46\n243 2013-09-01  718  Sun -173.48\n331 2013-11-28  634  Thu -331.75\n332 2013-11-29  661  Fri -306.46\n357 2013-12-24  761  Tue -190.36\n358 2013-12-25  719  Wed -243.69\n364 2013-12-31  776  Tue -175.36\n\n\n미국 공휴일에 해당하는 날들인 보임: 새해, 독립기념일(7/4), 추수감사절, 크리스마스 등등\n\n일년에 걸쳐 나타나는 장기간의 트렌드가 있어보임: so.Polyfit(5)을 이용해 시각화해보면\n\n\n(\n    so.Plot(daily, x='date', y='resid')\n    .add(so.Line(color=\".5\"))\n    .add(so.Line(), so.PolyFit(5))\n    .add(so.Line(color=\"red\", linestyle=\":\"), x=ref_line.x, y=ref_line.y)\n    .layout(size=(8.5, 5))\n)\n\n\n\n\nNatural spline fit\npatsy 패키지의 cr 함수를 이용\n\ndaily[\"day\"] = daily[\"date\"].dt.day_of_year\n\n\nfit_spline = ols(\"resid ~ cr(day, df=10)\", data=daily).fit()\n\n\ndaily[\"fitted\"] = fit_spline.fittedvalues\n\n\ndaily.head(7)\n\n        date    n wday   resid  day  fitted\n0 2013-01-01  842  Tue -109.36    1  -56.91\n1 2013-01-02  943  Wed  -19.69    2  -56.86\n2 2013-01-03  914  Thu  -51.75    3  -56.80\n3 2013-01-04  915  Fri  -52.46    4  -56.75\n4 2013-01-05  720  Sat  -24.62    5  -56.68\n5 2013-01-06  832  Sun  -59.48    6  -56.61\n6 2013-01-07  933  Mon  -41.81    7  -56.54\n\n\n\nref_line = pd.DataFrame({\"x\": [1, 365], \"y\": [0, 0]})\n\n(\n    so.Plot(daily, x='day', y='resid')\n    .add(so.Line(color=\".6\"))\n    .add(so.Line(color=\"red\", linestyle=\":\"), x=ref_line.x, y=ref_line.y)\n    .add(so.Line(), x=daily.day, y=daily.fitted)\n    .layout(size=(8.5, 5))\n)\n\n\n\n\n겨울에 좀 적으며, 여름에 많음: 여러 해의 데이터가 있다면 이 패턴을 구체화 할 수 있으나 2013년의 데이터만 있으므로 우리의 지식에 의존해서 설명해 볼 수 밖에 없음"
  },
  {
    "objectID": "contents/modelling2.html#seasonal-saturday-effect-계절",
    "href": "contents/modelling2.html#seasonal-saturday-effect-계절",
    "title": "Model building II",
    "section": "2. Seasonal Saturday effect (계절)",
    "text": "2. Seasonal Saturday effect (계절)\n위의 첫번째 부분, 즉 토요일에 대해 나타나는 패턴을 잡아내기 위해\n\n(\n    so.Plot(daily.query('wday == \"Sat\"'), x='date', y='n')\n    .add(so.Line(marker=\".\"))\n    .layout(size=(8.5, 5))\n)\n\n\n\n\n\n여름에는 토요일에 여행하는 걸 마다하지 않는 것은 아마도 여름 방학이나 휴가철이라 그런 것일 듯,\nstate’s school terms: summer break in 2013 was Jun 26–Sep 9\n가을에 토요일 항공편이 적은 것은 미국에서는 추수감사절이나 크리스마스와 같은 큰 공휴일들이 있어 가족여행을 계획하지 않는다고 하는데 추측해 볼 뿐임.\n\n대략 3개의 school terms으로 나누어 우리의 추측을 확인해보고자 함\n\ndates_cut = pd.to_datetime([\"2013-01-01\", \"2013-06-05\", \"2013-08-25\", \"2014-01-01\"])\ndaily[\"term\"] = pd.cut(daily.date, dates_cut, right=False, labels=[\"spring\", \"summer\", \"fall\"])\n\n\n(\n    so.Plot(daily.query('wday == \"Sat\"'), x='date', y='n', color=\"term\")\n    .add(so.Line(marker=\".\"))\n    .layout(size=(8.5, 5))\n)\n\n\n\n\n이 term 변수가 토요일이 아닌 다른 요일에는 어떻게 작용하는지 살펴보면\n\nsbcustom.boxplot(daily, x=\"wday\", y=\"n\", color=\"term\", alpha=.5)\n\n\n\n\n3개의 term에 따라 각 요일에서의 항공편의 개수가 큰 차이가 나는 것으로 보이며, 그 패턴이 요일마다 다른 것으로 보이므로, 각 term에 따라 요일의 효과를 분리해서 보는 것이 타당해보임."
  },
  {
    "objectID": "contents/modelling2.html#model-building",
    "href": "contents/modelling2.html#model-building",
    "title": "Model building II",
    "section": "Model building",
    "text": "Model building\n앞에서 탐색한 결과를 바탕으로, 하루에 출항하는 항공편의 개수를 예측하는데\n\n요일로만 예측하는 모델 (mod1)과\n요일과 term, 그리고 그 둘의 상호작용을 함께 고려한 모델 (mod2)을 세워 비교해보면,\n\n\nmod1 = ols(\"n ~ wday\", data=daily).fit()  # 요일로만 예측\nmod2 = ols(\"n ~ wday * term\", data=daily).fit()  # 요일과 term, 그리고 요일과 term의 interaction으로 예측\n\n\ndaily = daily.assign(\n    without_term = mod1.resid,\n    with_term = mod2.resid,\n)\n\n\ndaily\n\n          date    n wday   resid  day  fitted    term  without_term  with_term\n0   2013-01-01  842  Tue -109.36    1  -56.91  spring       -109.36     -98.26\n1   2013-01-02  943  Wed  -19.69    2  -56.86  spring        -19.69      -8.64\n2   2013-01-03  914  Thu  -51.75    3  -56.80  spring        -51.75     -51.36\n..         ...  ...  ...     ...  ...     ...     ...           ...        ...\n362 2013-12-29  888  Sun   -3.48  363  -39.96    fall         -3.48      -7.00\n363 2013-12-30  968  Mon   -6.81  364  -41.10    fall         -6.81     -11.26\n364 2013-12-31  776  Tue -175.36  365  -42.24    fall       -175.36    -167.58\n\n[365 rows x 9 columns]\n\n\n\ndaily_models = daily.melt(id_vars=[\"date\"], value_vars=[\"without_term\", \"with_term\"], var_name=\"model\", value_name=\"residual\")\n\n\n(\n    so.Plot(daily_models, x='date', y='residual', color=\"model\")\n    .add(so.Line(alpha=.75))\n    .layout(size=(8, 5))\n)\n\n\n\n\nInteraction이 있는 모델이 약간 나아보이나 좀 더 살펴보고자, 원래의 데이터와 함께 플랏을 그려보면,\n\n(\n    sbcustom.boxplot(daily, x=\"wday\", y=\"n\")\n    .add(so.Dot(), so.Agg())\n    .facet(\"term\")\n    .layout(size=(9.5, 6))\n)\n\n\n\n\n이상치(ourliers)가 많아 평균(mean)의 값이 중앙값 (median)보다 많이 내려와 있는 경향을 보이고 있음.\n이는 이상치가 모델에 큰 영향을 미치기 때문인데, 이상치의 영향을 줄이는 방법 중에 하나인 robust regression 모형 (mod3)을 세워 해결해보면,\n\nmod3 = sm.RLM.from_formula(\"n ~ wday * term\", data=daily).fit()\n\n\nwday_grid = np.array([\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"])\nterm_grid = np.array([\"spring\", \"summer\", \"fall\"])\n\n\n# meshgrid of wday and term\nwday_grid, term_grid = np.meshgrid(wday_grid, term_grid)\ngrid = pd.DataFrame({\"wday\": wday_grid.ravel(), \"term\": term_grid.ravel()})\n\ngrid\n\n   wday    term\n0   Sun  spring\n1   Mon  spring\n2   Tue  spring\n..  ...     ...\n18  Thu    fall\n19  Fri    fall\n20  Sat    fall\n\n[21 rows x 2 columns]\n\n\n\ngrid[\"interaction_ols\"] = mod2.predict(grid[[\"wday\", \"term\"]])\ngrid[\"interaction_rlm\"] = mod3.predict(grid[[\"wday\", \"term\"]])\n\n\ngrid\n\n   wday    term  interaction_ols  interaction_rlm\n0   Sun  spring           872.23           893.50\n1   Mon  spring           961.27           966.16\n2   Tue  spring           940.26           952.84\n..  ...     ...              ...              ...\n18  Thu    fall           960.33           981.54\n19  Fri    fall           965.89           982.43\n20  Sat    fall           716.00           696.90\n\n[21 rows x 4 columns]\n\n\n\ndaily_median = daily.groupby([\"wday\", \"term\"])[\"n\"].median().reset_index(name=\"median\")\n\n\ngrid = grid.merge(daily_median, on=[\"wday\", \"term\"])\ngrid\n\n   wday    term  interaction_ols  interaction_rlm  median\n0   Sun  spring           872.23           893.50  901.00\n1   Mon  spring           961.27           966.16  977.50\n2   Tue  spring           940.26           952.84  960.00\n..  ...     ...              ...              ...     ...\n18  Thu    fall           960.33           981.54  989.50\n19  Fri    fall           965.89           982.43  986.00\n20  Sat    fall           716.00           696.90  690.00\n\n[21 rows x 5 columns]\n\n\n\ngrid_long = grid.melt(id_vars=[\"wday\", \"term\"], value_vars=[\"interaction_ols\", \"interaction_rlm\", \"median\"], var_name=\"model\", value_name=\"n\")\ngrid_long\n\n   wday    term            model      n\n0   Sun  spring  interaction_ols 872.23\n1   Mon  spring  interaction_ols 961.27\n2   Tue  spring  interaction_ols 940.26\n..  ...     ...              ...    ...\n60  Thu    fall           median 989.50\n61  Fri    fall           median 986.00\n62  Sat    fall           median 690.00\n\n[63 rows x 4 columns]\n\n\n\n(\n    so.Plot(grid_long, x='wday', y='n', color=\"model\")\n    .add(so.Dot(edgecolor=\"w\", pointsize=8))\n    .facet(\"term\")\n    .layout(size=(8, 5))\n)\n\n\n\n\nFinal model\nmod3 = sm.RLM.from_formula(\"n ~ wday * term\", data=daily).fit()\n\nmod3.params\n\nIntercept                     893.50\nwday[T.Mon]                    72.65\nwday[T.Tue]                    59.34\nwday[T.Wed]                    66.27\nwday[T.Thu]                    77.63\nwday[T.Fri]                    73.70\nwday[T.Sat]                  -146.68\nterm[T.summer]                 30.40\nterm[T.fall]                    6.58\nwday[T.Mon]:term[T.summer]     -1.92\nwday[T.Tue]:term[T.summer]      6.69\nwday[T.Wed]:term[T.summer]      2.32\nwday[T.Thu]:term[T.summer]     -7.51\nwday[T.Fri]:term[T.summer]     -5.57\nwday[T.Sat]:term[T.summer]     23.99\nwday[T.Mon]:term[T.fall]        8.89\nwday[T.Tue]:term[T.fall]        1.72\nwday[T.Wed]:term[T.fall]        1.21\nwday[T.Thu]:term[T.fall]        3.82\nwday[T.Fri]:term[T.fall]        8.65\nwday[T.Sat]:term[T.fall]      -56.51\ndtype: float64\n\n\n\n(\n    so.Plot(grid, x='wday', y='interaction_rlm', color=\"term\")\n    .add(so.Line(marker=\".\"))\n    .layout(size=(7, 5))\n)\n\n\n\n\nResiduals for mod3\n\ndaily[\"with_term_rlm\"] = mod3.resid\n\n\ndaily_models = daily.melt(\n    id_vars=[\"date\"],\n    value_vars=[\"with_term\", \"with_term_rlm\"],\n    var_name=\"model\",\n    value_name=\"residual\",\n)\n\n\ndaily_models\n\n          date          model  residual\n0   2013-01-01      with_term    -98.26\n1   2013-01-02      with_term     -8.64\n2   2013-01-03      with_term    -51.36\n..         ...            ...       ...\n727 2013-12-29  with_term_rlm    -12.09\n728 2013-12-30  with_term_rlm    -13.63\n729 2013-12-31  with_term_rlm   -185.15\n\n[730 rows x 3 columns]\n\n\n\n(\n    so.Plot(daily_models, x='date', y='residual', color=\"model\")\n    .add(so.Line())\n    .layout(size=(8, 5))\n)\n\n\n\n\n이제 1년에 걸친 장기 트렌드를 더 잘 볼 수 있고, positive한 이상치와 negative한 이상치도 확연히 들어남"
  },
  {
    "objectID": "contents/modelling2.html#time-of-year-an-alternative-approach",
    "href": "contents/modelling2.html#time-of-year-an-alternative-approach",
    "title": "Model building II",
    "section": "Time of year: an alternative approach",
    "text": "Time of year: an alternative approach\n\n위에서는 모델을 향상시키기 위해 우리의 지식을 이용하였는데, 이에 반해\n좀 더 유동적인 모델을 이용하여 데이터의 패턴을 잘 잡아내주도록 적절한 모델을 생성하는 방식도 있음\n위의 예에서는 선형모델로는 부족하니 natural spline을 이용해서 부드러운 곡선에 fit해볼 수 있음\n\n\n# data range for the plot of date vs. n\ndate_range = pd.date_range(\"2013-01-01\", \"2014-01-01\", freq=\"D\")\n\n\nmod_spline = sm.RLM.from_formula(\"n ~ wday * cr(day, df=5)\", data=daily).fit()\n\n\ndaily[\"fitted_spline\"] = mod_spline.fittedvalues\n\n\ndaily\n\n          date    n wday   resid  day  fitted    term  without_term  \\\n0   2013-01-01  842  Tue -109.36    1  -56.91  spring       -109.36   \n1   2013-01-02  943  Wed  -19.69    2  -56.86  spring        -19.69   \n2   2013-01-03  914  Thu  -51.75    3  -56.80  spring        -51.75   \n..         ...  ...  ...     ...  ...     ...     ...           ...   \n362 2013-12-29  888  Sun   -3.48  363  -39.96    fall         -3.48   \n363 2013-12-30  968  Mon   -6.81  364  -41.10    fall         -6.81   \n364 2013-12-31  776  Tue -175.36  365  -42.24    fall       -175.36   \n\n     with_term  with_term_rlm  fitted_spline  \n0       -98.26        -110.84         865.91  \n1        -8.64         -16.78         888.63  \n2       -51.36         -57.14         913.36  \n..         ...            ...            ...  \n362      -7.00         -12.09         885.37  \n363     -11.26         -13.63         967.40  \n364    -167.58        -185.15         935.67  \n\n[365 rows x 11 columns]\n\n\n\n(\n    so.Plot(daily, x='date', y='fitted_spline', color=\"wday\")\n    .add(so.Line(marker=\".\"))\n    .layout(size=(8.5, 6))\n)\n\n\n\n\nResiduals for mod_spline\n\ndaily[\"resid_spline\"] = mod_spline.resid\n\n\n(\n    so.Plot(daily, x='date', y='resid_spline')\n    .add(so.Line())\n    .layout(size=(8.5, 5))\n)\n\n\n\n\n좀 더 복잡한 모델; degree of freedom=10\n\nmod_spline2 = sm.RLM.from_formula(\"n ~ wday * cr(day, df=10)\", data=daily).fit()\ndaily[\"fitted_spline2\"] = mod_spline2.fittedvalues\n\n\n\nNatural spline fit with df=10\n(\n    so.Plot(daily, x='date', y='fitted_spline2', color=\"wday\")\n    .add(so.Line())\n    .add(so.Dots(color='.5'), y=\"n\")\n    .layout(size=(8.5, 6))\n    .facet(\"term\")\n    .share(x=False)\n    .layout(size=(12, 6))\n)\n\n\n\n\n\n\n\nNatural spline fit with df=5\n(\n    so.Plot(daily, x='date', y='fitted_spline', color=\"wday\")\n    .add(so.Line())\n    .add(so.Dots(color='.5'), y=\"n\")\n    .layout(size=(8.5, 6))\n    .facet(\"term\")\n    .share(x=False)\n    .layout(size=(12, 6))\n)"
  },
  {
    "objectID": "contents/modelling2.html#연습문제",
    "href": "contents/modelling2.html#연습문제",
    "title": "Model building II",
    "section": "연습문제",
    "text": "연습문제\n\nWithout interactions: what would you expect the model n ~ wday + ns(date, 5)to look like? Knowing what you know about the data, why would you expect it to be not particularly effective?\n\n다음과 같은 Interaction이 있는 모델과 없는 모델을 비교하기 위해 residual plot을 함께 그려본 후 interaction이 없는 모델에서 상대적으로 어떻게 예측이 다른지 살펴보세요.\nmod5 = sm.OLS.from_formula(\"n ~ wday\", data=daily).fit()\nmod6 = sm.OLS.from_formula(\"n ~ wday * term\", data=daily).fit()\n\nWhat happens if you fit a day of week effect that varies by month (i.e. n ~ wday * month)? Why is this not very helpful?\n\nn ~ wday * month를 이용해 모델을 세워보고, 이 모델이 어떤 문제를 가지고 있는지 살펴보세요.\n즉, 위의 예제에서는 term을 이용 (3개의 변수)하여 요일의 효과를 분리하였는데, month를 이용 (12개의 변수를 요구)하여 요일의 효과를 분리하는 것이 의미있을까?"
  },
  {
    "objectID": "contents/pandas.html",
    "href": "contents/pandas.html",
    "title": "NumPy and pandas",
    "section": "",
    "text": "Load Packages\n# numerical calculation & data frames\nimport numpy as np\nimport pandas as pd\n\n# visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport seaborn.objects as so\nimport plotly.express as px\n\n# statistics\nimport statsmodels.api as sm\nNumpy & pandas\nPython 언어는 수치 계산을 위해 디자인되지 않았기 때문에, 데이터 분석에 대한 효율적이고 빠른 계산이 요구되면서 C/C++이라는 언어로 구현된 NumPy (Numerical Python)가 탄생하였고, Python 생태계 안에 통합되었음. 기본적으로 Python 언어 안에 새로운 언어라고 볼 수 있음. 데이터 사이언스에서의 대부분의 계산은 NumPy의 ndarray (n-dimensioal array)와 수학적 operator들을 통해 계산됨.\n데이터 사이언스가 발전함에 따라 단일한 floating-point number들을 성분으로하는 array들의 계산에서 벗어나 칼럼별로 다른 데이터 타입(string, integer, object..)을 포함하는 tabular형태의 데이터를 효율적으로 처리해야 할 필요성이 나타났고, 이를 다룰 수 있는 새로운 언어를 NumPy 위에 개발한 것이 pandas임. 이는 기본적으로 Wes Mckinney에 의해 독자적으로 개발이 시작되었으며, 디자인적으로 불만족스러운 점이 지적되고는 있으나 데이터 사이언스의 기본적인 언어가 되었음.\nNumPy와 pandas에 대한 자세한 내용은 Python for Data Analysis by Wes MacKinney 참고\n특히, NumPy는 Ch.4 & appendices"
  },
  {
    "objectID": "contents/pandas.html#numpy",
    "href": "contents/pandas.html#numpy",
    "title": "NumPy and pandas",
    "section": "NumPy",
    "text": "NumPy\n\n수학적 symbolic 연산에 대한 구현이라고 볼 수 있으며,\n행렬(matrix) 또는 벡터(vector)를 ndarray (n-dimensional array)이라는 이름으로 구현함.\n\n사실상 정수(int)나 실수(float)의 한가지 타입으로 이루어짐.\n\n고차원의 arrays 가능\n\nSource: Medium.com\n\n\n가령, 다음과 같은 행렬 연산이 있다면,\n\\(\\begin{bmatrix}1 & 2 \\\\ 3 & 4 \\\\ 5 & 6 \\end{bmatrix} \\begin{bmatrix}2 \\\\ -1 \\end{bmatrix} = \\begin{bmatrix}0 \\\\ 2 \\\\ 4 \\end{bmatrix}\\)\n\n\nA = np.array([[1, 2],\n              [3, 4],\n              [5, 6]]) # 3x2 matrix\nX = np.array([[2],\n              [-1]]) # 2x1 matrix\n\nA @ X  # A * X : matrix multiplication\n\narray([[0],\n       [2],\n       [4]])\n\n\n\nA.dot(X)\n\narray([[0],\n       [2],\n       [4]])\n\n\nVector vs. Matrix\n\nprint(np.array([0, 2, 4])) # 1-dim matrix: vector\nprint(np.array([0, 2, 4]).reshape(3, 1)) # 3x1 matrix\n\n[0 2 4]\n[[0]\n [2]\n [4]]\n\n\n\narr = np.array([0, 2, 4])\narr.reshape(3, -1).T\n\narray([[0, 2, 4]])\n\n\n\nX2 = np.array([2, -1])\nA @ X2  # same as A.dot(X2)\n\narray([0, 2, 4])\n\n\n\nprint(A.shape)\nprint(A.ndim)\nprint(A.dtype)\n\n(3, 2)\n2\nint64\n\n\n\nA + A # element-wise addition\n\narray([[ 2,  4],\n       [ 6,  8],\n       [10, 12]])\n\n\n\n2 * A - 1 # braodcasting\n\narray([[ 1,  3],\n       [ 5,  7],\n       [ 9, 11]])\n\n\n\nnp.exp(A) # element-wise\n\narray([[  2.72,   7.39],\n       [ 20.09,  54.6 ],\n       [148.41, 403.43]])\n\n\n\nPython vs. NumPy\n\n2**31 + 1\n\n2147483649\n\n\n\na = np.array([2**31-1], dtype='int32')\na + 1\n\narray([-2147483648], dtype=int32)\n\n\n\nSource: Ch.4 in Python for Data Analysis (3e) by Wes McKinney"
  },
  {
    "objectID": "contents/pandas.html#pandas",
    "href": "contents/pandas.html#pandas",
    "title": "NumPy and pandas",
    "section": "pandas",
    "text": "pandas\nSeries & DataFrame\n\nSeries\n1개의 칼럼으로 이루어진 데이터 포멧 - DataFrame의 각 칼럼들을 Series로 이해할 수 있음\n\nSource: Practical Data Science\n\n\nDataFrame\n각 칼럼들이 한 가지 데이터 타입으로 이루어진 tabular형태 (2차원)의 데이터 포맷\n\n각 칼럼은 기본적으로 한 가지 데이터 타입인 것이 이상적이나, 다른 타입이 섞여 있을 수 있음\nNumPy의 2차원 array의 각 칼럼에 labels을 부여한 것으로 볼 수도 있으나, 여러 다른 기능들이 추가됨\nNumPy의 경우 고차원의 array를 다룰 수 있음: ndarray\n\n고차원의 DataFrame과 비슷한 것은 xarray가 존재\n\nLabels와 index를 제외한 데이터 값은 거의 NumPy ndarray로 볼 수 있음\n(pandas.array 존재)\n\n\nSource: Practical Data Science\n\n\nndarray <> DataFrame\n\ndf = pd.DataFrame(A, columns=[\"A1\", \"A2\"])\ndf\n\n   A1  A2\n0   1   2\n1   3   4\n2   5   6\n\n\n\n# 데이터 값들은 NumPy array\ndf.values # 또는 df.to_numpy()\n\narray([[1, 2],\n       [3, 4],\n       [5, 6]])\n\n\n\ntype(df)\n\npandas.core.frame.DataFrame\n\n\n\n\nColumns\nSeries로 추출\n\ns = df[\"A1\"] # A1 칼럼 선택\ns\n# DataFrame의 column 이름이 Series의 name으로 전환\n\n0    1\n1    3\n2    5\nName: A1, dtype: int64\n\n\n\ntype(s)\n\npandas.core.series.Series\n\n\n\n\n\n\n\n\nA DataFrame with a single column\n\n\n\n\n\ndf[[\"A1\"]] # double brackets\n\n\n\n\n\n\n\n\n\nIndex objects\n\nframe = pd.DataFrame(np.arange(6).reshape((2, 3)),\n                     index=pd.Index([\"Ohio\", \"Colorado\"], name=\"state\"),\n                     columns=pd.Index([\"one\", \"two\", \"three\"], name=\"number\"))\nframe\n\n\n\nnumber    one  two  three\nstate                    \nOhio        0    1      2\nColorado    3    4      5\n\n\n\n\n\nframe.index\n\nIndex(['Ohio', 'Colorado'], dtype='object', name='state')\n\n\n\nframe.columns # columns도 index object\n\nIndex(['one', 'two', 'three'], dtype='object', name='number')\n\n\n\n\n\n\n\n\nNote\n\n\n\n“number”: columns의 이름 “state”: index의 이름\nframe.columns.name #> ‘number’\nframe.index.name #> ‘state’\n\n\n\nMulti-Index object\nIndex는 여러 levels을 지닐 수 있음\n\nframe.stack() # stack()은 long form으로 변환\n# 2 levels의 index를 가진 Series\n\nstate     number\nOhio      one       0\n          two       1\n          three     2\nColorado  one       3\n          two       4\n          three     5\ndtype: int64\n\n\n\n# MultiIndex를 직접 구성\npd.DataFrame(np.arange(12).reshape((4, 3)),\n        index=pd.MultiIndex.from_arrays([[\"a\", \"a\", \"b\", \"b\"], [1, 2, 1, 2]], names=[\"idx1\", \"idx2\"]),\n        columns=pd.MultiIndex.from_arrays([[\"Ohio\", \"Ohio\", \"Colorado\"], [\"Green\", \"Red\", \"Green\"]], names=[\"state\", \"color\"]))\n\nstate      Ohio     Colorado\ncolor     Green Red    Green\nidx1 idx2                   \na    1        0   1        2\n     2        3   4        5\nb    1        6   7        8\n     2        9  10       11\n\n\n\n\nTime Series\nIndex는 times series에 특화\n\nfb = pd.read_csv('data/fb_stock_prices_2018.csv', index_col='date', parse_dates=True)\nfb.head()\n\n             open   high    low  close    volume\ndate                                            \n2018-01-02 177.68 181.58 177.55 181.42  18151903\n2018-01-03 181.88 184.78 181.33 184.67  16886563\n2018-01-04 184.90 186.21 184.10 184.33  13880896\n2018-01-05 185.59 186.90 184.93 186.85  13574535\n2018-01-08 187.20 188.90 186.33 188.28  17994726\n\n\n\nfb.plot(kind='line', y=['high', 'low'], figsize=(7, 4), title='Facebook Stock 2018')\nplt.show()\n\n\n\n\nindex없이 분석 가능?\nindex의 활용은 강의 후반부에…\nIndex를 column으로 전환시켜 분석할 수 있음: .reset_index()\n\nfb.reset_index()\n\n          date   open   high    low  close    volume\n0   2018-01-02 177.68 181.58 177.55 181.42  18151903\n1   2018-01-03 181.88 184.78 181.33 184.67  16886563\n2   2018-01-04 184.90 186.21 184.10 184.33  13880896\n..         ...    ...    ...    ...    ...       ...\n248 2018-12-27 132.44 134.99 129.67 134.52  31202509\n249 2018-12-28 135.34 135.92 132.20 133.20  22627569\n250 2018-12-31 134.45 134.64 129.95 131.09  24625308\n\n[251 rows x 6 columns]\n\n\n반대로 column을 index로 전환: .set_index(\"column\")\n\nfb.reset_index().set_index(\"date\")\n\n             open   high    low  close    volume\ndate                                            \n2018-01-02 177.68 181.58 177.55 181.42  18151903\n2018-01-03 181.88 184.78 181.33 184.67  16886563\n2018-01-04 184.90 186.21 184.10 184.33  13880896\n...           ...    ...    ...    ...       ...\n2018-12-27 132.44 134.99 129.67 134.52  31202509\n2018-12-28 135.34 135.92 132.20 133.20  22627569\n2018-12-31 134.45 134.64 129.95 131.09  24625308\n\n[251 rows x 5 columns]\n\n\n\n\n\n\nDataFrame의 연산\nNumPy의 ndarray들이 연산되는 방식과 동일하게 series나 DataFrame들의 연산 가능함\n\ndf + 2 * df\n\n   A1  A2\n0   3   6\n1   9  12\n2  15  18\n\n\n\nnp.log(df)\n\n    A1   A2\n0 0.00 0.69\n1 1.10 1.39\n2 1.61 1.79\n\n\n사실 연산은 index를 align해서 시행됨\n\n\n\nnumber    one  two  three\nstate                    \nOhio        0    1      2\nColorado    3    4      5\n\n\nnumber  one  two  three\nstate                  \nOhio      0    2      4\nFloria    6    8     10\n\n\n\n\nframe1 + frame2\n\n\n\nnumber    one  two  three\nstate                    \nColorado  NaN  NaN    NaN\nFloria    NaN  NaN    NaN\nOhio     0.00 3.00   6.00\n\n\n\n\n\n(참고) Mixed Data Type\n\ns = pd.Series([1, 2, \"3\"])\n\n\ns.dtype\n\ndtype('O')\n\n\n\ns + s\n\n0     2\n1     4\n2    33\ndtype: object\n\n\n\ns_int = s.astype(\"int\")\ns_int + s_int\n\n0    2\n1    4\n2    6\ndtype: int64\n\n\n\ns2 = pd.Series([1, 2, 3.1])\ns2.dtype\n\ndtype('float64')\n\n\n\ns2.astype(\"int\")\n\n0    1\n1    2\n2    3\ndtype: int64"
  },
  {
    "objectID": "contents/pandas.html#missing",
    "href": "contents/pandas.html#missing",
    "title": "NumPy and pandas",
    "section": "Missing",
    "text": "Missing\nNaN, NA, None\npandas에서는 missing을 명명하는데 R의 컨벤션을 따라 NA (not available)라 부름.\n대부분의 경우에서 NumPy object NaN(np.nan)을 NA을 나타내는데 사용됨.\nnp.nan은 실제로 floating-point의 특정 값으로 float64 데이터 타입임. Integer 또는 string type에서 약간 이상하게 작동될 수 있음.\nPython object인 None은 pandas에서 NA로 인식함.\n현재 NA라는 새로운 pandas object 실험중임\nNA의 handling에 대해서는 교재 참고\n.dropna(), .fillna(), .isna(), .notna()\n\nMckinney’s: 7.1 Handling Missing Data,\n\nMollin’s: 3.5 Handling duplicate, missing, or invalid data\n\nWorking with missing data\n\n\ns = pd.Series([1, 2, np.nan])\ns\n\n0   1.00\n1   2.00\n2    NaN\ndtype: float64\n\n\n\ns.astype(\"Int64\") # <NA>\n\n0       1\n1       2\n2    <NA>\ndtype: Int64\n\n\n\ns = pd.Series([\"a\", \"b\", np.nan])\ns\n\n0      a\n1      b\n2    NaN\ndtype: object\n\n\n\ns.astype(\"string\") # <NA>\n\n0       a\n1       b\n2    <NA>\ndtype: string\n\n\n\ns = pd.Series([1, 2, np.nan, None])\ns\n\n0   1.00\n1   2.00\n2    NaN\n3    NaN\ndtype: float64\n\n\n\ns.isna() # or s.isnull()\n\n0    False\n1    False\n2     True\n3     True\ndtype: bool\n\n\n\ns.notna() # or s.notnull()\n\n0     True\n1     True\n2    False\n3    False\ndtype: bool\n\n\n\n\n\n\n\n\nNote\n\n\n\nPython object인 None의 경우\nNone == None\n#> True\nNumPy object인 np.nan의 경우\nnp.nan == np.nan\n#> False"
  },
  {
    "objectID": "contents/pandas.html#attributes",
    "href": "contents/pandas.html#attributes",
    "title": "NumPy and pandas",
    "section": "Attributes",
    "text": "Attributes\n자주 사용되는 attributes;\nSeries objects: name, dtype, shape, index, values\nIndex objects: name, dtype, shape, values, is_unique\nDataFrame objects: dtype, shape, index, columns, values"
  },
  {
    "objectID": "contents/pandas.html#creating-dataframes",
    "href": "contents/pandas.html#creating-dataframes",
    "title": "NumPy and pandas",
    "section": "Creating DataFrames",
    "text": "Creating DataFrames\nDataFrame을 만드는 방식에 대해서는\nMckinney’s: 5.1 Introduction to pandas Data Structures"
  },
  {
    "objectID": "contents/pivot.html",
    "href": "contents/pivot.html",
    "title": "Pivot",
    "section": "",
    "text": "Load Packages\n# numerical calculation & data frames\nimport numpy as np\nimport pandas as pd\n\n# visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport seaborn.objects as so\n\n# statistics\nimport statsmodels.api as sm\nTidy data의 요건\n아래의 데이터는 모두 같은 4가지 정보, country, year, cases, population을 담고 있으나 table1만 tidy\n기본적으로 table1의 형태일 때, 효과적으로 데이터를 다룰 수 있음"
  },
  {
    "objectID": "contents/pivot.html#long-form",
    "href": "contents/pivot.html#long-form",
    "title": "Pivot",
    "section": "Long Form",
    "text": "Long Form\nmelt()\nstack(): index에 적용\n\ntable4a\n\n       country    1999    2000\n0  Afghanistan     745    2666\n1       Brazil   37737   80488\n2        China  212258  213766\n\n\n\n\ntable4a.melt(id_vars=\"country\")  # pd.melt(table4a, id_vars=\"country\")\n\n       country variable   value\n0  Afghanistan     1999     745\n1       Brazil     1999   37737\n2        China     1999  212258\n3  Afghanistan     2000    2666\n4       Brazil     2000   80488\n5        China     2000  213766\n\n\n\ntable4a_long = table4a.melt(id_vars=\"country\", var_name=\"year\", value_name=\"cases\")\ntable4a_long\n\n       country  year   cases\n0  Afghanistan  1999     745\n1       Brazil  1999   37737\n2        China  1999  212258\n3  Afghanistan  2000    2666\n4       Brazil  2000   80488\n5        China  2000  213766\n\n\n\n\n\n\n\n\nNote\n\n\n\nstack()은 index를 이용해 long form으로 변환시켜 줌\ntable4a.set_index(\"country\").stack()  # Series\n# country          \n# Afghanistan  1999       745\n#              2000      2666\n# Brazil       1999     37737\n#              2000     80488\n# China        1999    212258\n#              2000    213766\n# dtype: int64\n\ntable4a.set_index(\"country\").stack().unstack(level=0)\n# country  Afghanistan  Brazil   China\n# 1999             745   37737  212258\n# 2000            2666   80488  213766\n\n\n\ntable4b\n\n       country        1999        2000\n0  Afghanistan    19987071    20595360\n1       Brazil   172006362   174504898\n2        China  1272915272  1280428583\n\n\n\ntable4b_long = table4b.melt(\n    id_vars=\"country\", \n    var_name=\"year\", \n    value_name=\"population\", \n    value_vars=[\"1999\", \"2000\"] # specify value variables\n) \ntable4b_long\n\n       country  year  population\n0  Afghanistan  1999    19987071\n1       Brazil  1999   172006362\n2        China  1999  1272915272\n3  Afghanistan  2000    20595360\n4       Brazil  2000   174504898\n5        China  2000  1280428583\n\n\n\npd.merge(table4a_long, table4b_long) # keys: \"country\" & \"year\"\n\n       country  year   cases  population\n0  Afghanistan  1999     745    19987071\n1       Brazil  1999   37737   172006362\n2        China  1999  212258  1272915272\n3  Afghanistan  2000    2666    20595360\n4       Brazil  2000   80488   174504898\n5        China  2000  213766  1280428583"
  },
  {
    "objectID": "contents/pivot.html#wide-format",
    "href": "contents/pivot.html#wide-format",
    "title": "Pivot",
    "section": "Wide Format",
    "text": "Wide Format\npivot()\nunstack(): index에 적용\n\ntable2\n\n        country  year        type       count\n0   Afghanistan  1999       cases         745\n1   Afghanistan  1999  population    19987071\n2   Afghanistan  2000       cases        2666\n..          ...   ...         ...         ...\n9         China  1999  population  1272915272\n10        China  2000       cases      213766\n11        China  2000  population  1280428583\n\n[12 rows x 4 columns]\n\n\n\n\ntable2.pivot(index=[\"country\", \"year\"], columns=\"type\", values=\"count\")\n\ntype               cases  population\ncountry     year                    \nAfghanistan 1999     745    19987071\n            2000    2666    20595360\nBrazil      1999   37737   172006362\n            2000   80488   174504898\nChina       1999  212258  1272915272\n            2000  213766  1280428583\n\n\n\n\n\n\n\n\nNote\n\n\n\nunstack()은 index를 이용해 wide form으로 변환시켜 줌\n맨 안쪽 index level (level=2)에 default로 적용\ntable2.set_index([\"country\", \"year\", \"type\"]).unstack() \n#                    count            \n# type               cases  population\n# country     year                    \n# Afghanistan 1999     745    19987071\n#             2000    2666    20595360\n# Brazil      1999   37737   172006362\n#             2000   80488   174504898\n# China       1999  212258  1272915272\n#             2000  213766  1280428583\n\n\n\n\n\n\n\n\nNote\n\n\n\nstack(), unstack()에 대한 자세한 사항은 책을 참고: 8.3 Reshaping and Pivoting in McKinney’s"
  },
  {
    "objectID": "contents/pivot.html#separating-and-uniting",
    "href": "contents/pivot.html#separating-and-uniting",
    "title": "Pivot",
    "section": "Separating and uniting",
    "text": "Separating and uniting\n\ntable3\n\n       country  year               rate\n0  Afghanistan  1999       745/19987071\n1  Afghanistan  2000      2666/20595360\n2       Brazil  1999    37737/172006362\n3       Brazil  2000    80488/174504898\n4        China  1999  212258/1272915272\n5        China  2000  213766/1280428583\n\n\nrate에 있는 case와 population 정보를 분리\n\ntable3[\"rate\"].str.split(\"/\", expand=True)\n\n        0           1\n0     745    19987071\n1    2666    20595360\n2   37737   172006362\n3   80488   174504898\n4  212258  1272915272\n5  213766  1280428583\n\n\n\ntable3[[\"cases\", \"population\"]] = \\\n    table3.pop(\"rate\").str.split(\"/\", expand=True) # pop: 제거와 선택 동시\ntable3 \n\n       country  year   cases  population\n0  Afghanistan  1999     745    19987071\n1  Afghanistan  2000    2666    20595360\n2       Brazil  1999   37737   172006362\n3       Brazil  2000   80488   174504898\n4        China  1999  212258  1272915272\n5        China  2000  213766  1280428583\n\n\nyear를 앞 두자리와 뒤 두자리를 나눔\n\n\n\n\n\n\nNote\n\n\n\nRegular expression등의 string manipulation에 대해서는\n\nA Whirlwind Tour of Python by Jake VanderPlas\nPython for Data Analysis by Wes McKinney\n\n\n\n\n\ntable3[\"year\"].astype(\"string\").str.extract(r'(\\d{2})(\\d{2})')\n\n    0   1\n0  19  99\n1  20  00\n2  19  99\n3  20  00\n4  19  99\n5  20  00\n\n\n\ntable5 = table3.copy()\n\n\ntable5[[\"century\", \"year\"]] = table3[\"year\"].astype(\"string\").str.extract(r'(\\d{2})(\\d{2})')\n\n\ntable5\n\n       country year   cases  population century\n0  Afghanistan   99     745    19987071      19\n1  Afghanistan   00    2666    20595360      20\n2       Brazil   99   37737   172006362      19\n3       Brazil   00   80488   174504898      20\n4        China   99  212258  1272915272      19\n5        China   00  213766  1280428583      20\n\n\n다시 century와 year 합치기\n\ntable5[\"century\"].str.cat(table5[\"year\"])\n\n0    1999\n1    2000\n2    1999\n3    2000\n4    1999\n5    2000\nName: century, dtype: string"
  },
  {
    "objectID": "contents/plots.html",
    "href": "contents/plots.html",
    "title": "Plots",
    "section": "",
    "text": "source: R for Data Science\n\nTransform (데이터 변형)\n\n데이터의 변수들 중 일부를 선택하기\n필요한 부분를 필터링하기\n기존의 변수들로 새로운 변수 만들기\n요약자료를 계산하기\n\nVisualise (시각화)\n\n시각화를 통해 데이터가 품고 있는 정보를 파악하여 데이터에 대한 이해를 높임\n\nModel (모형)\n\n시각화와 데이터 변형의 두 가지를 병행하면서 호기심과 의구심을 갖고 연구자가 자신의 관심사에 답을 구하는 탐색적 분석을 하는 과정\n이 과정에서 모형을 세우고 데이터를 얼마나 잘 설명하는지를 살펴보고, 모형을 수정해 나가는 과정을 거침"
  },
  {
    "objectID": "contents/plots.html#first-steps",
    "href": "contents/plots.html#first-steps",
    "title": "Plots",
    "section": "First steps",
    "text": "First steps\n\n\nLoad packages\n# numerical calculation & data frames\nimport numpy as np\nimport pandas as pd\n\n# visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport seaborn.objects as so\nimport plotly.express as px\n\n# statistics\nimport statsmodels.api as sm\n\n\n\n\nOptions\n# pandas options\npd.options.display.precision = 2\npd.options.display.float_format = '{:.2f}'.format  # pd.reset_option('display.float_format')\npd.options.display.max_rows = 7\n\n# Numpy options\nnp.set_printoptions(precision = 2, suppress=True)\n\n\nData: Fuel economy data from 1999 to 2008 for 38 popular models of cars\n\n# import the dataset\nmpg_data = sm.datasets.get_rdataset(\"mpg\", \"ggplot2\")\nmpg = mpg_data.data\n\n\n# Description\nprint(mpg_data.__doc__)\n\n\nmpg\n\n\n\n\n\n  \n    \n      \n      manufacturer\n      model\n      displ\n      year\n      cyl\n      trans\n      drv\n      cty\n      hwy\n      fl\n      class\n    \n  \n  \n    \n      0\n      audi\n      a4\n      1.8\n      1999\n      4\n      auto(l5)\n      f\n      18\n      29\n      p\n      compact\n    \n    \n      1\n      audi\n      a4\n      1.8\n      1999\n      4\n      manual(m5)\n      f\n      21\n      29\n      p\n      compact\n    \n    \n      2\n      audi\n      a4\n      2.0\n      2008\n      4\n      manual(m6)\n      f\n      20\n      31\n      p\n      compact\n    \n    \n      3\n      audi\n      a4\n      2.0\n      2008\n      4\n      auto(av)\n      f\n      21\n      30\n      p\n      compact\n    \n    \n      4\n      audi\n      a4\n      2.8\n      1999\n      6\n      auto(l5)\n      f\n      16\n      26\n      p\n      compact\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      229\n      volkswagen\n      passat\n      2.0\n      2008\n      4\n      auto(s6)\n      f\n      19\n      28\n      p\n      midsize\n    \n    \n      230\n      volkswagen\n      passat\n      2.0\n      2008\n      4\n      manual(m6)\n      f\n      21\n      29\n      p\n      midsize\n    \n    \n      231\n      volkswagen\n      passat\n      2.8\n      1999\n      6\n      auto(l5)\n      f\n      16\n      26\n      p\n      midsize\n    \n    \n      232\n      volkswagen\n      passat\n      2.8\n      1999\n      6\n      manual(m5)\n      f\n      18\n      26\n      p\n      midsize\n    \n    \n      233\n      volkswagen\n      passat\n      3.6\n      2008\n      6\n      auto(s6)\n      f\n      17\n      26\n      p\n      midsize\n    \n  \n\n234 rows × 11 columns\n\n\n\nQ: 엔진의 크기(displ)와 연비(hwy)는 어떤 관계에 있는가?\n\n# Scatter plot: 산포도\n(\n    so.Plot(mpg, x=\"displ\", y=\"hwy\") # empty plot을 생성하고, x, y축에 mapping할 mpg 데이터의 변수를 지정\n    .add(so.Dot()) # layer를 추가하여, points들을 Dot이라는 mark object를 써서 표현\n)\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nLayer-specific mappings\nglobal vs. local mapping\n다음과 같이 첫번째 layer 안에서 x, y를 mapping하는 경우, 이후 새로 추가되는 layer에는 그 mapping이 적용되지 않음\n(\n    so.Plot(mpg)\n    .add(so.Dot(), x=\"displ\", y=\"hwy\") # 이 layer에서만 mapping이 유효\n)\n\n\n\n\n\n\n\n\nTip\n\n\n\n다음과 같이 x, y를 생략하거나 간략히 할 수 있으나…\nso.Plot(mpg, \"displ\", \"hwy\").add(so.Dot())\n\n\n\n카테고리 변수인 경우\n\ncyl (실린더 개수), hwy (고속도로 연비)의 관계를 scatterplot으로 살펴볼 수 있는가? (left)\nclass (차량 타입), drv (전륜 구동, 후륜 구동, 4륜 구동 타입)의 관계는 어떠한가? (right)"
  },
  {
    "objectID": "contents/plots.html#aesthetic-mappings",
    "href": "contents/plots.html#aesthetic-mappings",
    "title": "Plots",
    "section": "Aesthetic mappings",
    "text": "Aesthetic mappings\nQ: 엔진의 크기와 연비와의 관계에서 보이는 트렌드 라인에서 심하게 벗어난 것이 있는가?\n\n\n\n\n\n 변수들을 x, y라는 position에 mapping하는 것에 추가하여 다음과 같은 속성(aesthetic)에 mapping할 수 있음\n색(color), 크기(pointsize), 모양(marker), 선 종류(linestyle), 투명도(alpha)\n\n\nColor\n\n(\n    so.Plot(mpg, x=\"displ\", y=\"hwy\", color=\"class\")\n    .add(so.Dot())\n)\n\n\n\n\n\n\nPointsize\n\n(\n    so.Plot(mpg, x=\"displ\", y=\"hwy\", pointsize=\"class\")\n    .add(so.Dot())\n)\n\n\n\n\n\n\nMarker\n\n(\n    so.Plot(mpg, x=\"displ\", y=\"hwy\", marker=\"class\")\n    .add(so.Dot())\n)\n\n\n\n\n\n\nAlpha\n\n(\n    so.Plot(mpg, x=\"displ\", y=\"hwy\", alpha=\"class\")\n    .add(so.Dot())\n)\n\n\n\n\n\n\nLinestyle\n\nhealthexp = sns.load_dataset(\"healthexp\")\n\np = so.Plot(healthexp, x=\"Spending_USD\", y=\"Life_Expectancy\", linestyle=\"Country\")\np.add(so.Line())\n\n\n\n\n\n\n두 가지 이상의 속성\nex. color & marker\n\n(\n    so.Plot(mpg, x=\"displ\", y=\"hwy\", color=\"class\", marker=\"drv\")\n    .add(so.Dot())\n)\n\n\n\n\n\n(\n    so.Plot(mpg, x=\"displ\", y=\"hwy\", color=\"class\", pointsize=\"drv\")\n    .add(so.Dot())\n    .scale(pointsize=(5, 15)) # pointsize의 range설정\n)\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n아래 그림에서처럼 연속 vs. 카테고리 변수 여부에 따라 다르게 작동\n\n\n\n\n\n\n\n\n\n(a) type of car\n\n\n\n\n\n\n\n(b) city miles per gallon\n\n\n\n\nFigure 1: Categorical vs. Continuous\n\n\n\n\n\n\n\n\nImportant\n\n\n\n어떤 속성을 어떤 변수에 할당하는 것이 적절한지를 선택하는 것이 기술\n예를 들어, 아래 두 플랏은 동일한 정보를 품고 있으나, 시각적 인식에 큰 차이를 만듦"
  },
  {
    "objectID": "contents/plots.html#setting-properties",
    "href": "contents/plots.html#setting-properties",
    "title": "Plots",
    "section": "Setting properties",
    "text": "Setting properties\nSetting properties vs. mapping properties (aesthetic)\n\n변수에 속성을 할당하는 것이 아니라, graphical objects (Marks)의 속성을 지정\nMarks (.Dot, .Line, .Bar, …) 마다 설정할 수 있는 속성이 다름\n주로 쓰이는 속성들: color, pointsize, alpha\n\n.Dot()의 경우\nclass seaborn.objects.Dot(artist_kws=, marker=<‘o’>, pointsize=<6>, stroke=<0.75>, color=<‘C0’>, alpha=<1>, fill=, edgecolor=, edgealpha=, edgewidth=<0.5>, edgestyle=<‘-’>)\n.Dots()의 경우\nclass seaborn.objects.Dots(artist_kws=, marker=<rc:scatter.marker>, pointsize=<4>, stroke=<0.75>, color=<‘C0’>, alpha=<1>, fill=, fillcolor=, fillalpha=<0.2>)\nAPI reference 참고\n\n\n\n\n\n\n\nTip\n\n\n\n다양한 Mark properties에 대해서는 홈페이지 참고\nProperties of Mark objects\n\n\n\n(\n    so.Plot(mpg, x=\"displ\", y=\"hwy\")\n    .add(so.Dot(color=\"deepskyblue\")) # Mark object 안에 지정!\n)\n\n\n\n\n\n(\n    so.Plot(mpg, x=\"displ\", y=\"hwy\")\n    .add(so.Dot(color=\"deepskyblue\", pointsize=12, edgecolor=\"white\", edgewidth=1)) # Mark object 안에 지정!\n)\n\n\n\n\n\n(\n    so.Plot(mpg, x=\"displ\", y=\"hwy\")\n    .add(so.Dot(color=\"orange\", pointsize=12, marker=\">\", alpha=.4)) # Mark object 안에 지정!\n)"
  },
  {
    "objectID": "contents/plots.html#faceting",
    "href": "contents/plots.html#faceting",
    "title": "Plots",
    "section": "Faceting",
    "text": "Faceting\n카테고리 변수들이 지니는 카테고리들(레벨)로 나누어 그리기\nData: palmerpenguins\n\n\n\n Artwork by @allison_horst\n\n\n\n\n\n\n\npenguins = sns.load_dataset(\"penguins\") # load a dataset: penguins\npenguins.head()\n\n  species     island  bill_length_mm  bill_depth_mm  flipper_length_mm   \n0  Adelie  Torgersen           39.10          18.70             181.00  \\\n1  Adelie  Torgersen           39.50          17.40             186.00   \n2  Adelie  Torgersen           40.30          18.00             195.00   \n3  Adelie  Torgersen             NaN            NaN                NaN   \n4  Adelie  Torgersen           36.70          19.30             193.00   \n\n   body_mass_g     sex  \n0      3750.00    Male  \n1      3800.00  Female  \n2      3250.00  Female  \n3          NaN     NaN  \n4      3450.00  Female  \n\n\n\n(\n    so.Plot(penguins, x=\"body_mass_g\", y=\"flipper_length_mm\")\n    .add(so.Dot(alpha=.5))\n    .facet(\"sex\") # 기본적으로 columns으로 나누어져 그림, wrap: column에 몇 개까지 그릴지\n)\n\n\n\n\n\np = (\n    so.Plot(penguins, x=\"body_mass_g\", y=\"flipper_length_mm\")\n    .facet(col=\"species\", row=\"sex\")\n    .add(so.Dot(alpha=.5))\n)\np\n\n\n\n\n\n# x, y축의 눈금을 일치할지 여부\np.share(x=False, y=True)\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nFacet과 Color 중 어떤 방식으로 표현하는 것이 유리한가? 밸런스를 잘 선택!\n\n\n\nleft = (\n    so.Plot(penguins, x=\"body_mass_g\", y=\"flipper_length_mm\")\n    .facet(col=\"species\")\n    .add(so.Dot(alpha=.5))\n)\nright = (\n    so.Plot(penguins, x=\"body_mass_g\", y=\"flipper_length_mm\", color=\"species\")\n    .add(so.Dot(alpha=.5))\n)\n\nbottom = (\n    so.Plot(penguins, x=\"body_mass_g\", y=\"flipper_length_mm\")\n    .facet(row=\"species\")\n    .add(so.Dot(alpha=.5))\n)\n\n\n\n\n\n\n\n\n(a) faceting horizonally\n\n\n\n\n\n\n\n(b) color mapping\n\n\n\n\n\n\n\n\n\n(c) faceting vertically\n\n\n\n\nFigure 2: faceting vs. color mapping\n\n\n\nPairing\nFaceting이 변수 내에 다른 레벨에 따라 그려지는데 반해,\nparing은 x, y축에 다른 변수를 지정하여 그림\n\n(\n    so.Plot(penguins, y=\"body_mass_g\", color=\"species\") # y축은 공유\n    .pair(x=[\"bill_length_mm\", \"bill_depth_mm\"]) # x축에 다른 변수를 mapping\n    .add(so.Dots()) # .Dots()! overploting에 유리. .Dot(alpha=.)로도 비슷\n)\n\n\n\n\nFacet & pair 동시\n\n(\n    so.Plot(penguins, y=\"body_mass_g\", color=\"sex\")\n    .pair(x=[\"bill_length_mm\", \"bill_depth_mm\"])\n    .facet(row=\"species\")\n    .add(so.Dots())\n)\n\n\n\n\n\n\nMultiple plots\n개발 중…? Matplotlib을 이용\n\nimport matplotlib as mpl\n\nf = mpl.figure.Figure(figsize=(8, 4))\nsf1, sf2 = f.subfigures(1, 2)\n(\n    so.Plot(penguins, x=\"body_mass_g\", y=\"flipper_length_mm\")\n    .add(so.Dots())\n    .on(sf1)\n    .plot()\n)\n(\n    so.Plot(penguins, x=\"bill_length_mm\", y=\"flipper_length_mm\")\n    .facet(row=\"sex\")\n    .add(so.Dots())\n    .on(sf2)\n    .plot()\n)\n\n\n\n\nSave plots\np.save(\"data/filename.png\") # p: a plot oject"
  },
  {
    "objectID": "contents/plots.html#geometric-objects",
    "href": "contents/plots.html#geometric-objects",
    "title": "Plots",
    "section": "Geometric objects",
    "text": "Geometric objects\n\nDot marks: Dot, Dots\nLine marks: Line, Lines, Path, Paths, Dash, Range\nBar marks: Bar, Bars\nFill marks: Area, Band\nText marks: Text"
  },
  {
    "objectID": "contents/plots.html#statistical-transformations",
    "href": "contents/plots.html#statistical-transformations",
    "title": "Plots",
    "section": "Statistical transformations",
    "text": "Statistical transformations\nAgg, Est, Count, Hist, KDE, Perc, PolyFit\n\n\n\n\n\n\nImportant\n\n\n\n위의 stats transform들을 이용하여 변형된 데이터 값을 geometric objects에 mapping하여 다양한 플랏을 그릴 수 있음\n원칙적으로는 직접 stats을 계산한 후에 그 데이터로 플랏을 그릴 수 있으나, 신속한 탐색적 분석을 위해 사용\n\n\n\n\n\n\n\n\nNote\n\n\n\n현재 seaborn.objects에서 다음 두 가지 중요한 statistical transformations이 제공되지 않고 있음\n\n(non-parametirc) fitted line을 보여주는 loess or GAM line\n분포의 간략한 summary인 boxplot\n\n이 부분에 대해서는 아래 몇 가지 대안이 있음: 그외에는 alternative plots 섹션 참고\n\n\n\n\n\n\n\n\nNote\n\n\n\nData에 fitted curve를 구하는 방식에는 여러 방법이 있음\n\nLinear fit: 1차 함수형태로 fit\nSmoothing fit\n\nPolynominal fit: n차 다항함수형태로 fit\nLoess/lowess: locally estimated/weighted scatterplot smoothing\nGAM: generalized additive model\nSpline: piece-wise polynominal regression\n\n\n나중에 좀 더 자세히 알아봄\n현재 seaborn.objects에서는 polynomial fit만 제공\n\n\n\nFitted lines\nseaborn.objects\n\nleft = (\n    so.Plot(mpg, x=\"displ\", y=\"hwy\")\n    .add(so.Dot())\n    .add(so.Line(), so.PolyFit(5)) # PolyFit(n): n차 다항식으로 fit\n)\n\nright = (\n    so.Plot(mpg, x=\"displ\", y=\"hwy\")\n    .add(so.Line(), so.PolyFit(5)) # PolyFit(n): n차 다항식으로 fit\n)\n\n\n\n\n\n\n\n\n(a) Scatterplot + trendline\n\n\n\n\n\n\n\n(b) Trendline only\n\n\n\n\nFigure 3: 데이터로부터 계산을 한 후 플랏이 그려짐\n\n\n\nleft = (\n    so.Plot(mpg, x=\"displ\", y=\"hwy\", color=\"drv\") # color mapping이 이후 모든 layer에 적용\n    .add(so.Dot())\n    .add(so.Line(), so.PolyFit(5))\n)\n\nright = (\n    so.Plot(mpg, x=\"displ\", y=\"hwy\")\n    .add(so.Dot(), color=\"drv\") # color mapping이 이 layer에만 적용\n    .add(so.Line(), so.PolyFit(5))\n)\n\n\n\n\n\n\n\n\n(a) color가 모든 layers에 적용: global mapping\n\n\n\n\n\n\n\n(b) color가 두번째 layer에만 적용: local mapping\n\n\n\n\nFigure 4: Inherited mapping\n\n\n\n(\n    so.Plot(mpg, x=\"displ\", y=\"hwy\")\n    .add(so.Dot(), color=\"drv\")\n    .add(so.Line(), so.PolyFit(5), group=\"drv\") # color가 아닌 group으로 grouping\n)\n# 다항함수 fit의 특징 및 주의점\n\n\n\n\nLinear fit vs. smoothing fit:\n선형적인 트렌드에서 얼마나 벗어나는가?\n\n(\n    so.Plot(mpg, x=\"displ\", y=\"hwy\")\n    .add(so.Dot(color=\".6\"))\n    .add(so.Line(), so.PolyFit(5))\n    .add(so.Line(), so.PolyFit(1))\n)\n\n\n\n\n다른 대안으로는 plotly, seaborn; alternative plots 섹션 참고"
  },
  {
    "objectID": "contents/plots.html#seaborn.objects-요약",
    "href": "contents/plots.html#seaborn.objects-요약",
    "title": "Plots",
    "section": "Seaborn.objects 요약",
    "text": "Seaborn.objects 요약\n(\n    so.Plot(df, x=, y=, color=, ...)  # global mapping\n    .add(so.Dot(color=, pointsize=,...))  # mark object + setting properties\n    .add(so.Line(), x=, y=, color=, ...)  # local mapping\n    .add(so.Line(), so.Polyfit(5))  # 통계적으로 변환한 값을 Line plot으로 표현\n    .add(so.Bar(), so.Hist(stat=\"proportion\"))  # 통계적으로 변환한 값을 Bar plot로 표현\n    ...\n    .facet(col=, row=, wrap=) # 카테고리의 levels에 따라 나누어 표현\n)\n\nAesthetic mapping\n\n위치(position): x축, y축\n색(color), 크기(pointsize), 모양(marker), 선 종류(linestyle), 투명도(alpha)\nglobal vs. local mapping\n\nGeometric objects\n\nDot marks: Dot, Dots\nLine marks: Line, Path, Dash, Range\nBar marks: Bar, Bars\nFill marks: Area, Band\nText marks: Text\n\nSetting properties\n\nMarks (.Dot(), .Line(), .Bar(), …) 내부에 속성을 지정하고, marks마다 설정할 수 있는 속성이 다름.\n주로 쓰이는 속성들: color, pointsize, alpha\n\nStatistical transformations\n\n변수들을 통계적 변환 후 그 값을 이용\nAgg, Est, Count, Hist, KDE, Perc, PolyFit\n\nFaceting: 카테고리 변수들의 levels에 따라 나누어 그림"
  },
  {
    "objectID": "contents/plots.html#visualizing-distributions",
    "href": "contents/plots.html#visualizing-distributions",
    "title": "Plots",
    "section": "Visualizing distributions",
    "text": "Visualizing distributions\n분포를 살펴보는데 변수가 연속인지 카테고리인지에 따라 다른 방식\n\nA categorical variable\n\ntips = sns.load_dataset(\"tips\")\ntips.info()\n\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 244 entries, 0 to 243\nData columns (total 7 columns):\n #   Column      Non-Null Count  Dtype   \n---  ------      --------------  -----   \n 0   total_bill  244 non-null    float64 \n 1   tip         244 non-null    float64 \n 2   sex         244 non-null    category\n 3   smoker      244 non-null    category\n 4   day         244 non-null    category\n 5   time        244 non-null    category\n 6   size        244 non-null    int64   \ndtypes: category(4), float64(2), int64(1)\nmemory usage: 7.4 KB\n\n\n\n(\n    so.Plot(tips, x=\"day\")\n    .add(so.Bar(), so.Count()) # category type의 변수는 순서가 존재. 그렇지 않은 경우 알바벳 순서로 \n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n복잡한 통계치의 경우 직접 구한후 plot을 그리는 것이 용이\ncount_day = tips[[\"day\"]].value_counts(normalize=True).reset_index(name=\"pct\")\n#     day  pct\n# 0   Sat 0.36\n# 1   Sun 0.31\n# 2  Thur 0.25\n# 3   Fri 0.08\n(\n    so.Plot(count_day, x=\"day\", y=\"pct\")\n    .add(so.Bar())\n)\n\n\n\npenguins = sns.load_dataset(\"penguins\") # load a dataset: penguins\n\n# Species에 inherent order가 없음; 알파벳 순으로 정렬\n(\n    so.Plot(penguins, x=\"species\")\n    .add(so.Bar(), so.Count())\n)\n\n\n\n\n\n\n\n\n\n(\n    so.Plot(penguins, x=\"species\")\n    .add(so.Bar(), so.Hist(\"proportion\"))  # Hist()의 default는 stat=\"count\"\n    .layout(size=(4.5, 3.5))\n)\n\n# grouping의 처리에 대해서는 뒤에... 에를 들어, color=\"sex\"\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\n표시 순서를 변경하는 일은 의미있는 플랏을 만드는데 중요\n나중에 좀 더 자세히 다룸\n\n\n\n# value_counts()는 크기대로 sorting!\ncl = penguins[\"species\"].value_counts().index.values\n#> array(['Adelie', 'Gentoo', 'Chinstrap'], dtype=object)\n\n(\n    so.Plot(penguins, x=\"species\")\n    .add(so.Bar(), so.Count())\n    .scale(x=so.Nominal(order=cl)) # x축의 카테고리 순서를 변경\n)\n\n# 직접 개수를 구해 그리는 경우, 테이블의 순서대로 그려짐\n(\n    so.Plot(penguins[\"species\"].value_counts().reset_index(), \n            x=\"species\", y=\"count\")\n    .add(so.Bar())\n)\n\n\n\n\n\n\n\n\n\n\nA numerical variable\n\n(\n    so.Plot(penguins, x=\"body_mass_g\")\n    .add(so.Bars(), so.Hist()) # Histogram; x값을 bins으로 나누어 count를 계산!\n    # .Bars()는 .Bar()에 비해 연속변수에 더 적합: 얇은 경계선으로 나란히 붙혀서 그려짐\n)\n\n\n\n\n\n\n\n\n\nleft = (\n    so.Plot(penguins, x=\"body_mass_g\")\n    .add(so.Bars(), so.Hist(binwidth=100)) # binwidth vs. bins\n)\nright = (\n    so.Plot(penguins, x=\"body_mass_g\")\n    .add(so.Bars(), so.Hist(bins=10)) # binwidth vs. bins\n)\n\n\n\n\n\n\n\n\n(a) binwidth=2\n\n\n\n\n\n\n\n(b) bins=5\n\n\n\n\nFigure 5: binwidth vs. bins\n\n\n\n(\n    so.Plot(penguins, x=\"body_mass_g\")\n    .add(so.Bars(), so.Hist(\"proportion\")) # 비율을 계산; stat=\"count\"가 default\n)\n\n\n\n\n\n\n\n\n\n# Density plot: 넓이가 1이 되도록\n(\n    so.Plot(penguins, x=\"body_mass_g\")\n    .add(so.Area(), so.KDE()) # Density plot\n)\n\n\n\n\n\n\n\n\n\n# Density plot: 넓이가 1이 되도록\n(\n    so.Plot(penguins, x=\"body_mass_g\")\n    .add(so.Line(color=\"orange\"), so.KDE(bw_adjust=.2)) # Density bandwidth: binwidth에 대응\n    .add(so.Bars(alpha=.3), so.Hist(\"density\", binwidth=100)) # stat=\"density\"\n)"
  },
  {
    "objectID": "contents/plots.html#visualizing-relationships",
    "href": "contents/plots.html#visualizing-relationships",
    "title": "Plots",
    "section": "Visualizing relationships",
    "text": "Visualizing relationships\n\nA numerical and a categorical variable\n\nBoxplot\nGrouped distribution: histogram, frequency polygon, density plot\n\nBoxplot\n\nsource: R for Data Science\n\n\nsns.boxplot(penguins, x=\"species\", y=\"body_mass_g\")\nplt.show() # 생략해도 무방\n\n\n\n\n\n\n\n\n\n(\n    so.Plot(penguins, x=\"species\", y=\"body_mass_g\")\n    .add(so.Dot(pointsize=8), so.Agg(\"median\")) # .Agg(): aggregation, default는 mean\n    .add(so.Range(), so.Est(\"median\", errorbar=(\"pi\", 50))) # .Range(): 기본 min/max range, .Est(): estimator\n)\n\n\n\n\n\n\n\n\n\n(\n    so.Plot(penguins, x=\"species\", y=\"body_mass_g\")\n    .add(so.Dots(color=\".5\"), so.Jitter()) # so.Jitter(): 흐트려뜨려 그리기\n    .add(so.Dot(pointsize=8), so.Agg(\"median\")) # .Agg(): aggregation, default는 mean\n    .add(so.Range(), so.Est(\"median\", errorbar=(\"pi\", 50))) # .Range(): 기본 min/max range, .Est(): estimator\n)\n\n\n\n\n\n\n\n\nError bars에 대해서는 seaborn/statistical estimation and error bars\n\n(\n    so.Plot(penguins, x=\"species\", y=\"body_mass_g\", color=\"sex\")\n    .add(so.Dots(), so.Jitter(), so.Dodge())\n    .add(so.Dot(pointsize=5), so.Agg(\"median\"), so.Dodge())\n    .add(so.Range(), so.Est(\"median\", errorbar=(\"pi\", 50)), so.Dodge())\n)\n\n\n\n\n\nsns.boxplot(penguins, x=\"species\", y=\"body_mass_g\", hue=\"sex\")\nplt.show() # 생략해도 무방\n\n\n\n\n\n\n\n\n\n# Build a boxplot!\ndef boxplot(df, x, y, color=None, alpha=0.1):\n    return (\n        so.Plot(df, x=x, y=y, color=color)\n        .add(so.Dots(alpha=alpha, color=\".8\"), so.Jitter(), so.Dodge())\n        .add(so.Range(), so.Est(\"median\", errorbar=(\"pi\", 50)), so.Dodge())\n        .add(so.Dots(pointsize=8, marker=\"<\"), so.Agg(\"median\"), so.Dodge())\n        .scale(color=\"Dark2\")\n        .theme({**sns.axes_style(\"whitegrid\")})\n    )\n(\n    boxplot(penguins, x=\"species\", y=\"flipper_length_mm\", color=\"sex\")\n    .facet(\"island\")\n    .layout(size=(8, 4))\n)\n\n\n\n\nHistogram\n\n(\n    so.Plot(penguins, x=\"body_mass_g\", color=\"species\")\n    .add(so.Bar(), so.Hist(binwidth=200, common_bins=False))  # bins을 공유하지 않도록\n)\n# Hist(): 다양한 parameter가 있음...\n\n\n\n\n\n\n\n\nFrequency polygon\n\n(\n    so.Plot(penguins, x=\"body_mass_g\", color=\"species\")\n    .add(so.Line(marker=\".\"), so.Hist(binwidth=200)) # Line에 maker \".\"을 표시\n)\n\n\n\n\n\n\n\n\n\n(\n    so.Plot(penguins, x=\"body_mass_g\", color=\"species\")\n    .add(so.Line(marker=\".\"), so.Hist(binwidth=200, stat=\"proportion\",  common_norm=False)) # Line에 maker \".\"을 표시\n)\n\n\n\n\n\n\n\n\nDensity plot\n\n(\n    so.Plot(penguins, x=\"body_mass_g\", color=\"species\")\n    .add(so.Area(), so.KDE(common_norm=False)) # Density plot, species별로 넓이가 1이 되도록\n)\n\n\n\n\n\n\n\n\n\n\nTwo categorical variables\n\np = so.Plot(penguins, x=\"island\", color=\"species\")\np.add(so.Bar(), so.Count()) # Bar() mark + Count() transformation\n\n\n\n\n\n\n\n\n\nleft = p.add(so.Bar(), so.Count(), so.Dodge()) # 나란히 표시\nright = p.add(so.Bar(), so.Count(), so.Stack()) # stacking\n\n\n\n\n\n\n\n\n(a) dodge\n\n\n\n\n\n\n\n(b) stack\n\n\n\n\nFigure 6: dodge vs. stack\n\n\n\n(\n    so.Plot(penguins, x=\"island\", y=\"body_mass_g\", color=\"species\")\n    .add(so.Dot(pointsize=20, marker=\"<\"), so.Agg(\"count\"))\n)\n\n\n\n\n\n\n\n\nCount 대신 proportion을 표시하는 경우\n\np.add(\n    so.Bar(width=.5), so.Hist(\"proportion\"), # proportion; stat=\"count\"로 하면 앞서 so.Count()와 동일\n    so.Stack() # stacking\n)\n\n\n\n\n\n\n\n\n\np.add(\n    so.Bar(width=.5), so.Hist(\"proportion\", common_norm=[\"x\"]), # proportion; \n    so.Stack() # stacking\n)\n\n\n\n\n\n\n\n\n\np.add(\n    so.Bar(width=.8), so.Hist(\"proportion\", common_norm=[\"x\", \"col\"]), # proportion\n    so.Stack(), # stacking\n).facet(col=\"sex\") # faceting\n\n\n\n\n\n\nTwo numerical variables\nScatterplot\n\n(\n    so.Plot(penguins, x=\"flipper_length_mm\", y=\"body_mass_g\")\n    .add(so.Dot())  # overplotting에는 so.Dots()가 유리 \n)\n\n\n\n\n\n\n\n\n\n\nThree or more variables\n\n(\n    so.Plot(penguins, x=\"flipper_length_mm\", y=\"body_mass_g\",\n            color=\"species\", marker=\"island\")\n    .add(so.Dot())\n    .layout(size=(6, 4))\n)\n\n\n\n\nFacet의 활용\n\n(\n    so.Plot(penguins, x=\"flipper_length_mm\", y=\"body_mass_g\",\n            color=\"species\")\n    .add(so.Dot(alpha=.5))\n    .facet(\"island\")\n    .layout(size=(8, 4))\n)\n\n\n\n\n\n\nTime series\n\nhealthexp = sns.load_dataset(\"healthexp\")\n\n(\n    so.Plot(healthexp, x=\"Year\", y=\"Spending_USD\", color=\"Country\")\n    .add(so.Lines())\n)\n\n\n\n\n\n(\n    so.Plot(healthexp, x=\"Year\", y=\"Life_Expectancy\")\n    .add(so.Line(alpha=.3), group=\"Country\", col=None)\n    .add(so.Line(linewidth=3))\n    .facet(\"Country\", wrap=3) # wrap!!!\n)\n\n\n\n\n\nfmri = sns.load_dataset(\"fmri\")\n\np = so.Plot(fmri, \"timepoint\", \"signal\", color=\"region\", linestyle=\"event\")\np.add(so.Line(), so.Agg())  # Agg()의 default 함수는 mean\n\n\n\n\n\np.add(so.Line(marker=\"o\", edgecolor=\"w\"), so.Agg(), linestyle=None)  # linestyle을 overwrite!"
  },
  {
    "objectID": "contents/plots.html#overploting",
    "href": "contents/plots.html#overploting",
    "title": "Plots",
    "section": "Overploting",
    "text": "Overploting\n대표적으로 다음과 같은 방식으로 해결할 수 있음.\n\nalpha property: 투명도를 조절\n\nso.Jitter() mark: 흐트려뜨려 그리기\n\nso.Dots() mark: 불투명, 테두리 선명한 점들\n\n.facet() facet: 다른 면에 그리기\n\n특별히 overplotting에 특화된 plots도 있음. 예를 들어,\n\nsns.catplot(\n    data=penguins, kind=\"swarm\",\n    x=\"species\", y=\"body_mass_g\", hue=\"sex\", col=\"island\",\n    aspect=.6\n)\nplt.show()\n\n\n\n\n\nsns.histplot(penguins, x=\"bill_depth_mm\", y=\"body_mass_g\")\nplt.show()"
  },
  {
    "objectID": "contents/plots.html#new-data",
    "href": "contents/plots.html#new-data",
    "title": "Plots",
    "section": "New data",
    "text": "New data\n새로운 데이터 값을 이용하고자 할 때, 직접 입력\n\nmpg_suv = mpg.query('`class` == \"suv\"')\n\n(\n    so.Plot(mpg, x=\"displ\", y=\"hwy\")\n    .add(so.Dot(), color=\"class\")\n    .add(so.Line(), so.PolyFit(5), \n         x=mpg_suv[\"displ\"], y=mpg_suv[\"hwy\"])\n)"
  },
  {
    "objectID": "contents/plots.html#exercises",
    "href": "contents/plots.html#exercises",
    "title": "Plots",
    "section": "Exercises",
    "text": "Exercises\n다음 데이터들로 위에서 다룬 시각화를 연습해보세요.\n\ntips\ntips = sns.load_dataset(\"tips\")\nData on houses in Saratoga County, New York, USA in 2006\nhouses_data = sm.datasets.get_rdataset(\"SaratogaHouses\", \"mosaicData\")\n\nhouses = houses_data.data # data\nprint(houses_data.__doc__) # documents"
  },
  {
    "objectID": "contents/seaborn.html",
    "href": "contents/seaborn.html",
    "title": "The seaborn.objects interface",
    "section": "",
    "text": "The seaborn.objects interface\nThe grammer of graphics의 데이터 시각화 이론을 잘 반영하고 있으며 아직 발전 중\n기존 seaborn modules을 완전히 대체하지는 못하므로 필요시 병행하여 사용\n\nv0.12.0 (September 2022)\nIntroduction of the objects interface\nThis release debuts the seaborn.objects interface, an entirely new approach to making plots with seaborn. It is the product of several years of design and 16 months of implementation work. The interface aims to provide a more declarative, composable, and extensible API for making statistical graphics. It is inspired by Wilkinson’s grammar of graphics, offering a Pythonic API that is informed by the design of libraries such as ggplot2 and vega-lite along with lessons from the past 10 years of seaborn’s development.\n\n\n\n\n\n\n\nCaution\n\n\n\nThe objects interface is currently experimental and incomplete. It is stable enough for serious use, but there certainly are some rough edges and missing features.\n\n\n\nThe seaborn.objects interface tutorial\nAPI reference"
  },
  {
    "objectID": "contents/setup.html",
    "href": "contents/setup.html",
    "title": "환경설정",
    "section": "",
    "text": "Conda Cheatsheet: 기본적인 conda 명령어 요약\n\n\nAnaconda보다는 기본 패키지들이 미리 설치되지 않는 miniconda를 추천: miniconda install page\n\nWindows 경우: 설치시 물어보는 “add Miniconda to your PATH variable” 옵션을 켜고 설치할 것\n\nShell 사용에 대해서는 아래 3. Command Line Tool 참고\n\n# Terminal (Mac) or Miniconda Powershell Prompt (Windows)\n\n#> conda info # 콘다 정보 \n#> conda update conda # 콘다 업데이트\n\n\n\n\nconda/managing channels\n다음을 통해 .condarc 환경파일에 configuration 추가\n\n#> conda config --add channels conda-forge\n#> conda config --set channel_priority strict  # 채널 순으로 검색, 버전 순이 아니고\n\n\n# 개별적으로 채널을 선택해서 install하려면\n#> conda install scipy --channel conda-forge\n\n# pakcage가 있는 채널들\n#> conda search scipy\n\nconda base에 있는 Python을 update하려면, 가령 3.10으로 업데이트하려면\n\n#> conda install python=3.10  # python update\n\n\n\n\nconda/user guide\n환경 생성: miniconda에서 자체 제공하는 가상환경으로 수업에서는 다른 가상환경 툴인 pyenv나 venv 사용하지 않음\n\n#$ conda create --name myenv\n\n# 특정 버전의 파이썬 설치시\n#> conda create --name myenv python=3.9\n\n환경 확인\n\n#$ conda env list\n\n#> conda environments:\n#>  base         */.../miniconda3\n#>                /.../miniconda3/envs/myenv\n\n환경 제거\n\n#> conda env remove --name myenv\n\n환경 activate/deactivate\n\n#> conda activate myenv\n#> conda deactivate  # activated 환경 내에서\n\n특정 환경 안의 파이썬 버전 확인\n\n#(myenv) python --version\n\n\n\n\n\n\n\nJupyter notebook을 쓰는 경우\n\n\n\n새로 만든 가상환경을 등록해줘야 함.\n#> ipython kernel install --user --name=myenv\n가상환경을 삭제해도 등록시킨 kernel 이름은 삭제되지 않으니 직접 삭제.\n등록된 커널 리스트를 확인\n#> jupyter kernelspec list\n커널 삭제\n#> jupyter kernelspec remove myenv\n\n\n\n\n\n\n# 특정 환경을 activate한 후\n#> conda install <package name1> <package name2> ...\n#> conda install --channel conda-forge <package name> # 특정 conda-forge 채널을 통한 설치\n\n# 제거\n#> conda remove <package name1> <package name2> ...\n\n# update\n#> conda update <package name1> <package name2> ...\n#> conda update --all # all packages\n\n# 패키지 리스트\n#> conda list\n\n\n# 환경 밖에서 특정 환경 안에 설치하려면 환경이름 추가\n#> conda install --name myenv <package name1>\n\n\n# pip을  이용한  패키지 설치: conda repository에 없는 패키지들을 설치하는 경우. 충돌의 우려 있음\n#> pip install <package name1> <package name2> ...\n\n\n# 환경 안에 다른 버전의 Python 설치하려면, 가령 python 3.9라면\n#> conda install python=3.9\n\n\n# 수업에 필요한 기본 패키지 설치\n#> conda install jupyter numpy pandas matplotlib seaborn\n#> conda install -c plotly plotly=5.13.0"
  },
  {
    "objectID": "contents/setup.html#vs-code-설치",
    "href": "contents/setup.html#vs-code-설치",
    "title": "환경설정",
    "section": "VS Code 설치",
    "text": "VS Code 설치\n개인마다 선호하는 text editor가 있으나 본 수업에서는 VS Code로 진행: download and install here"
  },
  {
    "objectID": "contents/setup.html#mac의-경우-기본-bash-shell인-terminal-대신-다음-zsh을-추천",
    "href": "contents/setup.html#mac의-경우-기본-bash-shell인-terminal-대신-다음-zsh을-추천",
    "title": "환경설정",
    "section": "Mac의 경우: 기본 bash shell인 terminal 대신 다음 zsh을 추천",
    "text": "Mac의 경우: 기본 bash shell인 terminal 대신 다음 zsh을 추천\nOh-My-Zsh!: 링크\n\n이 경우 miniconda 설치시 bash의 추가된 conda setup을 zsh로 가져와야 함: minconda를 zsh 설치 후에 설치하는 경우는 miniconda가 추가시키니 신경쓸 필요 없음\n\nhome directory에 있는 .bash_profile 을 열면 # >>> conda initialize >>> 로 시작해서 # <<< conda initialize <<< 부분까지를 복사한 후 .zshrc 파일을 열어 맨 뒤에 붙여넣음\n위 파일을 VS Code에서 쉽게 열어보려면 아래 그림처럼 VS Code에서 Sehll Command: Install 'Code' command in PATH 실행하고 나면\nshell 환경에서 code .zshrc를 실행하면 VS Code에서 편집할 수 있음"
  },
  {
    "objectID": "contents/setup.html#windows의-경우-windows-terminal-추천",
    "href": "contents/setup.html#windows의-경우-windows-terminal-추천",
    "title": "환경설정",
    "section": "Windows의 경우: Windows Terminal 추천",
    "text": "Windows의 경우: Windows Terminal 추천\n\n설치 링크는 구글링…\n명령프롬프트(CMD) vs. Powershell\nPowershell에서 conda를 사용하기 위해서는 몇 가지 설정 필요: 블로그 링크"
  },
  {
    "objectID": "contents/setup.html#extensions",
    "href": "contents/setup.html#extensions",
    "title": "환경설정",
    "section": "Extensions",
    "text": "Extensions\n\nPython\nPython Extension Pack 중\n\nIntelliCode\nPython Environment Manager\n\nDocs View"
  },
  {
    "objectID": "contents/setup.html#preferences",
    "href": "contents/setup.html#preferences",
    "title": "환경설정",
    "section": "Preferences",
    "text": "Preferences\n\nThemes\nFont, font size (notebook, results)"
  },
  {
    "objectID": "contents/setup.html#shortcuts",
    "href": "contents/setup.html#shortcuts",
    "title": "환경설정",
    "section": "Shortcuts",
    "text": "Shortcuts\nShow Command Palette: ctrl(cmd) + shift + p, 또는 F1\nCell 안과 밖\n\nundo/redo : ctrl(cmd) + z / ctrl(cmd) + shift + z\nalt(option) + arrow up/down : move\nalt(option) + shift + arrow up/down : copy\n\n실행: ctrl/shift/alt(option) + enter\nBasic editing 참고"
  },
  {
    "objectID": "contents/setup.html#그-외",
    "href": "contents/setup.html#그-외",
    "title": "환경설정",
    "section": "그 외",
    "text": "그 외\n\ninteractive mode\nexport\ndocs view\nvariables viewer, data viewer\nformatter\nsnippets"
  },
  {
    "objectID": "contents/sol1.html",
    "href": "contents/sol1.html",
    "title": "Transform 1 Sol",
    "section": "",
    "text": "Load Packages\n# numerical calculation & data frames\nimport numpy as np\nimport pandas as pd\n\n# visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport seaborn.objects as so\n\n# statistics\nimport statsmodels.api as sm"
  },
  {
    "objectID": "contents/sol1.html#a",
    "href": "contents/sol1.html#a",
    "title": "Transform 1 Sol",
    "section": "A",
    "text": "A\n\n# 1. Had an arrival delay of two or more hours\n# Load the nycflight13 dataset\nflights = sm.datasets.get_rdataset(\"flights\", \"nycflights13\").data.drop(columns=\"time_hour\")\n\n\nflights.query('arr_delay > 120').head(3)\n\n     year  month  day  dep_time  sched_dep_time  dep_delay  arr_time   \n119  2013      1    1    811.00             630     101.00   1047.00  \\\n151  2013      1    1    848.00            1835     853.00   1001.00   \n218  2013      1    1    957.00             733     144.00   1056.00   \n\n     sched_arr_time  arr_delay carrier  flight tailnum origin dest  air_time   \n119             830     137.00      MQ    4576  N531MQ    LGA  CLT    118.00  \\\n151            1950     851.00      MQ    3944  N942MQ    JFK  BWI     41.00   \n218             853     123.00      UA     856  N534UA    EWR  BOS     37.00   \n\n     distance  hour  minute  \n119       544     6      30  \n151       184    18      35  \n218       200     7      33  \n\n\n\n# 2. Flew to Houston (IAH or HOU)\nflights.query('dest == \"IAH\" | dest == \"HOU\"').head(3)\n\n    year  month  day  dep_time  sched_dep_time  dep_delay  arr_time   \n0   2013      1    1    517.00             515       2.00    830.00  \\\n1   2013      1    1    533.00             529       4.00    850.00   \n32  2013      1    1    623.00             627      -4.00    933.00   \n\n    sched_arr_time  arr_delay carrier  flight tailnum origin dest  air_time   \n0              819      11.00      UA    1545  N14228    EWR  IAH    227.00  \\\n1              830      20.00      UA    1714  N24211    LGA  IAH    227.00   \n32             932       1.00      UA     496  N459UA    LGA  IAH    229.00   \n\n    distance  hour  minute  \n0       1400     5      15  \n1       1416     5      29  \n32      1416     6      27  \n\n\n\n# 3. Departed in summer (July, August, and September)\nflights.query('month in [7, 8, 9]').head(3)\n\n        year  month  day  dep_time  sched_dep_time  dep_delay  arr_time   \n250450  2013      7    1      1.00            2029     212.00    236.00  \\\n250451  2013      7    1      2.00            2359       3.00    344.00   \n250452  2013      7    1     29.00            2245     104.00    151.00   \n\n        sched_arr_time  arr_delay carrier  flight tailnum origin dest   \n250450            2359     157.00      B6     915  N653JB    JFK  SFO  \\\n250451             344       0.00      B6    1503  N805JB    JFK  SJU   \n250452               1     110.00      B6     234  N348JB    JFK  BTV   \n\n        air_time  distance  hour  minute  \n250450    315.00      2586    20      29  \n250451    200.00      1598    23      59  \n250452     66.00       266    22      45  \n\n\n\n# 4. Arrived more than two hours late, but didn’t leave late\nflights.query('arr_delay > 120 & dep_delay <= 0').head(3)\n\n       year  month  day  dep_time  sched_dep_time  dep_delay  arr_time   \n22911  2013      1   27   1419.00            1420      -1.00   1754.00  \\\n33011  2013     10    7   1350.00            1350       0.00   1736.00   \n33019  2013     10    7   1357.00            1359      -2.00   1858.00   \n\n       sched_arr_time  arr_delay carrier  flight tailnum origin dest   \n22911            1550     124.00      MQ    3728  N1EAMQ    EWR  ORD  \\\n33011            1526     130.00      EV    5181  N611QX    LGA  MSN   \n33019            1654     124.00      AA    1151  N3CMAA    LGA  DFW   \n\n       air_time  distance  hour  minute  \n22911    135.00       719    14      20  \n33011    117.00       812    13      50  \n33019    192.00      1389    13      59  \n\n\n\n# 5. Were delayed by at least an hour, but made up over 30 minutes in flight\nflights.query('dep_delay > 60 & arr_delay - dep_delay < -30').head(5)\n\n      year  month  day  dep_time  sched_dep_time  dep_delay  arr_time   \n815   2013      1    1   2205.00            1720     285.00     46.00  \\\n832   2013      1    1   2326.00            2130     116.00    131.00   \n2286  2013      1    3   1503.00            1221     162.00   1803.00   \n2508  2013      1    3   1839.00            1700      99.00   2056.00   \n2522  2013      1    3   1850.00            1745      65.00   2148.00   \n\n      sched_arr_time  arr_delay carrier  flight tailnum origin dest  air_time   \n815             2040     246.00      AA    1999  N5DNAA    EWR  MIA    146.00  \\\n832               18      73.00      B6     199  N594JB    JFK  LAS    290.00   \n2286            1555     128.00      UA     551  N835UA    EWR  SFO    320.00   \n2508            1950      66.00      AA     575  N631AA    JFK  EGE    239.00   \n2522            2120      28.00      AA     177  N332AA    JFK  SFO    314.00   \n\n      distance  hour  minute  \n815       1085    17      20  \n832       2248    21      30  \n2286      2565    12      21  \n2508      1747    17       0  \n2522      2586    17      45  \n\n\n\n# 6. Departed between midnight and 6am (inclusive)\nflights.query('dep_time >= 0 & dep_time <= 600').head(3)\n\n   year  month  day  dep_time  sched_dep_time  dep_delay  arr_time   \n0  2013      1    1    517.00             515       2.00    830.00  \\\n1  2013      1    1    533.00             529       4.00    850.00   \n2  2013      1    1    542.00             540       2.00    923.00   \n\n   sched_arr_time  arr_delay carrier  flight tailnum origin dest  air_time   \n0             819      11.00      UA    1545  N14228    EWR  IAH    227.00  \\\n1             830      20.00      UA    1714  N24211    LGA  IAH    227.00   \n2             850      33.00      AA    1141  N619AA    JFK  MIA    160.00   \n\n   distance  hour  minute  \n0      1400     5      15  \n1      1416     5      29  \n2      1089     5      40  \n\n\n\n# 7. Find the fastest flights.\n(\n    flights.assign(speed=flights.distance / flights.air_time)\n    .sort_values(by=\"speed\", ascending=False)\n    .head(3)\n)\n\n        year  month  day  dep_time  sched_dep_time  dep_delay  arr_time   \n216447  2013      5   25   1709.00            1700       9.00   1923.00  \\\n251999  2013      7    2   1558.00            1513      45.00   1745.00   \n205388  2013      5   13   2040.00            2025      15.00   2225.00   \n\n        sched_arr_time  arr_delay carrier  flight tailnum origin dest   \n216447            1937     -14.00      DL    1499  N666DN    LGA  ATL  \\\n251999            1719      26.00      EV    4667  N17196    EWR  MSP   \n205388            2226      -1.00      EV    4292  N14568    EWR  GSP   \n\n        air_time  distance  hour  minute  speed  \n216447     65.00       762    17       0  11.72  \n251999     93.00      1008    15      13  10.84  \n205388     55.00       594    20      25  10.80  \n\n\n\n# 8. Sort flights to find the most delayed flights. Find the flights that left earliest.\nflights.sort_values(by=\"dep_delay\", ascending=False).head(3)\n\n        year  month  day  dep_time  sched_dep_time  dep_delay  arr_time   \n7072    2013      1    9    641.00             900    1301.00   1242.00  \\\n235778  2013      6   15   1432.00            1935    1137.00   1607.00   \n8239    2013      1   10   1121.00            1635    1126.00   1239.00   \n\n        sched_arr_time  arr_delay carrier  flight tailnum origin dest   \n7072              1530    1272.00      HA      51  N384HA    JFK  HNL  \\\n235778            2120    1127.00      MQ    3535  N504MQ    JFK  CMH   \n8239              1810    1109.00      MQ    3695  N517MQ    EWR  ORD   \n\n        air_time  distance  hour  minute  \n7072      640.00      4983     9       0  \n235778     74.00       483    19      35  \n8239      111.00       719    16      35  \n\n\n\nflights.sort_values(by=\"dep_delay\", ascending=True).head(3)\n\n        year  month  day  dep_time  sched_dep_time  dep_delay  arr_time   \n89673   2013     12    7   2040.00            2123     -43.00     40.00  \\\n113633  2013      2    3   2022.00            2055     -33.00   2240.00   \n64501   2013     11   10   1408.00            1440     -32.00   1549.00   \n\n        sched_arr_time  arr_delay carrier  flight tailnum origin dest   \n89673             2352      48.00      B6      97  N592JB    JFK  DEN  \\\n113633            2338     -58.00      DL    1715  N612DL    LGA  MSY   \n64501             1559     -10.00      EV    5713  N825AS    LGA  IAD   \n\n        air_time  distance  hour  minute  \n89673     265.00      1626    21      23  \n113633    162.00      1183    20      55  \n64501      52.00       229    14      40  \n\n\n\n# 9. Which flights travelled the farthest? \nflights.sort_values(by=\"distance\", ascending=False).head(3)\n\n        year  month  day  dep_time  sched_dep_time  dep_delay  arr_time   \n50676   2013     10   26   1004.00            1000       4.00   1435.00  \\\n108078  2013     12   28    933.00             930       3.00   1520.00   \n100067  2013     12   19    924.00             930      -6.00   1450.00   \n\n        sched_arr_time  arr_delay carrier  flight tailnum origin dest   \n50676             1450     -15.00      HA      51  N386HA    JFK  HNL  \\\n108078            1535     -15.00      HA      51  N384HA    JFK  HNL   \n100067            1535     -45.00      HA      51  N386HA    JFK  HNL   \n\n        air_time  distance  hour  minute  \n50676     608.00      4983    10       0  \n108078    633.00      4983     9      30  \n100067    609.00      4983     9      30  \n\n\n\n# Which travelled the shortest?\nflights.sort_values(by=\"distance\", ascending=True).head(3)\n\n        year  month  day  dep_time  sched_dep_time  dep_delay  arr_time   \n275945  2013      7   27       NaN             106        NaN       NaN  \\\n3083    2013      1    4   1240.00            1200      40.00   1333.00   \n16328   2013      1   19   1617.00            1617       0.00   1722.00   \n\n        sched_arr_time  arr_delay carrier  flight tailnum origin dest   \n275945             245        NaN      US    1632     NaN    EWR  LGA  \\\n3083              1306      27.00      EV    4193  N14972    EWR  PHL   \n16328             1722       0.00      EV    4616  N12540    EWR  PHL   \n\n        air_time  distance  hour  minute  \n275945       NaN        17     1       6  \n3083       30.00        80    12       0  \n16328      34.00        80    16      17  \n\n\n\n# 10. 각 도착지로 출항하는 항공편이 1년 중 몇 일 있는가?\n(\n    flights.groupby([\"month\", \"day\", \"dest\"])\n    .size()\n    .reset_index(name='n')\n    .groupby(\"dest\")\n    .size()\n)\n\ndest\nABQ    254\nACK    155\nALB    260\n      ... \nTVC     37\nTYS    322\nXNA    314\nLength: 105, dtype: int64\n\n\n\n# 11. 1년 중 300일 이상 출항하는 도착지들을 구하면?\n(\n    flights.groupby([\"month\", \"day\", \"dest\"])\n    .size()\n    .reset_index(name='n')\n    .groupby(\"dest\")\n    .size()\n    .reset_index(name=\"n\")\n    .query('n >= 300')\n)\n\n    dest    n\n4    ATL  365\n5    AUS  365\n10   BNA  365\n..   ...  ...\n101  TUL  314\n103  TYS  322\n104  XNA  314\n\n[78 rows x 2 columns]"
  },
  {
    "objectID": "contents/sol1.html#b.",
    "href": "contents/sol1.html#b.",
    "title": "Transform 1 Sol",
    "section": "B.",
    "text": "B.\n\n1.\n\n# 1. Our definition of cancelled flights (dep_delay or arr_delay is missing) is slightly suboptimal. Why? Which is the most important column?\n# 예를 들어, 출발지연은 missing이 아니나 도착지연은 missing인 것이 있음\nflights.query('dep_delay.isna() & ~arr_delay.isna()')[[\"dep_time\", \"arr_time\", \"dep_delay\", \"arr_delay\"]]\n\nEmpty DataFrame\nColumns: [dep_time, arr_time, dep_delay, arr_delay]\nIndex: []\n\n\n즉, 출발지연이 misssing이면 도착지연도 missing임.\n\nflights.query('~dep_delay.isna() & arr_delay.isna()')[[\"dep_time\", \"arr_time\", \"dep_delay\", \"arr_delay\"]]\n\n        dep_time  arr_time  dep_delay  arr_delay\n471      1525.00   1934.00      -5.00        NaN\n477      1528.00   2002.00      29.00        NaN\n615      1740.00   2158.00      -5.00        NaN\n...          ...       ...        ...        ...\n334495   1214.00   1801.00     -11.00        NaN\n335534   1734.00   2159.00      23.00        NaN\n335805    559.00       NaN      -1.00        NaN\n\n[1175 rows x 4 columns]\n\n\n출발지연은 missing이 아니나 도작지연은 missing인 것이 있음.\n아마도 도착지연이 missing인 경우는 결항은 아니고, 출발지연이 missing인 것이 결항된 항공편이라고 볼 수 있음. (출발지연이 missing이면 도착지연도 missing이므로)\n도착지연이 더 중요한 지표일 것임; 연결된 항공편을 놓칠 수 있기 때문에. 출발지연은 오히려 좋을 수도..\n\n\n2.\n\n# 2. Look at the number of cancelled flights per day. Is there a pattern? Is the proportion of cancelled flights related to the (daily) average delay?\n# 취소되는 항공편들이 많은 것과 관계 있는 것은 무엇이 있을까…\n\n\n# 출항한 항공편이 많을수록 결항편도 많음.. 당연? 선형관계?  >> 결항 비율로\ncancelled_per_day = (\n    flights.assign(\n        cancelled = lambda x: x.dep_delay.isna() | x.arr_delay.isna())\n    .groupby([\"month\", \"day\"])[\"cancelled\"]\n    .agg([\"sum\", \"count\"])  # sum(boolean) = True의 개수, mean(boolean) = True의 비율\n)\ncancelled_per_day.head(3)\n\n           sum  count\nmonth day            \n1     1     11    842\n      2     15    943\n      3     14    914\n\n\n\n(\n    so.Plot(cancelled_per_day.query('sum < 300'), x='count', y='sum')\n    .add(so.Dots())\n    .add(so.Line(), so.PolyFit(5))\n)\n\n\n\n\n\n# 항공기가 많이 지연될수록 결항비율도 큰가? 오래 지연될수록 뒤에 출발하는 항공편은 결항...\n\ndef get_delayed_positive(g):\n    return pd.Series([\n        g[\"cancelled\"].mean(),\n        g.query('dep_delay > 0')[\"dep_delay\"].mean(),\n        g.query('arr_delay > 0')[\"arr_delay\"].mean(),\n    ], index=[\"cancelled_prop\", \"avg_dep_delay\", \"avg_arr_delay\"])\n\ncancelled_and_delays = (\n    flights.assign(\n        cancelled = lambda x: x.dep_delay.isna() | x.arr_delay.isna())\n    .groupby([\"month\", \"day\"])\n    .apply(get_delayed_positive)\n)\n\ncancelled_and_delays\n\n           cancelled_prop  avg_dep_delay  avg_arr_delay\nmonth day                                              \n1     1              0.01          32.66          32.48\n      2              0.02          32.63          32.03\n      3              0.02          28.50          27.66\n...                   ...            ...            ...\n12    29             0.02          42.81          47.26\n      30             0.02          29.91          31.24\n      31             0.02          26.27          24.46\n\n[365 rows x 3 columns]\n\n\n\n(\n    so.Plot(cancelled_and_delays.query('cancelled_prop < .3'), x='avg_dep_delay', y='cancelled_prop')\n    .add(so.Dots(color=\".6\"))\n    .add(so.Line(), so.PolyFit(5))\n)\n\n\n\n\n\n(\n    so.Plot(cancelled_and_delays.query('cancelled_prop < 0.05'), x='avg_arr_delay', y='cancelled_prop')\n    .add(so.Dots(color=\".6\"))\n    .add(so.Line(), so.PolyFit(5))\n)\n\n\n\n\n\n\n3.\n\n# 3. What time of day should you fly if you want to avoid delays as much as possible?\n# 도착지연이 가장 적은 시간대는 언제인가?\n(\n    flights.groupby(\"sched_dep_time\")[\"arr_delay\"]\n    .mean()\n    .reset_index()\n    .sort_values(by=\"arr_delay\", ascending=True)\n    .head(7)\n)\n\n     sched_dep_time  arr_delay\n102             712     -35.35\n56              626     -30.00\n3               505     -26.50\n992            2208     -26.00\n6               516     -25.75\n26              555     -25.00\n27              557     -23.67\n\n\n\n# minus delay는 제외하고 도착지연의 평균을 구한다면,\n(\n    flights.groupby([\"sched_dep_time\"])[[\"arr_delay\"]]  # DataFrameGroupBy\n    .apply(lambda x: x.query(\"arr_delay > 0\").mean())\n    .sort_values(by=\"arr_delay\", ascending=True)\n    .head(7)\n)\n\n                arr_delay\nsched_dep_time           \n2133                 1.00\n712                  2.00\n534                  3.00\n1958                 4.00\n616                  6.67\n919                  6.73\n548                  6.78\n\n\n\ndef get_delayed_positive(g):\n    return pd.Series(\n        [\n            g.query(\"arr_delay > 0\")[\"arr_delay\"].median(),\n            g.query(\"arr_delay > 0\")[\"arr_delay\"].count(),\n            g[\"arr_delay\"].count(),\n        ],\n        index=[\"avg_arr_delay\", \"n\", \"n_total\"],\n    )\n\ntime_delay = (\n    flights.groupby([\"sched_dep_time\"])\n    .apply(get_delayed_positive)\n    .fillna(0)  # positive delay가 없는 경우, median은 NA; 0으로 채움\n    .reset_index()\n)\ntime_delay\n\n      sched_dep_time  avg_arr_delay      n  n_total\n0                106           0.00   0.00     0.00\n1                500           7.00  73.00   340.00\n2                501           0.00   0.00     1.00\n...              ...            ...    ...      ...\n1018            2355          12.00  36.00    73.00\n1019            2358          18.00  29.00    44.00\n1020            2359          18.00 413.00   810.00\n\n[1021 rows x 4 columns]\n\n\n\n\n\n\n\n\nTip\n\n\n\nflights[[\"arr_delay\"]].mean()  # return a Series\n# arr_delay   6.90\n# dtype: float64\n\nflights[\"arr_delay\"].mean()  # return a scalar\n# 6.90\n\n\n\n# 시각화해서 살펴보면,\n(\n    so.Plot(time_delay, x='sched_dep_time', y='avg_arr_delay')\n    .add(so.Dots())\n    .add(so.Line(), so.PolyFit(5))\n)\n\n\n\n\n\n# 이상치들은 샘플수가 작은가?\ntime_delay.sort_values(by=\"avg_arr_delay\", ascending=False).head(5)\n\n     sched_dep_time  avg_arr_delay    n  n_total\n128             738         126.00 2.00    15.00\n404            1214          99.00 6.00    52.00\n28              558          91.50 2.00     3.00\n991            2207          84.00 3.00     3.00\n762            1812          83.00 7.00    14.00\n\n\n\n\n4.\n\n# 4. For each destination, compute the total minutes of delay. For each flight, compute the proportion of the total delay for its destination.\n\n\n# For each destination, compute the total minutes of delay.\ntotal_delay = flights.groupby(\"dest\")[\"arr_delay\"].sum().reset_index(name=\"total_delay\")\ntotal_delay\n\n    dest  total_delay\n0    ABQ      1113.00\n1    ACK      1281.00\n2    ALB      6018.00\n..   ...          ...\n102  TVC      1232.00\n103  TYS     13912.00\n104  XNA      7406.00\n\n[105 rows x 2 columns]\n\n\n\n# For each flight, compute the proportion of the total delay for its destination.\n# Merge를 이용하면,\n(\n    flights.merge(total_delay, on=\"dest\")\n    .assign(prop_delay = lambda x: x.arr_delay / x.total_delay)\n    .sort_values([\"year\", \"month\", \"day\", \"hour\", \"minute\"])\n    .head(3)\n)\n\n      year  month  day  dep_time  sched_dep_time  dep_delay  arr_time   \n0     2013      1    1    517.00             515       2.00    830.00  \\\n1     2013      1    1    533.00             529       4.00    850.00   \n7198  2013      1    1    542.00             540       2.00    923.00   \n\n      sched_arr_time  arr_delay carrier  flight tailnum origin dest  air_time   \n0                819      11.00      UA    1545  N14228    EWR  IAH    227.00  \\\n1                830      20.00      UA    1714  N24211    LGA  IAH    227.00   \n7198             850      33.00      AA    1141  N619AA    JFK  MIA    160.00   \n\n      distance  hour  minute  total_delay  prop_delay  \n0         1400     5      15     30046.00        0.00  \n1         1416     5      29     30046.00        0.00  \n7198      1089     5      40      3467.00        0.01  \n\n\n\n# transform을 이용하면,\nflights[\"total_delay\"] = flights.groupby(\"dest\")[\"arr_delay\"].transform(\"sum\")\nflights.head(3)\n\n   year  month  day  dep_time  sched_dep_time  dep_delay  arr_time   \n0  2013      1    1    517.00             515       2.00    830.00  \\\n1  2013      1    1    533.00             529       4.00    850.00   \n2  2013      1    1    542.00             540       2.00    923.00   \n\n   sched_arr_time  arr_delay carrier  flight tailnum origin dest  air_time   \n0             819      11.00      UA    1545  N14228    EWR  IAH    227.00  \\\n1             830      20.00      UA    1714  N24211    LGA  IAH    227.00   \n2             850      33.00      AA    1141  N619AA    JFK  MIA    160.00   \n\n   distance  hour  minute  total_delay  \n0      1400     5      15     30046.00  \n1      1416     5      29     30046.00  \n2      1089     5      40      3467.00  \n\n\n\nflights.assign(prop_delay = lambda x: x.arr_delay / x.total_delay).head(3)\n\n   year  month  day  dep_time  sched_dep_time  dep_delay  arr_time   \n0  2013      1    1    517.00             515       2.00    830.00  \\\n1  2013      1    1    533.00             529       4.00    850.00   \n2  2013      1    1    542.00             540       2.00    923.00   \n\n   sched_arr_time  arr_delay carrier  flight tailnum origin dest  air_time   \n0             819      11.00      UA    1545  N14228    EWR  IAH    227.00  \\\n1             830      20.00      UA    1714  N24211    LGA  IAH    227.00   \n2             850      33.00      AA    1141  N619AA    JFK  MIA    160.00   \n\n   distance  hour  minute  total_delay  prop_delay  \n0      1400     5      15     30046.00        0.00  \n1      1416     5      29     30046.00        0.00  \n2      1089     5      40      3467.00        0.01  \n\n\n\n\n5.\n\n# 5. Find all destinations that are flown by at least two carriers. Use that information to rank the carriers.\n\nflights.groupby(\"dest\")[\"carrier\"].nunique()\n\ndest\nABQ    1\nACK    1\nALB    1\n      ..\nTVC    2\nTYS    2\nXNA    2\nName: carrier, Length: 105, dtype: int64\n\n\n\ndest_carrier = flights.copy()\ndest_carrier[\"carrier_n\"] = flights.groupby(\"dest\")[\"carrier\"].transform(\"nunique\")\n\ndest_carrier.query('carrier_n >= 2').head(3)\n\n   year  month  day  dep_time  sched_dep_time  dep_delay  arr_time   \n0  2013      1    1    517.00             515       2.00    830.00  \\\n1  2013      1    1    533.00             529       4.00    850.00   \n2  2013      1    1    542.00             540       2.00    923.00   \n\n   sched_arr_time  arr_delay carrier  flight tailnum origin dest  air_time   \n0             819      11.00      UA    1545  N14228    EWR  IAH    227.00  \\\n1             830      20.00      UA    1714  N24211    LGA  IAH    227.00   \n2             850      33.00      AA    1141  N619AA    JFK  MIA    160.00   \n\n   distance  hour  minute  carrier_n  \n0      1400     5      15          2  \n1      1416     5      29          2  \n2      1089     5      40          3  \n\n\n\n(\n    dest_carrier.query('carrier_n >= 2')\n    .groupby(\"carrier\")[\"dest\"]\n    .nunique()\n    .reset_index(name=\"n_dest\")\n    .assign(rank = lambda x: x.n_dest.rank(ascending=False, method=\"min\"))\n    .sort_values(\"rank\")\n)\n\n   carrier  n_dest  rank\n5       EV      51  1.00\n0       9E      48  2.00\n11      UA      42  3.00\n..     ...     ...   ...\n2       AS       1 14.00\n6       F9       1 14.00\n8       HA       1 14.00\n\n[16 rows x 3 columns]"
  },
  {
    "objectID": "contents/sol1.html#c.",
    "href": "contents/sol1.html#c.",
    "title": "Transform 1 Sol",
    "section": "C.",
    "text": "C.\n\n1.\n\n# 1. Which carrier has the worst arrival delays? Challenge: can you disentangle the effects of bad airports vs. bad carriers? Why/why not?\n\n\n# Total delay by carrier within each origin, dest\narr_delay = (\n    flights.groupby([\"carrier\", \"origin\", \"dest\"])[\"arr_delay\"]\n    .agg([\"mean\", \"count\"])\n    .rename(columns={\"mean\": \"arr_delay\", \"count\": \"flights\"})\n    .reset_index()\n)\narr_delay\n\n    carrier origin dest  arr_delay  flights\n0        9E    EWR  ATL      -6.25        4\n1        9E    EWR  CVG       1.40      796\n2        9E    EWR  DTW       2.54      220\n..      ...    ...  ...        ...      ...\n436      YV    LGA  CLT      12.86      258\n437      YV    LGA  IAD      18.92      278\n438      YV    LGA  PHL     -14.38        8\n\n[439 rows x 5 columns]\n\n\n\n# Total delay within each origin dest\narr_delay_total = (\n    arr_delay.groupby([\"origin\", \"dest\"])[[\"arr_delay\", \"flights\"]]\n    .sum()\n    .reset_index()\n    .rename(columns={\"arr_delay\": \"arr_delay_total\", \"flights\": \"flights_total\"})\n)\narr_delay_total\n\n    origin dest  arr_delay_total  flights_total\n0      EWR  ALB            14.40            418\n1      EWR  ANC            -2.50              8\n2      EWR  ATL            33.79           4876\n..     ...  ...              ...            ...\n221    LGA  TVC            31.75             73\n222    LGA  TYS             3.89            265\n223    LGA  XNA           125.96            709\n\n[224 rows x 4 columns]\n\n\n\n# using `transform` instead of `merge`\narr_delay[[\"arr_delay_total\", \"flights_total\"]] = \\\n    arr_delay.groupby([\"origin\", \"dest\"])[[\"arr_delay\", \"flights\"]].transform(\"sum\")\narr_delay\n\n    carrier origin dest  arr_delay  flights  arr_delay_total  flights_total\n0        9E    EWR  ATL      -6.25        4            33.79           4876\n1        9E    EWR  CVG       1.40      796            22.60           2513\n2        9E    EWR  DTW       2.54      220            88.35           3009\n..      ...    ...  ...        ...      ...              ...            ...\n436      YV    LGA  CLT      12.86      258            45.37           5961\n437      YV    LGA  IAD      18.92      278            30.48           1659\n438      YV    LGA  PHL     -14.38        8            -8.32            598\n\n[439 rows x 7 columns]\n\n\n\n# relative delay: average delay of each carrier - average delay of other carriers\narr_delay_relative = arr_delay.assign(\n    arr_delay_others_mean=lambda x: (x.arr_delay_total - x.arr_delay)\n    / (x.flights_total - x.flights),\n    arr_delay_mean=lambda x: x.arr_delay / x.flights,\n    arr_delay_diff=lambda x: x.arr_delay_mean - x.arr_delay_others_mean,\n)\narr_delay_relative\n\n    carrier origin dest  arr_delay  flights  arr_delay_total  flights_total  \\\n0        9E    EWR  ATL      -6.25        4            33.79           4876   \n1        9E    EWR  CVG       1.40      796            22.60           2513   \n2        9E    EWR  DTW       2.54      220            88.35           3009   \n..      ...    ...  ...        ...      ...              ...            ...   \n436      YV    LGA  CLT      12.86      258            45.37           5961   \n437      YV    LGA  IAD      18.92      278            30.48           1659   \n438      YV    LGA  PHL     -14.38        8            -8.32            598   \n\n     arr_delay_others_mean  arr_delay_mean  arr_delay_diff  \n0                     0.01           -1.56           -1.57  \n1                     0.01            0.00           -0.01  \n2                     0.03            0.01           -0.02  \n..                     ...             ...             ...  \n436                   0.01            0.05            0.04  \n437                   0.01            0.07            0.06  \n438                   0.01           -1.80           -1.81  \n\n[439 rows x 10 columns]\n\n\n\narr_delay_relative.groupby(\"carrier\")[\"arr_delay_diff\"].mean().sort_values(ascending=False)\n\ncarrier\nOO   28.79\nEV    5.35\nVX    1.83\n      ... \nDL   -1.72\nMQ   -5.25\nHA     NaN\nName: arr_delay_diff, Length: 16, dtype: float64\n\n\n\n\n2.\n\n# 2. Which plane (tailnum) has the worst on-time record?\n## on-time: 늦게 도착하지 않은 항공편의 횟수로 이해\n\n(\n    flights[flights[\"tailnum\"].notna()].assign(\n        on_time = lambda x: x.arr_delay <= 0 & x.arr_time.notna())\n    .groupby(\"tailnum\")[\"on_time\"]\n    .agg([\"mean\", \"count\"])\n    .sort_values(\"mean\")\n)\n\n         mean  count\ntailnum             \nN768SK    0.0      1\nN840MH    0.0      1\nN838AW    0.0      2\n...       ...    ...\nN357SW    1.0      8\nN524AS    1.0      9\nN834MH    1.0      1\n\n[4043 rows x 2 columns]\n\n\n\n# 극히 작은 운항횟수를 가진 비행기가 많음... : 제거\n\non_time = (\n    flights[flights[\"tailnum\"].notna()].assign(\n        on_time = lambda x: x.arr_delay <= 0 & x.arr_time.notna())\n    .groupby(\"tailnum\")[\"on_time\"]\n    .agg([\"mean\", \"count\"])\n    .sort_values(\"mean\")\n)\n\n(\n    so.Plot(on_time, x='count', y='mean')\n    .add(so.Dots(), so.Jitter(y=0.02))\n    .limit(x=(0, 100))\n)\n\n\n\n\n\non_time.query('count > 20').nlargest(3, \"mean\")\n\n         mean  count\ntailnum             \nN382HA   0.88     26\nN423AS   0.86     29\nN5EJAA   0.86     21\n\n\n\n## on-time: 도착 delay의 길이로 파악하는 경우\n\n(\n    flights.groupby(\"tailnum\")[\"arr_delay\"]\n    .agg([\"mean\", \"count\"])\n    .query(\"count > 20\")\n    .nlargest(3, \"mean\")\n)\n\n         mean  count\ntailnum             \nN203FR  59.12     41\nN645MQ  51.00     24\nN956AT  47.65     34\n\n\n\n\n3.\n\n# 3. Look at each destination. Can you find flights that are suspiciously fast? (i.e. flights that represent a potential data entry error).\n\n\nflights = flights.assign(\n    mph = lambda x: x.distance / x.air_time * 60\n)\n\n\n(\n    so.Plot(flights, x='distance')\n    .add(so.Line(), so.Hist(binwidth=10))\n)\n\n\n\n\n\n# 같은 루트를 비행하는 항공편들 안에서 특이점이라면 의심해 볼만함...\n\nstandardized = (\n    flights.groupby([\"origin\", \"dest\"])[\"air_time\"]\n    .agg([(\"air_time_mean\", \"mean\"), (\"air_time_std\", \"std\"), (\"n\", \"count\")])\n    .reset_index()\n)\nstandardized\n\n    origin dest  air_time_mean  air_time_std     n\n0      EWR  ALB          31.79          3.08   418\n1      EWR  ANC         413.12         14.67     8\n2      EWR  ATL         111.99          9.99  4876\n..     ...  ...            ...           ...   ...\n221    LGA  TVC          94.60          6.49    73\n222    LGA  TYS          97.82          8.52   265\n223    LGA  XNA         173.17         15.91   709\n\n[224 rows x 5 columns]\n\n\n\ndef normalize(x):\n    return (x - x.mean()) / x.std()\n\nstandardized_flights = flights.copy()\nstandardized_flights[\"air_time_z\"] = flights.groupby([\"origin\", \"dest\"])[\"air_time\"].transform(normalize)\n\n\nstandardized_flights.nsmallest(5, \"air_time_z\")\n\n        year  month  day  dep_time  sched_dep_time  dep_delay  arr_time   \n216447  2013      5   25   1709.00            1700       9.00   1923.00  \\\n251999  2013      7    2   1558.00            1513      45.00   1745.00   \n205388  2013      5   13   2040.00            2025      15.00   2225.00   \n64967   2013     11   10   2307.00            2250      17.00     34.00   \n157516  2013      3   23   1914.00            1910       4.00   2045.00   \n\n        sched_arr_time  arr_delay carrier  ...  tailnum origin dest air_time   \n216447            1937     -14.00      DL  ...   N666DN    LGA  ATL    65.00  \\\n251999            1719      26.00      EV  ...   N17196    EWR  MSP    93.00   \n205388            2226      -1.00      EV  ...   N14568    EWR  GSP    55.00   \n64967                8      26.00      B6  ...   N317JB    JFK  BUF    38.00   \n157516            2043       2.00      EV  ...   N12567    EWR  BNA    70.00   \n\n        distance  hour  minute            time_hour    mph  air_time_z  \n216447       762    17       0  2013-05-25 17:00:00 703.38       -5.03  \n251999      1008    15      13  2013-07-02 15:00:00 650.32       -4.83  \n205388       594    20      25  2013-05-13 20:00:00 648.00       -4.72  \n64967        301    22      50  2013-11-10 22:00:00 475.26       -4.10  \n157516       748    19      10  2013-03-23 19:00:00 641.14       -4.07  \n\n[5 rows x 21 columns]\n\n\n\n(\n    so.Plot(standardized_flights, x='air_time_z')\n    .add(so.Line(), so.Hist(binwidth=.1))\n)\n\n\n\n\n\n  Source: The Truthful Art by Albert Cairo\n\n\n4.\n\n# 4. Compute the air time of a flight relative to the shortest flight to that destination. Which flights were most delayed in the air?\n\n# 비율의 차이\nair_time_delayed = flights.copy()\nair_time_delayed[\"air_time_delayed\"] = flights.groupby([\"origin\", \"dest\"])[\n    \"air_time\"\n].transform(lambda x: (x - x.min()) / x.min())\n\nair_time_delayed.sort_values(\"air_time_delayed\", ascending=False).head(3)\n\n        year  month  day  dep_time  sched_dep_time  dep_delay  arr_time   \n237716  2013      6   17   1652.00            1700      -8.00   1856.00  \\\n230885  2013      6   10   1356.00            1300      56.00   1646.00   \n248839  2013      6   29    755.00             800      -5.00   1035.00   \n\n        sched_arr_time  arr_delay carrier  flight tailnum origin dest   \n237716            1815      41.00      US    2136  N967UW    LGA  BOS  \\\n230885            1414     152.00      US    2175  N745VJ    LGA  DCA   \n248839             909      86.00      B6    1491  N328JB    JFK  ACK   \n\n        air_time  distance  hour  minute  air_time_delayed  \n237716    107.00       184    17       0              4.10  \n230885    131.00       214    13       0              3.09  \n248839    141.00       199     8       0              3.03  \n\n\n\n# 크기의 차이\nair_time_delayed = flights.copy()\nair_time_delayed[\"air_time_delayed\"] = flights.groupby([\"origin\", \"dest\"])[\n    \"air_time\"\n].transform(lambda x: x - x.min())\n\nair_time_delayed.sort_values(\"air_time_delayed\", ascending=False).head(3)\n\n        year  month  day  dep_time  sched_dep_time  dep_delay  arr_time   \n276578  2013      7   28   1727.00            1730      -3.00   2242.00  \\\n76185   2013     11   22   1812.00            1815      -3.00   2302.00   \n24032   2013      1   28   1806.00            1700      66.00   2253.00   \n\n        sched_arr_time  arr_delay carrier  flight tailnum origin dest   \n276578            2110      92.00      DL     841  N703TW    JFK  SFO  \\\n76185             2146      76.00      DL     426  N178DN    JFK  LAX   \n24032             1950     183.00      AA     575  N5DBAA    JFK  EGE   \n\n        air_time  distance  hour  minute    mph  air_time_delayed  \n276578    490.00      2586    17      30 316.65            189.00  \n76185     440.00      2475    18      15 337.50            165.00  \n24032     382.00      1747    17       0 274.40            163.00  \n\n\n\n\n5.\n\n# 5. For each plane, count the number of flights before the first delay of greater than 1 hour.\n\nflights_first_delay = (\n    flights[flights.arr_delay.notna()][[\"tailnum\", \"year\", \"month\", \"day\", \"arr_delay\"]]\n    .assign(delay_1h=lambda x: (x.arr_delay > 60))\n    .sort_values([\"tailnum\", \"year\", \"month\", \"day\"])\n)\nflights_first_delay\n\n       tailnum  year  month  day  arr_delay  delay_1h\n120316  D942DN  2013      2   11      91.00      True\n157233  D942DN  2013      3   23      44.00     False\n157799  D942DN  2013      3   24       2.00     False\n...        ...   ...    ...  ...        ...       ...\n107510  N9EAMQ  2013     12   27     -18.00     False\n109161  N9EAMQ  2013     12   29      48.00     False\n109420  N9EAMQ  2013     12   29      53.00     False\n\n[327346 rows x 6 columns]\n\n\n\n(\n    flights_first_delay.groupby(\"tailnum\").apply(lambda x: x.delay_1h.cumsum())\n    .reset_index(level=0)\n    .groupby(\"tailnum\")\n    .apply(lambda x: np.sum(x.delay_1h < 1))\n    .sort_values(ascending=False)\n)\n\ntailnum\nN717TW    119\nN765US     97\nN705TW     97\n         ... \nN376AA      0\nN378AA      0\nD942DN      0\nLength: 4037, dtype: int64"
  },
  {
    "objectID": "contents/sol2.html",
    "href": "contents/sol2.html",
    "title": "Transform 2 Sol",
    "section": "",
    "text": "Load Packages\n# numerical calculation & data frames\nimport numpy as np\nimport pandas as pd\n\n# visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport seaborn.objects as so\n\n# statistics\nimport statsmodels.api as sm\n\n\n\n\nOptions\n# pandas options\npd.set_option(\"mode.copy_on_write\", True)\npd.options.display.precision = 2\npd.options.display.float_format = '{:.2f}'.format  # pd.reset_option('display.float_format')\npd.options.display.max_rows = 7\n\n# Numpy options\nnp.set_printoptions(precision = 2, suppress=True)\n\n\n\nflights = pd.read_csv('data/flights.csv')\nairlines = pd.read_csv('data/airlines.csv')\nairports = pd.read_csv('data/airports.csv')\nplanes = pd.read_csv('data/planes.csv')\nweather = pd.read_csv('data/weather.csv')\n\n\n1.\n\n# 1. Add the location of the origin and destination (i.e. the lat and lon in airports) to flights.\n\n\nairport_location = airports[['faa', 'lat', 'lon']]\nairport_location\n\n      faa   lat    lon\n0     04G 41.13 -80.62\n1     06A 32.46 -85.68\n2     06C 41.99 -88.10\n...   ...   ...    ...\n1455  ZWI 39.74 -75.55\n1456  ZWU 38.90 -77.01\n1457  ZYP 40.75 -73.99\n\n[1458 rows x 3 columns]\n\n\n\nflights = flights.merge(airport_location, left_on='origin', right_on='faa').drop('faa', axis=1)\n\n\n# dest의 경우 airports에 없는 값이 존재\nflights[~flights.dest.isin(airport_location.faa)]\n\n        year  month  day  dep_time  sched_dep_time  dep_delay  arr_time  \\\n21      2013      1    1    701.00             700       1.00   1123.00   \n57      2013      1    1    913.00             918      -5.00   1346.00   \n60      2013      1    1    926.00             929      -3.00   1404.00   \n...      ...    ...  ...       ...             ...        ...       ...   \n336754  2013      9   30   2050.00            2045       5.00     20.00   \n336765  2013      9   30   2145.00            2145       0.00    115.00   \n336774  2013      9   30   2349.00            2359     -10.00    325.00   \n\n        sched_arr_time  arr_delay carrier  flight tailnum origin dest  \\\n21                1154     -31.00      UA    1203  N77296    EWR  SJU   \n57                1416     -30.00      UA    1519  N24715    EWR  STT   \n60                1421     -17.00      B6     215  N775JB    EWR  SJU   \n...                ...        ...     ...     ...     ...    ...  ...   \n336754              53     -33.00      DL     347  N396DA    JFK  SJU   \n336765             140     -25.00      B6    1103  N633JB    JFK  SJU   \n336774             350     -25.00      B6     745  N516JB    JFK  PSE   \n\n        air_time  distance  hour  minute   lat    lon  \n21        188.00      1608     7       0 40.69 -74.17  \n57        189.00      1634     9      18 40.69 -74.17  \n60        191.00      1608     9      29 40.69 -74.17  \n...          ...       ...   ...     ...   ...    ...  \n336754    188.00      1598    20      45 40.64 -73.78  \n336765    192.00      1598    21      45 40.64 -73.78  \n336774    196.00      1617    23      59 40.64 -73.78  \n\n[7602 rows x 20 columns]\n\n\n\n# how=\"left\" 필요, suffixes 옵션 사용하면 편리\nflights = flights.merge(\n    airport_location,\n    left_on=\"dest\",\n    right_on=\"faa\",\n    how=\"left\",\n    suffixes=(\"_origin\", \"_dest\"),\n).drop(\"faa\", axis=1)\n\n\nflights\n\n        year  month  day  dep_time  sched_dep_time  dep_delay  arr_time  \\\n0       2013      1    1    517.00             515       2.00    830.00   \n1       2013      1    1    554.00             558      -4.00    740.00   \n2       2013      1    1    555.00             600      -5.00    913.00   \n...      ...    ...  ...       ...             ...        ...       ...   \n336773  2013      9   30   2307.00            2255      12.00   2359.00   \n336774  2013      9   30   2349.00            2359     -10.00    325.00   \n336775  2013      9   30       NaN            1455        NaN       NaN   \n\n        sched_arr_time  arr_delay carrier  ...  origin dest air_time distance  \\\n0                  819      11.00      UA  ...     EWR  IAH   227.00     1400   \n1                  728      12.00      UA  ...     EWR  ORD   150.00      719   \n2                  854      19.00      B6  ...     EWR  FLL   158.00     1065   \n...                ...        ...     ...  ...     ...  ...      ...      ...   \n336773            2358       1.00      B6  ...     JFK  BOS    33.00      187   \n336774             350     -25.00      B6  ...     JFK  PSE   196.00     1617   \n336775            1634        NaN      9E  ...     JFK  DCA      NaN      213   \n\n        hour  minute  lat_origin  lon_origin  lat_dest  lon_dest  \n0          5      15       40.69      -74.17     29.98    -95.34  \n1          5      58       40.69      -74.17     41.98    -87.90  \n2          6       0       40.69      -74.17     26.07    -80.15  \n...      ...     ...         ...         ...       ...       ...  \n336773    22      55       40.64      -73.78     42.36    -71.01  \n336774    23      59       40.64      -73.78       NaN       NaN  \n336775    14      55       40.64      -73.78     38.85    -77.04  \n\n[336776 rows x 22 columns]\n\n\n\n\n2.\n\n# 2. Is there a relationship between the age of a plane and its delays?\n\nplane_age = (\n    planes[[\"tailnum\", \"year\"]]\n    .merge(flights, on=\"tailnum\", how=\"right\", suffixes=(\"_plane\", \"\"))\n    .drop(\"tailnum\", axis=1)\n    .assign(age=lambda x: x.year - x.year_plane)\n)\n\n\nplane_age.head(3)\n\n   year_plane  year  month  day  dep_time  sched_dep_time  dep_delay   \n0     1999.00  2013      1    1    517.00             515       2.00  \\\n1     2012.00  2013      1    1    554.00             558      -4.00   \n2     2000.00  2013      1    1    555.00             600      -5.00   \n\n   arr_time  sched_arr_time  arr_delay  ... dest  air_time distance hour   \n0    830.00             819      11.00  ...  IAH    227.00     1400    5  \\\n1    740.00             728      12.00  ...  ORD    150.00      719    5   \n2    913.00             854      19.00  ...  FLL    158.00     1065    6   \n\n   minute  lat_origin  lon_origin  lat_dest  lon_dest   age  \n0      15       40.69      -74.17     29.98    -95.34 14.00  \n1      58       40.69      -74.17     41.98    -87.90  1.00  \n2       0       40.69      -74.17     26.07    -80.15 13.00  \n\n[3 rows x 23 columns]\n\n\n\n(\n    so.Plot(plane_age, x='age', y='dep_delay')\n    .add(so.Dots())\n    .add(so.Line(), so.PolyFit(5))\n)\n\n\n\n\n\n(\n    so.Plot(plane_age.query('dep_delay > 0'), x='age', y='dep_delay')\n    .add(so.Dots(alpha=.1, color=\".6\"))\n    .add(so.Line(), so.PolyFit(5))\n    .limit(y=(0, 100), x=(0, 20))\n)\n\n\n\n\n\n(\n    so.Plot(plane_age.query('dep_delay > 0'), x='dep_delay', color=\"age\")\n    .add(so.Line(), so.Hist(stat=\"proportion\", binwidth=10))\n    .limit(x=(0, 200))\n)\n\n\n\n\n\nage_delay = (\n    plane_age.query('dep_delay > 0 & dep_delay < 100')\n    .groupby(\"age\")[\"dep_delay\"]\n    .agg([\"mean\", \"median\", \"count\"])\n    .reset_index()\n)\nage_delay\n\n     age  mean  median  count\n0   0.00 22.73   13.00   1686\n1   1.00 19.97   11.00   2761\n2   2.00 22.54   13.00   2092\n..   ...   ...     ...    ...\n43 50.00 19.88   14.50     16\n44 54.00 26.62   15.00     26\n45 57.00 14.91   13.00     11\n\n[46 rows x 4 columns]\n\n\n\n(\n    so.Plot(age_delay.query('count > 30'), x='age')\n    .add(so.Dot(color=\"red\"), y=\"mean\")\n    .add(so.Dot(), y=\"median\")\n    .add(so.Line(color=\"deepskyblue\"), y=age_delay[\"count\"]/1000*3)\n)\n\n\n\n\n\n\n3.\n\n# 3. What weather conditions make it more likely to see a delay?\n\n\nflights_weather = flights.merge(weather)\n\n\n# 강수량 precipitation\n(\n    so.Plot(flights_weather, x='precip')\n    .add(so.Bar(), so.Hist())\n    .limit(y=(0, 1000))\n)\n\n\n\n\n\nfrom sbcustom import *\nrangeplot(flights_weather, \"precip\", \"dep_delay\")\n\n\n\n\n\n# 강수량 precipitation\nprecip = flights_weather.groupby(\"precip\")[\"dep_delay\"].agg([\"mean\", \"median\"]).reset_index()\nprecip\n\n    precip   mean  median\n0     0.00  11.37   -2.00\n1     0.01  29.80    3.00\n2     0.02  24.08    2.00\n..     ...    ...     ...\n52    0.82  94.67   36.00\n53    0.94  27.85   19.00\n54    1.21 113.11   65.50\n\n[55 rows x 3 columns]\n\n\n\n(\n    so.Plot(precip, x='precip', y=\"mean\")\n    .add(so.Line())\n    .add(so.Line(), so.PolyFit(5))\n    .add(so.Line(color=\"red\"), y=\"median\")\n)\n\n\n\n\n\n# 시야 visibility\n(\n    so.Plot(flights_weather, x='visib')\n    .add(so.Bar(), so.Hist())\n)\n\n\n\n\n\nrangeplot(flights_weather, \"visib\", \"dep_delay\")\n\n\n\n\n\n(\n    so.Plot(flights_weather.query('visib < 4'), x='visib', y='dep_delay')\n    .add(so.Dot(), so.Agg())\n    .add(so.Dot(color=\"red\"), so.Agg(\"median\"))\n    #.limit(y=(0, 100))\n)\n\n\n\n\n\n\n4.\n\n# 4. flights 테이블에서 하루 평균 도착지연(arr_delay)가 가장 큰 10일에 해당하는 항공편을 선택\n\n\ndelay_top = flights.groupby([\"year\", \"month\", \"day\"])[\"arr_delay\"].mean().sort_values(ascending=False).head(10)\ndelay_top\n\nyear  month  day\n2013  3      8     85.86\n      6      13    63.75\n      7      22    62.76\n                    ... \n      12     17    55.87\n      8      8     55.48\n      12     5     51.67\nName: arr_delay, Length: 10, dtype: float64\n\n\n\nflights.merge(delay_top.reset_index(name=\"daily_delay\"), on=[\"year\", \"month\", \"day\"])\n\n      year  month  day  dep_time  sched_dep_time  dep_delay  arr_time  \\\n0     2013     12    5     32.00            1930     302.00    228.00   \n1     2013     12    5     50.00            2046     244.00    233.00   \n2     2013     12    5    457.00             500      -3.00    637.00   \n...    ...    ...  ...       ...             ...        ...       ...   \n9834  2013      9   12       NaN            1510        NaN       NaN   \n9835  2013      9   12       NaN            2015        NaN       NaN   \n9836  2013      9   12       NaN            1829        NaN       NaN   \n\n      sched_arr_time  arr_delay carrier  ...  dest air_time distance hour  \\\n0               2136     292.00      EV  ...   CHS    94.00      628   19   \n1               2224     249.00      EV  ...   GSO    80.00      445   20   \n2                651     -14.00      US  ...   CLT    81.00      529    5   \n...              ...        ...     ...  ...   ...      ...      ...  ...   \n9834            1630        NaN      MQ  ...   DCA      NaN      213   15   \n9835            2155        NaN      MQ  ...   CMH      NaN      483   20   \n9836            1939        NaN      MQ  ...   BWI      NaN      184   18   \n\n      minute  lat_origin  lon_origin  lat_dest  lon_dest  daily_delay  \n0         30       40.69      -74.17     32.90    -80.04        51.67  \n1         46       40.69      -74.17     36.10    -79.94        51.67  \n2          0       40.69      -74.17     35.21    -80.94        51.67  \n...      ...         ...         ...       ...       ...          ...  \n9834      10       40.64      -73.78     38.85    -77.04        58.91  \n9835      15       40.64      -73.78     40.00    -82.89        58.91  \n9836      29       40.64      -73.78     39.18    -76.67        58.91  \n\n[9837 rows x 23 columns]\n\n\n\n\n5.\n\n#5. flights 테이블의 도착지(dest)에 대한 공항정보가 airports 테이블에 없는 그러한 도착지(dest)를 구하면?\n\nflights[~flights.dest.isin(airports.faa)]\n\n        year  month  day  dep_time  sched_dep_time  dep_delay  arr_time  \\\n21      2013      1    1    701.00             700       1.00   1123.00   \n57      2013      1    1    913.00             918      -5.00   1346.00   \n60      2013      1    1    926.00             929      -3.00   1404.00   \n...      ...    ...  ...       ...             ...        ...       ...   \n336754  2013      9   30   2050.00            2045       5.00     20.00   \n336765  2013      9   30   2145.00            2145       0.00    115.00   \n336774  2013      9   30   2349.00            2359     -10.00    325.00   \n\n        sched_arr_time  arr_delay carrier  ...  origin dest air_time distance  \\\n21                1154     -31.00      UA  ...     EWR  SJU   188.00     1608   \n57                1416     -30.00      UA  ...     EWR  STT   189.00     1634   \n60                1421     -17.00      B6  ...     EWR  SJU   191.00     1608   \n...                ...        ...     ...  ...     ...  ...      ...      ...   \n336754              53     -33.00      DL  ...     JFK  SJU   188.00     1598   \n336765             140     -25.00      B6  ...     JFK  SJU   192.00     1598   \n336774             350     -25.00      B6  ...     JFK  PSE   196.00     1617   \n\n        hour  minute  lat_origin  lon_origin  lat_dest  lon_dest  \n21         7       0       40.69      -74.17       NaN       NaN  \n57         9      18       40.69      -74.17       NaN       NaN  \n60         9      29       40.69      -74.17       NaN       NaN  \n...      ...     ...         ...         ...       ...       ...  \n336754    20      45       40.64      -73.78       NaN       NaN  \n336765    21      45       40.64      -73.78       NaN       NaN  \n336774    23      59       40.64      -73.78       NaN       NaN  \n\n[7602 rows x 22 columns]\n\n\n\n\n6.\n\n# 6. Filter flights (항공편) in flights to only show flights with planes that have flown at least 100 flights.\n\nn_planes = (\n    flights.groupby(\"tailnum\")[\"flight\"].count()\n    .reset_index(name=\"n\")\n    .query('n >= 100')\n)\nn_planes\n\n     tailnum    n\n1     N0EGMQ  371\n2     N10156  153\n6     N10575  289\n...      ...  ...\n4003  N979DL  126\n4036  N996DL  102\n4042  N9EAMQ  248\n\n[1217 rows x 2 columns]\n\n\n\nflights.merge(n_planes)\n\n        year  month  day  dep_time  sched_dep_time  dep_delay  arr_time  \\\n0       2013      1    1    517.00             515       2.00    830.00   \n1       2013      1    8   1435.00            1440      -5.00   1717.00   \n2       2013      1    9    717.00             700      17.00    812.00   \n...      ...    ...  ...       ...             ...        ...       ...   \n228387  2013      9   26   1758.00            1759      -1.00   2101.00   \n228388  2013      9   29   1112.00            1115      -3.00   1342.00   \n228389  2013      9   30    654.00             700      -6.00    956.00   \n\n        sched_arr_time  arr_delay carrier  ...  dest air_time distance hour  \\\n0                  819      11.00      UA  ...   IAH   227.00     1400    5   \n1                 1746     -29.00      UA  ...   MIA   150.00     1085   14   \n2                  815      -3.00      UA  ...   BOS    39.00      200    7   \n...                ...        ...     ...  ...   ...      ...      ...  ...   \n228387            2102      -1.00      UA  ...   LAX   316.00     2475   17   \n228388            1415     -33.00      UA  ...   LAX   309.00     2475   11   \n228389            1020     -24.00      UA  ...   SFO   333.00     2586    7   \n\n        minute  lat_origin  lon_origin  lat_dest  lon_dest    n  \n0           15       40.69      -74.17     29.98    -95.34  111  \n1           40       40.69      -74.17     25.79    -80.29  111  \n2            0       40.69      -74.17     42.36    -71.01  111  \n...        ...         ...         ...       ...       ...  ...  \n228387      59       40.64      -73.78     33.94   -118.41  273  \n228388      15       40.64      -73.78     33.94   -118.41  273  \n228389       0       40.64      -73.78     37.62   -122.37  273  \n\n[228390 rows x 23 columns]\n\n\n\n\n7.\n\n# 7. Find the 48 hours (over the course of the whole year) that have the worst (departure) delays.\n\n\n(\n    flights.groupby([\"year\", \"month\", \"day\", \"hour\"])[\"dep_delay\"]\n    .mean()\n    .nlargest(48)\n)\n\nyear  month  day  hour\n2013  2      9    10     269.00\n      4      10   22     176.40\n                  20     170.16\n                          ...  \n             19   21     117.12\n      6      24   17     116.11\n      3      8    11     115.62\nName: dep_delay, Length: 48, dtype: float64\n\n\n\n\n8.\n\n# 8. You might expect that there’s an implicit relationship between plane and airline, because each plane is flown by a single airline. Confirm or reject this hypothesis using the tools you’ve learned above.\n\n\n# 즉, 각 비행기는 특정 항공사에서만 운행되는가의 질문임. 2개 이상의 항공사에서 운항되는 비행기가 있는지 확인해 볼 것\n\nplanes_carriers = (\n    flights.value_counts([\"tailnum\", \"carrier\"]).reset_index().drop(columns=\"count\")\n)\nplanes_carriers\n\n     tailnum carrier\n0     N725MQ      MQ\n1     N722MQ      MQ\n2     N723MQ      MQ\n...      ...     ...\n4057  N670US      DL\n4058  N955DN      DL\n4059  N8618N      WN\n\n[4060 rows x 2 columns]\n\n\n\nplanes_share = (\n    planes_carriers.groupby(\"tailnum\")[\"carrier\"]\n    .count()\n    .reset_index(name=\"n\")\n    .query(\"n > 1\")\n)\nplanes_share\n\n     tailnum  n\n195   N146PQ  2\n224   N153PQ  2\n342   N176PQ  2\n...      ... ..\n4021  N989AT  2\n4023  N990AT  2\n4031  N994AT  2\n\n[17 rows x 2 columns]\n\n\n\n# 또는 nunique() 사용하면,\n(\n    flights.groupby(\"tailnum\")[\"carrier\"].nunique()\n    .reset_index(name=\"n\")\n    .query(\"n > 1\")\n)\n\n     tailnum  n\n195   N146PQ  2\n224   N153PQ  2\n342   N176PQ  2\n...      ... ..\n4021  N989AT  2\n4023  N990AT  2\n4031  N994AT  2\n\n[17 rows x 2 columns]\n\n\n\n# 그리고, 2개 이상의 항공사에서 운항되는 비행기들만 포함하고, 그 항공사들의 full name을 함께 포함하는 테이블을 만들어 볼 것\n\nflights.merge(planes_share).merge(airlines)\n\n     year  month  day  dep_time  sched_dep_time  dep_delay  arr_time  \\\n0    2013      1   11   1244.00            1250      -6.00   1459.00   \n1    2013      1   11   1821.00            1830      -9.00   2014.00   \n2    2013      1   15    612.00             615      -3.00    927.00   \n..    ...    ...  ...       ...             ...        ...       ...   \n821  2013      7    9   2224.00            1859     205.00     16.00   \n822  2013      7   14   1310.00            1310       0.00   1532.00   \n823  2013      8   27   1324.00            1310      14.00   1525.00   \n\n     sched_arr_time  arr_delay carrier  ...  air_time distance hour minute  \\\n0              1449      10.00      9E  ...     92.00      488   12     50   \n1              2044     -30.00      9E  ...     79.00      488   18     30   \n2               855      32.00      9E  ...    134.00      760    6     15   \n..              ...        ...     ...  ...       ...      ...  ...    ...   \n821            2121     175.00      FL  ...     95.00      762   18     59   \n822            1532       0.00      FL  ...    108.00      762   13     10   \n823            1536     -11.00      FL  ...     98.00      762   13     10   \n\n     lat_origin  lon_origin  lat_dest  lon_dest  n  \\\n0         40.69      -74.17     42.21    -83.35  2   \n1         40.69      -74.17     42.21    -83.35  2   \n2         40.64      -73.78     33.64    -84.43  2   \n..          ...         ...       ...       ... ..   \n821       40.78      -73.87     33.64    -84.43  2   \n822       40.78      -73.87     33.64    -84.43  2   \n823       40.78      -73.87     33.64    -84.43  2   \n\n                            name  \n0              Endeavor Air Inc.  \n1              Endeavor Air Inc.  \n2              Endeavor Air Inc.  \n..                           ...  \n821  AirTran Airways Corporation  \n822  AirTran Airways Corporation  \n823  AirTran Airways Corporation  \n\n[824 rows x 24 columns]"
  },
  {
    "objectID": "contents/subsetting.html",
    "href": "contents/subsetting.html",
    "title": "Subsetting",
    "section": "",
    "text": "Load Packages\n# numerical calculation & data frames\nimport numpy as np\nimport pandas as pd\n\n# visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport seaborn.objects as so\n\n# statistics\nimport statsmodels.api as sm\nData: On-time data for all flights that departed NYC (i.e. JFK, LGA or EWR) in 2013\nSubsetting options"
  },
  {
    "objectID": "contents/subsetting.html#bracket",
    "href": "contents/subsetting.html#bracket",
    "title": "Subsetting",
    "section": "Bracket [ ]",
    "text": "Bracket [ ]\nBracket안에 labels이 있는 경우 columns을 select\n\nA single string: Series로 반환\n\nA list of a single string: DataFrame으로 반환\n\nA list of strings\n\n\nflights['dest'] # return as a Series\n\n0         IAH\n1         IAH\n2         MIA\n         ... \n336773    BNA\n336774    CLE\n336775    RDU\nName: dest, Length: 336776, dtype: object\n\n\n\nflights[['dest']] # return as a DataFrame\n\n       dest\n0       IAH\n1       IAH\n2       MIA\n...     ...\n336773  BNA\n336774  CLE\n336775  RDU\n\n[336776 rows x 1 columns]\n\n\n\nflights[['origin', 'dest']]\n\n       origin dest\n0         EWR  IAH\n1         LGA  IAH\n2         JFK  MIA\n...       ...  ...\n336773    LGA  BNA\n336774    LGA  CLE\n336775    LGA  RDU\n\n[336776 rows x 2 columns]\n\n\nBracket안에 numbers가 있는 경우 rows를 select - position-based\n\nSlicing만 허용\nFirst index는 포함, last index는 제외\n[1, 5, 8]과 같이 특정 rows를 선택하는 것은 허용안됨\n\n\nflights[2:5]\n\n   year  month  day  dep_time  sched_dep_time  dep_delay  arr_time  \\\n2  2013      1    1    542.00             540       2.00    923.00   \n3  2013      1    1    544.00             545      -1.00   1004.00   \n4  2013      1    1    554.00             600      -6.00    812.00   \n\n   sched_arr_time  arr_delay carrier  flight tailnum origin dest  air_time  \\\n2             850      33.00      AA    1141  N619AA    JFK  MIA    160.00   \n3            1022     -18.00      B6     725  N804JB    JFK  BQN    183.00   \n4             837     -25.00      DL     461  N668DN    LGA  ATL    116.00   \n\n   distance  hour  minute  \n2      1089     5      40  \n3      1576     5      45  \n4       762     6       0  \n\n\n 만약, 아래와 같이 index가 number일 때 out of order가 된 경우에도 row position으로 적용됨\n\n\n   origin dest  arr_delay\n42    LGA  DFW      48.00\n2     JFK  MIA      33.00\n25    EWR  ORD      32.00\n14    LGA  DFW      31.00\n33    EWR  MSP      29.00\n\n\n\ndf_outoforder[2:4]\n\n   origin dest  arr_delay\n25    EWR  ORD      32.00\n14    LGA  DFW      31.00\n\n\n Chaining with brackets\n\nflights[['origin', 'dest']][2:5]\n# 순서 바꿔어도 동일: flights[2:5][['origin', 'dest']]\n\n  origin dest\n2    JFK  MIA\n3    JFK  BQN\n4    LGA  ATL"
  },
  {
    "objectID": "contents/subsetting.html#dot-notation-.",
    "href": "contents/subsetting.html#dot-notation-.",
    "title": "Subsetting",
    "section": "Dot notation .",
    "text": "Dot notation .\n편리하나 주의해서 사용할 필요가 있음\n\n\n\n\n\n\nNote\n\n\n\n\nspace 또는 . 이 있는 변수명 사용 불가\nmethods와 동일한 이름의 변수명 사용 불가: 예) 변수명이 count인 경우 df.count는 df의 method로 인식\n새로운 변수를 만들어 값을 assgin할 수 없음: 예) df.new_var = 1 불가, 대신 df[\"new_var\"] = 1\n만약, 다음과 같이 변수을 지정했을 때 vars_names=[\"origin\", \"dest\"],\n\ndf[vars_names]는 \"orign\"과 \"dest\" columns을 선택\ndf.vars_names는 vars_names이라는 이름의 column을 의미\n\n\n\n\n\nflights.dest # flihgts[\"dest\"]와 동일\n\n0         IAH\n1         IAH\n2         MIA\n         ... \n336773    BNA\n336774    CLE\n336775    RDU\nName: dest, Length: 336776, dtype: object"
  },
  {
    "objectID": "contents/subsetting.html#loc-.iloc",
    "href": "contents/subsetting.html#loc-.iloc",
    "title": "Subsetting",
    "section": ".loc & .iloc",
    "text": ".loc & .iloc\n각각 location, integer location의 약자\ndf.(i)loc[row_indexer, column_indexer]\n\n.loc: label-based indexing\n\nIndex가 number인 경우도 label로 처리\nSlicing의 경우 first, last index 모두 inclusive\n\n\nflights.loc[2:5, ['origin', 'dest']] # 2:5는 index의 label, not position\n\n  origin dest\n2    JFK  MIA\n3    JFK  BQN\n4    LGA  ATL\n5    EWR  ORD\n\n\n다음과 같이 index가 labels인 경우는 혼동의 염려 없음\n\n\n       origin dest\nred       JFK  MIA\nblue      JFK  BQN\ngreen     LGA  ATL\nyellow    EWR  ORD\n\n\n\ndf_labels.loc[\"blue\":\"green\", :]\n\n      origin dest\nblue     JFK  BQN\ngreen    LGA  ATL\n\n\n하지만, index가 number인 경우는 혼동이 있음\n앞서 본 예에서처럼 index가 out of order인 경우 loc은 다르게 작동\n\n\n   origin dest  arr_delay\n42    LGA  DFW      48.00\n2     JFK  MIA      33.00\n25    EWR  ORD      32.00\n14    LGA  DFW      31.00\n33    EWR  MSP      29.00\n\n\n\ndf_outoforder.loc[2:14, :] # position 아님\n\n   origin dest  arr_delay\n2     JFK  MIA      33.00\n25    EWR  ORD      32.00\n14    LGA  DFW      31.00\n\n\n\ndf_outoforder.loc[[25, 33], :] # slicing이 아닌 특정 index 선택\n\n   origin dest  arr_delay\n25    EWR  ORD      32.00\n33    EWR  MSP      29.00\n\n\n\nflights.loc[2:5, 'dest'] # returns as a Series\n\n2    MIA\n3    BQN\n4    ATL\n5    ORD\nName: dest, dtype: object\n\n\n\nflights.loc[2:5, ['dest']] # return as a DataFrame\n\n  dest\n2  MIA\n3  BQN\n4  ATL\n5  ORD\n\n\n\n\n\n\n\n\nTip\n\n\n\n생략\nflights.loc[2:5, :] # ':' means all\nflights.loc[2:5]\nflights.loc[2:5, ]\n\n\n\n# select a single row\nflights.loc[2, :] # returns as a Series, column names as its index\n\nyear        2013\nmonth          1\nday            1\n            ... \ndistance    1089\nhour           5\nminute        40\nName: 2, Length: 18, dtype: object\n\n\n\n# select a single row\nflights.loc[[2], :] # returns as a DataFrame\n\n   year  month  day  dep_time  sched_dep_time  dep_delay  arr_time  \\\n2  2013      1    1    542.00             540       2.00    923.00   \n\n   sched_arr_time  arr_delay carrier  flight tailnum origin dest  air_time  \\\n2             850      33.00      AA    1141  N619AA    JFK  MIA    160.00   \n\n   distance  hour  minute  \n2      1089     5      40  \n\n\n\n\n\n.iloc: position-based indexing\n\nSlicing의 경우 as usual: first index는 inclusive, last index는 exclusive\n\n\nflights.iloc[2:5, 12:14] # 2:5는 index의 position, last index는 미포함\n\n  origin dest\n2    JFK  MIA\n3    JFK  BQN\n4    LGA  ATL\n\n\n\nflights.iloc[2:5, 12] # return as a Series\n\n2    JFK\n3    JFK\n4    LGA\nName: origin, dtype: object\n\n\n\nflights.iloc[2:5, :]\n# 다음 모두 가능\n# flights.iloc[2:5]\n# flights.iloc[2:5, ]\n\n   year  month  day  dep_time  sched_dep_time  dep_delay  arr_time  \\\n2  2013      1    1    542.00             540       2.00    923.00   \n3  2013      1    1    544.00             545      -1.00   1004.00   \n4  2013      1    1    554.00             600      -6.00    812.00   \n\n   sched_arr_time  arr_delay carrier  flight tailnum origin dest  air_time  \\\n2             850      33.00      AA    1141  N619AA    JFK  MIA    160.00   \n3            1022     -18.00      B6     725  N804JB    JFK  BQN    183.00   \n4             837     -25.00      DL     461  N668DN    LGA  ATL    116.00   \n\n   distance  hour  minute  \n2      1089     5      40  \n3      1576     5      45  \n4       762     6       0  \n\n\n\nflights.iloc[2:5, [12]] # return as a DataFrame\n\n  origin\n2    JFK\n3    JFK\n4    LGA\n\n\n\nflights.iloc[[2, 5, 7], 12:14] # 특정 위치의 rows 선택\n\n  origin dest\n2    JFK  MIA\n5    EWR  ORD\n7    LGA  IAD\n\n\n\n\n\n\n\n\nNote\n\n\n\n단 하나의 scalar 값을 추출할 때, 빠른 처리를 하는 다음을 사용할 수 있음\n.at[i, j], .iat[i, j]"
  },
  {
    "objectID": "contents/subsetting.html#series의-indexing",
    "href": "contents/subsetting.html#series의-indexing",
    "title": "Subsetting",
    "section": "Series의 indexing",
    "text": "Series의 indexing\nDataFrame과 같은 방식으로 이해\nIndex가 numbers인 경우\n\n\n42    DFW\n2     MIA\n25    ORD\n14    DFW\n33    MSP\nName: dest, dtype: object\n\n\n\ns.loc[25:14]\n\n25    ORD\n14    DFW\nName: dest, dtype: object\n\n\n\ns.iloc[2:4]\n\n25    ORD\n14    DFW\nName: dest, dtype: object\n\n\n\ns[:3]\n\n42    DFW\n2     MIA\n25    ORD\nName: dest, dtype: object\n\n\n\n\n\n\n\n\nNote\n\n\n\n다음과 같은 경우 혼동스러움\ns[3] # 3번째? label 3?\n#> errors occur\n\n\n Index가 lables인 경우\n\n\nred       MIA\nblue      BQN\ngreen     ATL\nyellow    ORD\nName: dest, dtype: object\n\n\n\ns[[\"red\", \"green\"]]\n\nred      MIA\ngreen    ATL\nName: dest, dtype: object"
  },
  {
    "objectID": "contents/subsetting.html#boolean-indexing",
    "href": "contents/subsetting.html#boolean-indexing",
    "title": "Subsetting",
    "section": "Boolean indexing",
    "text": "Boolean indexing\n\nBracket [ ] 이나 loc을 이용\niloc은 적용 안됨\n\n\nBracket [ ]\n\nnp.random.seed(123)\nflights_6 = flights[:100][[\"dep_delay\", \"arr_delay\", \"origin\", \"dest\"]].sample(6)\nflights_6\n\n    dep_delay  arr_delay origin dest\n8       -3.00      -8.00    JFK  MCO\n70       9.00      20.00    LGA  ORD\n82      -1.00     -26.00    JFK  SFO\n28       0.00     -21.00    JFK  SJU\n63      -2.00       2.00    JFK  LAX\n0        2.00      11.00    EWR  IAH\n\n\n\nflights_6[flights_6[\"dep_delay\"] < 0]\n\n    dep_delay  arr_delay origin dest\n8       -3.00      -8.00    JFK  MCO\n82      -1.00     -26.00    JFK  SFO\n63      -2.00       2.00    JFK  LAX\n\n\n\nidx = flights_6[\"dep_delay\"] < 0\nidx # bool type의 Series\n\n8      True\n70    False\n82     True\n28    False\n63     True\n0     False\nName: dep_delay, dtype: bool\n\n\n\n# Select a column with the boolean indexing\nflights_6[idx][\"dest\"]\n\n8     MCO\n82    SFO\n63    LAX\nName: dest, dtype: object\n\n\n\n\n\n\n\n\nNote\n\n\n\n사실, boolean indexing을 할때, DataFrame/Series의 index와 match함\n대부분 염려하지 않아도 되나 다음과 같은 결과 참고\n# Reset index\nidx_reset = idx.reset_index(drop=True)\n# 0     True\n# 1    False\n# 2     True\n# 3    False\n# 4     True\n# 5    False\n# Name: dep_delay, dtype: bool\n\nflights_6[idx_reset][\"dest\"]\n#> IndexingError: Unalignable boolean Series provided as indexer \n#> (index of the boolean Series and of the indexed object do not match)\n\n# Index가 없는 numpy array로 boolean indexing을 하는 경우 문제없음\nflights_6[idx_reset.to_numpy()][\"dest\"]\n# 8     MCO\n# 82    SFO\n# 63    LAX\n# Name: dest, dtype: object\n\n\n\nbool_idx = flights_6[[\"dep_delay\", \"arr_delay\"]] > 0\nbool_idx\n\n    dep_delay  arr_delay\n8       False      False\n70       True       True\n82      False      False\n28      False      False\n63      False       True\n0        True       True\n\n\n\nidx_any = bool_idx.any(axis=1)\nidx_any\n\n8     False\n70     True\n82    False\n28    False\n63     True\n0      True\ndtype: bool\n\n\n\nbool_idx.all(axis=1)\n\n8     False\n70     True\n82    False\n28    False\n63    False\n0      True\ndtype: bool\n\n\n\n\nnp.where() 활용\nnp.where(boolean condition, value if True, value if False)\n\nflights_6[\"delayed\"] = np.where(idx, \"delayed\", \"on-time\")\nflights_6\n\n    dep_delay  arr_delay origin dest  delayed\n8       -3.00      -8.00    JFK  MCO  delayed\n70       9.00      20.00    LGA  ORD  on-time\n82      -1.00     -26.00    JFK  SFO  delayed\n28       0.00     -21.00    JFK  SJU  on-time\n63      -2.00       2.00    JFK  LAX  delayed\n0        2.00      11.00    EWR  IAH  on-time\n\n\n\nnp.where(flights_6[\"dest\"].str.startswith(\"S\"), \"S\", \"T\") # str method: \"S\"로 시작하는지 여부\n\narray(['T', 'T', 'S', 'S', 'T', 'T'], dtype='<U1')\n\n\n\n\nloc\n\nflights_6.loc[idx, \"dest\"] # flights_6[idx][\"dest\"]과 동일\n\n8     MCO\n82    SFO\n63    LAX\nName: dest, dtype: object\n\n\n만약 column 이름에 “time”을 포함하는 columns만 선택하고자 하면\n\nSeries/Index object는 str method 존재\nstr.contains(), str.startswith(), str.endswith()\n자세한 사항은 7.4 String Manipulation/String Functions in pandas by Wes McKinney\n\n\ncols = flights.columns.str.contains(\"time\") # str method: \"time\"을 포함하는지 여부\ncols\n\narray([False, False, False,  True,  True, False,  True,  True, False,\n       False, False, False, False, False,  True, False, False, False])\n\n\n\n# Columns 쪽으로 boolean indexing\nflights.loc[:, cols]\n\n        dep_time  sched_dep_time  arr_time  sched_arr_time  air_time\n0         517.00             515    830.00             819    227.00\n1         533.00             529    850.00             830    227.00\n2         542.00             540    923.00             850    160.00\n...          ...             ...       ...             ...       ...\n336773       NaN            1210       NaN            1330       NaN\n336774       NaN            1159       NaN            1344       NaN\n336775       NaN             840       NaN            1020       NaN\n\n[336776 rows x 5 columns]\n\n\n\n\n\n\n\n\nWarning\n\n\n\nChained indexing으로 값을 assign하는 경우 copy vs. view 경고 메세지\nflights[flights[\"arr_delay\"] < 0][\"arr_delay\"] = 0\n/var/folders/mp/vcywncl97ml2q4c_5k2r573m0000gn/T/ipykernel_96692/3780864177.py:1: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n 경고가 제시하는데로 .loc을 이용하여 assign\nflights.loc[flights[\"arr_delay\"] < 0, \"arr_delay\"] = 0"
  },
  {
    "objectID": "contents/subsetting.html#summary",
    "href": "contents/subsetting.html#summary",
    "title": "Subsetting",
    "section": "Summary",
    "text": "Summary\n\nBracket [ ]의 경우\n\n간단히 columns을 선택하고자 할때 column labels: df[[\"var1\", \"var2\"]]\n간단히 rows를 선택하고자 할때 numerical indexing: df[:10]\n\nDot-notation은\n\npandas의 methods와 중복된 이름을 피하고,\nassignment의 왼편에는 사용을 피할 것\n\n가능하면 분명한 loc 또는 iloc을 사용\n\nloc[:, [\"var1\", \"var2\"]]는 df[[\"var1\", \"var2\"]]과 동일\niloc[:10, :]은 df[:10]와 동일\nloc의 경우, index가 숫자라 할지라도 label로 처리됨\nloc은 iloc과는 다른게 first, last index 모두 inclusive\n\nBoolean indexing의 경우\n\nBracket [ ]: df[bool_idx]\nloc: df.loc[bool_idx, :]\niloc 불가\n\nAssignment를 할때는,\n\nchained indexing을 피하고: df[:5][\"dest\"]\nloc or iloc 사용:\n\ndf.loc[:4, \"dest\"]: index가 0부터 정렬되어 있다고 가정했을 때, slicing에서 위치 하나 차이남\ndf.iloc[:5, 13]: “dest”의 column 위치 13\n\n\n한 개의 column 혹은 row을 선택하면 Series로 반환: df[\"var1\"] 또는 df.loc[2, :]\n\n\n\n\n\n\n\nNote\n\n\n\nNumpy의 indexing에 대해서는 교재 참고\nCh.4/Basic Indexing and Slicing in Python Data Analysis by Wes McKinney"
  },
  {
    "objectID": "contents/transform.html",
    "href": "contents/transform.html",
    "title": "Transforming I",
    "section": "",
    "text": "Load Packages\n# numerical calculation & data frames\nimport numpy as np\nimport pandas as pd\n\n# visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport seaborn.objects as so\n\n# statistics\nimport statsmodels.api as sm\n이번 장에서는 시각화를 하기 전후로, 중요한 데이터 패턴을 보기 위해서 새로운 변수를 만들거나 요약한 통계치를 만들 필요가 있는데 이를 다루는 핵심적인 함수들에 대해 익힙니다.\n대략 다음과 같은 transform들을 조합하여 분석에 필요한 상태로 바꿉니다.\nOn-time data for all flights that departed NYC (i.e. JFK, LGA or EWR) in 2013"
  },
  {
    "objectID": "contents/transform.html#rows",
    "href": "contents/transform.html#rows",
    "title": "Transforming I",
    "section": "Rows",
    "text": "Rows\n\nquery()\n\nConditional operators\n>, >=, <, <=,\n== (equal to), != (not equal to)\n&, and (and)\n|, or (or)\n~, not (not)\nin (includes), not in (not included)\n\n\n# Flights that arrived more than 120 minutes (two hours) late\nflights.query('arr_delay > 120')\n\n\n\n\n\n  \n    \n      \n      year\n      month\n      day\n      dep_time\n      sched_dep_time\n      dep_delay\n      arr_time\n      sched_arr_time\n      arr_delay\n      carrier\n      flight\n      tailnum\n      origin\n      dest\n      air_time\n      distance\n      hour\n      minute\n    \n  \n  \n    \n      119\n      2013\n      1\n      1\n      811.00\n      630\n      101.00\n      1047.00\n      830\n      137.00\n      MQ\n      4576\n      N531MQ\n      LGA\n      CLT\n      118.00\n      544\n      6\n      30\n    \n    \n      151\n      2013\n      1\n      1\n      848.00\n      1835\n      853.00\n      1001.00\n      1950\n      851.00\n      MQ\n      3944\n      N942MQ\n      JFK\n      BWI\n      41.00\n      184\n      18\n      35\n    \n    \n      218\n      2013\n      1\n      1\n      957.00\n      733\n      144.00\n      1056.00\n      853\n      123.00\n      UA\n      856\n      N534UA\n      EWR\n      BOS\n      37.00\n      200\n      7\n      33\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      336724\n      2013\n      9\n      30\n      2053.00\n      1815\n      158.00\n      2310.00\n      2054\n      136.00\n      EV\n      5292\n      N600QX\n      EWR\n      ATL\n      91.00\n      746\n      18\n      15\n    \n    \n      336757\n      2013\n      9\n      30\n      2159.00\n      1845\n      194.00\n      2344.00\n      2030\n      194.00\n      9E\n      3320\n      N906XJ\n      JFK\n      BUF\n      50.00\n      301\n      18\n      45\n    \n    \n      336763\n      2013\n      9\n      30\n      2235.00\n      2001\n      154.00\n      59.00\n      2249\n      130.00\n      B6\n      1083\n      N804JB\n      JFK\n      MCO\n      123.00\n      944\n      20\n      1\n    \n  \n\n10034 rows × 18 columns\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n외부 변수/함수를 참조하려면 @와 함께\ndelay_cutoff = 120\nflights.query('arr_delay > @delay_cutoff')\ndef cut_off(df):\n    return df[\"dep_delay\"].min()\n\nflights.query('arr_delay < @cut_off(@flights)')\n위의 query 방식의 filtering은 다음과 같은 boolean indexing의 결과와 같음\nflights[flights[\"arr_delay\"] > 120]\n\n\n\n# Flights that departed on January 1\nflights.query('month == 1 & day == 1')  # == 과 = 을 혼동하지 말것!\n\n\n\n\n\n  \n    \n      \n      year\n      month\n      day\n      dep_time\n      sched_dep_time\n      dep_delay\n      arr_time\n      sched_arr_time\n      arr_delay\n      carrier\n      flight\n      tailnum\n      origin\n      dest\n      air_time\n      distance\n      hour\n      minute\n    \n  \n  \n    \n      0\n      2013\n      1\n      1\n      517.00\n      515\n      2.00\n      830.00\n      819\n      11.00\n      UA\n      1545\n      N14228\n      EWR\n      IAH\n      227.00\n      1400\n      5\n      15\n    \n    \n      1\n      2013\n      1\n      1\n      533.00\n      529\n      4.00\n      850.00\n      830\n      20.00\n      UA\n      1714\n      N24211\n      LGA\n      IAH\n      227.00\n      1416\n      5\n      29\n    \n    \n      2\n      2013\n      1\n      1\n      542.00\n      540\n      2.00\n      923.00\n      850\n      33.00\n      AA\n      1141\n      N619AA\n      JFK\n      MIA\n      160.00\n      1089\n      5\n      40\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      839\n      2013\n      1\n      1\n      NaN\n      1935\n      NaN\n      NaN\n      2240\n      NaN\n      AA\n      791\n      N3EHAA\n      LGA\n      DFW\n      NaN\n      1389\n      19\n      35\n    \n    \n      840\n      2013\n      1\n      1\n      NaN\n      1500\n      NaN\n      NaN\n      1825\n      NaN\n      AA\n      1925\n      N3EVAA\n      LGA\n      MIA\n      NaN\n      1096\n      15\n      0\n    \n    \n      841\n      2013\n      1\n      1\n      NaN\n      600\n      NaN\n      NaN\n      901\n      NaN\n      B6\n      125\n      N618JB\n      JFK\n      FLL\n      NaN\n      1069\n      6\n      0\n    \n  \n\n842 rows × 18 columns\n\n\n\n\n# Flights that departed in January or February\nflights.query('month == 1 | month == 2')\n\n\n\n\n\n  \n    \n      \n      year\n      month\n      day\n      dep_time\n      sched_dep_time\n      dep_delay\n      arr_time\n      sched_arr_time\n      arr_delay\n      carrier\n      flight\n      tailnum\n      origin\n      dest\n      air_time\n      distance\n      hour\n      minute\n    \n  \n  \n    \n      0\n      2013\n      1\n      1\n      517.00\n      515\n      2.00\n      830.00\n      819\n      11.00\n      UA\n      1545\n      N14228\n      EWR\n      IAH\n      227.00\n      1400\n      5\n      15\n    \n    \n      1\n      2013\n      1\n      1\n      533.00\n      529\n      4.00\n      850.00\n      830\n      20.00\n      UA\n      1714\n      N24211\n      LGA\n      IAH\n      227.00\n      1416\n      5\n      29\n    \n    \n      2\n      2013\n      1\n      1\n      542.00\n      540\n      2.00\n      923.00\n      850\n      33.00\n      AA\n      1141\n      N619AA\n      JFK\n      MIA\n      160.00\n      1089\n      5\n      40\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      136244\n      2013\n      2\n      28\n      NaN\n      1115\n      NaN\n      NaN\n      1310\n      NaN\n      MQ\n      4485\n      N725MQ\n      LGA\n      CMH\n      NaN\n      479\n      11\n      15\n    \n    \n      136245\n      2013\n      2\n      28\n      NaN\n      830\n      NaN\n      NaN\n      1205\n      NaN\n      UA\n      1480\n      NaN\n      EWR\n      SFO\n      NaN\n      2565\n      8\n      30\n    \n    \n      136246\n      2013\n      2\n      28\n      NaN\n      840\n      NaN\n      NaN\n      1147\n      NaN\n      UA\n      443\n      NaN\n      JFK\n      LAX\n      NaN\n      2475\n      8\n      40\n    \n  \n\n51955 rows × 18 columns\n\n\n\n\n# A shorter way to select flights that departed in January or February\nflights.query('month in [1, 2]')\n\n\n\n\n\n  \n    \n      \n      year\n      month\n      day\n      dep_time\n      sched_dep_time\n      dep_delay\n      arr_time\n      sched_arr_time\n      arr_delay\n      carrier\n      flight\n      tailnum\n      origin\n      dest\n      air_time\n      distance\n      hour\n      minute\n    \n  \n  \n    \n      0\n      2013\n      1\n      1\n      517.00\n      515\n      2.00\n      830.00\n      819\n      11.00\n      UA\n      1545\n      N14228\n      EWR\n      IAH\n      227.00\n      1400\n      5\n      15\n    \n    \n      1\n      2013\n      1\n      1\n      533.00\n      529\n      4.00\n      850.00\n      830\n      20.00\n      UA\n      1714\n      N24211\n      LGA\n      IAH\n      227.00\n      1416\n      5\n      29\n    \n    \n      2\n      2013\n      1\n      1\n      542.00\n      540\n      2.00\n      923.00\n      850\n      33.00\n      AA\n      1141\n      N619AA\n      JFK\n      MIA\n      160.00\n      1089\n      5\n      40\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      136244\n      2013\n      2\n      28\n      NaN\n      1115\n      NaN\n      NaN\n      1310\n      NaN\n      MQ\n      4485\n      N725MQ\n      LGA\n      CMH\n      NaN\n      479\n      11\n      15\n    \n    \n      136245\n      2013\n      2\n      28\n      NaN\n      830\n      NaN\n      NaN\n      1205\n      NaN\n      UA\n      1480\n      NaN\n      EWR\n      SFO\n      NaN\n      2565\n      8\n      30\n    \n    \n      136246\n      2013\n      2\n      28\n      NaN\n      840\n      NaN\n      NaN\n      1147\n      NaN\n      UA\n      443\n      NaN\n      JFK\n      LAX\n      NaN\n      2475\n      8\n      40\n    \n  \n\n51955 rows × 18 columns\n\n\n\n\nflights.query('arr_delay > 120 & ~(origin == \"JFK\")')\n\n\n\n\n\n  \n    \n      \n      year\n      month\n      day\n      dep_time\n      sched_dep_time\n      dep_delay\n      arr_time\n      sched_arr_time\n      arr_delay\n      carrier\n      flight\n      tailnum\n      origin\n      dest\n      air_time\n      distance\n      hour\n      minute\n    \n  \n  \n    \n      119\n      2013\n      1\n      1\n      811.00\n      630\n      101.00\n      1047.00\n      830\n      137.00\n      MQ\n      4576\n      N531MQ\n      LGA\n      CLT\n      118.00\n      544\n      6\n      30\n    \n    \n      218\n      2013\n      1\n      1\n      957.00\n      733\n      144.00\n      1056.00\n      853\n      123.00\n      UA\n      856\n      N534UA\n      EWR\n      BOS\n      37.00\n      200\n      7\n      33\n    \n    \n      268\n      2013\n      1\n      1\n      1114.00\n      900\n      134.00\n      1447.00\n      1222\n      145.00\n      UA\n      1086\n      N76502\n      LGA\n      IAH\n      248.00\n      1416\n      9\n      0\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      336529\n      2013\n      9\n      30\n      1738.00\n      1529\n      129.00\n      1906.00\n      1649\n      137.00\n      EV\n      4580\n      N12563\n      EWR\n      MKE\n      110.00\n      725\n      15\n      29\n    \n    \n      336668\n      2013\n      9\n      30\n      1951.00\n      1649\n      182.00\n      2157.00\n      1903\n      174.00\n      EV\n      4294\n      N13988\n      EWR\n      SAV\n      95.00\n      708\n      16\n      49\n    \n    \n      336724\n      2013\n      9\n      30\n      2053.00\n      1815\n      158.00\n      2310.00\n      2054\n      136.00\n      EV\n      5292\n      N600QX\n      EWR\n      ATL\n      91.00\n      746\n      18\n      15\n    \n  \n\n6868 rows × 18 columns\n\n\n\n\nflights.query('dep_time < sched_dep_time')\n\n\n\n\n\n  \n    \n      \n      year\n      month\n      day\n      dep_time\n      sched_dep_time\n      dep_delay\n      arr_time\n      sched_arr_time\n      arr_delay\n      carrier\n      flight\n      tailnum\n      origin\n      dest\n      air_time\n      distance\n      hour\n      minute\n    \n  \n  \n    \n      3\n      2013\n      1\n      1\n      544.00\n      545\n      -1.00\n      1004.00\n      1022\n      -18.00\n      B6\n      725\n      N804JB\n      JFK\n      BQN\n      183.00\n      1576\n      5\n      45\n    \n    \n      4\n      2013\n      1\n      1\n      554.00\n      600\n      -6.00\n      812.00\n      837\n      -25.00\n      DL\n      461\n      N668DN\n      LGA\n      ATL\n      116.00\n      762\n      6\n      0\n    \n    \n      5\n      2013\n      1\n      1\n      554.00\n      558\n      -4.00\n      740.00\n      728\n      12.00\n      UA\n      1696\n      N39463\n      EWR\n      ORD\n      150.00\n      719\n      5\n      58\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      336766\n      2013\n      9\n      30\n      2240.00\n      2250\n      -10.00\n      2347.00\n      7\n      -20.00\n      B6\n      2002\n      N281JB\n      JFK\n      BUF\n      52.00\n      301\n      22\n      50\n    \n    \n      336767\n      2013\n      9\n      30\n      2241.00\n      2246\n      -5.00\n      2345.00\n      1\n      -16.00\n      B6\n      486\n      N346JB\n      JFK\n      ROC\n      47.00\n      264\n      22\n      46\n    \n    \n      336769\n      2013\n      9\n      30\n      2349.00\n      2359\n      -10.00\n      325.00\n      350\n      -25.00\n      B6\n      745\n      N516JB\n      JFK\n      PSE\n      196.00\n      1617\n      23\n      59\n    \n  \n\n184782 rows × 18 columns\n\n\n\n\nflights.query('arr_delay + dep_delay < 0')\n\n\n\n\n\n  \n    \n      \n      year\n      month\n      day\n      dep_time\n      sched_dep_time\n      dep_delay\n      arr_time\n      sched_arr_time\n      arr_delay\n      carrier\n      flight\n      tailnum\n      origin\n      dest\n      air_time\n      distance\n      hour\n      minute\n    \n  \n  \n    \n      3\n      2013\n      1\n      1\n      544.00\n      545\n      -1.00\n      1004.00\n      1022\n      -18.00\n      B6\n      725\n      N804JB\n      JFK\n      BQN\n      183.00\n      1576\n      5\n      45\n    \n    \n      4\n      2013\n      1\n      1\n      554.00\n      600\n      -6.00\n      812.00\n      837\n      -25.00\n      DL\n      461\n      N668DN\n      LGA\n      ATL\n      116.00\n      762\n      6\n      0\n    \n    \n      7\n      2013\n      1\n      1\n      557.00\n      600\n      -3.00\n      709.00\n      723\n      -14.00\n      EV\n      5708\n      N829AS\n      LGA\n      IAD\n      53.00\n      229\n      6\n      0\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      336766\n      2013\n      9\n      30\n      2240.00\n      2250\n      -10.00\n      2347.00\n      7\n      -20.00\n      B6\n      2002\n      N281JB\n      JFK\n      BUF\n      52.00\n      301\n      22\n      50\n    \n    \n      336767\n      2013\n      9\n      30\n      2241.00\n      2246\n      -5.00\n      2345.00\n      1\n      -16.00\n      B6\n      486\n      N346JB\n      JFK\n      ROC\n      47.00\n      264\n      22\n      46\n    \n    \n      336769\n      2013\n      9\n      30\n      2349.00\n      2359\n      -10.00\n      325.00\n      350\n      -25.00\n      B6\n      745\n      N516JB\n      JFK\n      PSE\n      196.00\n      1617\n      23\n      59\n    \n  \n\n188401 rows × 18 columns\n\n\n\n\nflights.query('~dep_delay.isna() & arr_delay.isna()')\n\n\n\n\n\n  \n    \n      \n      year\n      month\n      day\n      dep_time\n      sched_dep_time\n      dep_delay\n      arr_time\n      sched_arr_time\n      arr_delay\n      carrier\n      flight\n      tailnum\n      origin\n      dest\n      air_time\n      distance\n      hour\n      minute\n    \n  \n  \n    \n      471\n      2013\n      1\n      1\n      1525.00\n      1530\n      -5.00\n      1934.00\n      1805\n      NaN\n      MQ\n      4525\n      N719MQ\n      LGA\n      XNA\n      NaN\n      1147\n      15\n      30\n    \n    \n      477\n      2013\n      1\n      1\n      1528.00\n      1459\n      29.00\n      2002.00\n      1647\n      NaN\n      EV\n      3806\n      N17108\n      EWR\n      STL\n      NaN\n      872\n      14\n      59\n    \n    \n      615\n      2013\n      1\n      1\n      1740.00\n      1745\n      -5.00\n      2158.00\n      2020\n      NaN\n      MQ\n      4413\n      N739MQ\n      LGA\n      XNA\n      NaN\n      1147\n      17\n      45\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      334495\n      2013\n      9\n      28\n      1214.00\n      1225\n      -11.00\n      1801.00\n      1510\n      NaN\n      AA\n      300\n      N488AA\n      EWR\n      DFW\n      NaN\n      1372\n      12\n      25\n    \n    \n      335534\n      2013\n      9\n      29\n      1734.00\n      1711\n      23.00\n      2159.00\n      2020\n      NaN\n      UA\n      327\n      N463UA\n      EWR\n      PDX\n      NaN\n      2434\n      17\n      11\n    \n    \n      335805\n      2013\n      9\n      30\n      559.00\n      600\n      -1.00\n      NaN\n      715\n      NaN\n      WN\n      464\n      N411WN\n      EWR\n      MDW\n      NaN\n      711\n      6\n      0\n    \n  \n\n1175 rows × 18 columns\n\n\n\n\ndelay_time = 900\nflights.query('arr_delay > @delay_time')\n\n\n\n\n\n  \n    \n      \n      year\n      month\n      day\n      dep_time\n      sched_dep_time\n      dep_delay\n      arr_time\n      sched_arr_time\n      arr_delay\n      carrier\n      flight\n      tailnum\n      origin\n      dest\n      air_time\n      distance\n      hour\n      minute\n    \n  \n  \n    \n      7072\n      2013\n      1\n      9\n      641.00\n      900\n      1301.00\n      1242.00\n      1530\n      1272.00\n      HA\n      51\n      N384HA\n      JFK\n      HNL\n      640.00\n      4983\n      9\n      0\n    \n    \n      8239\n      2013\n      1\n      10\n      1121.00\n      1635\n      1126.00\n      1239.00\n      1810\n      1109.00\n      MQ\n      3695\n      N517MQ\n      EWR\n      ORD\n      111.00\n      719\n      16\n      35\n    \n    \n      151974\n      2013\n      3\n      17\n      2321.00\n      810\n      911.00\n      135.00\n      1020\n      915.00\n      DL\n      2119\n      N927DA\n      LGA\n      MSP\n      167.00\n      1020\n      8\n      10\n    \n    \n      173992\n      2013\n      4\n      10\n      1100.00\n      1900\n      960.00\n      1342.00\n      2211\n      931.00\n      DL\n      2391\n      N959DL\n      JFK\n      TPA\n      139.00\n      1005\n      19\n      0\n    \n    \n      235778\n      2013\n      6\n      15\n      1432.00\n      1935\n      1137.00\n      1607.00\n      2120\n      1127.00\n      MQ\n      3535\n      N504MQ\n      JFK\n      CMH\n      74.00\n      483\n      19\n      35\n    \n    \n      270376\n      2013\n      7\n      22\n      845.00\n      1600\n      1005.00\n      1044.00\n      1815\n      989.00\n      MQ\n      3075\n      N665MQ\n      JFK\n      CVG\n      96.00\n      589\n      16\n      0\n    \n    \n      327043\n      2013\n      9\n      20\n      1139.00\n      1845\n      1014.00\n      1457.00\n      2210\n      1007.00\n      AA\n      177\n      N338AA\n      JFK\n      SFO\n      354.00\n      2586\n      18\n      45\n    \n  \n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n.query()의 결과는 view이므로 수정하려면 SettingWithCopyWarning; .copy() 후 사용 권장\nPython에서 유효하지 않은 변수명의 경우, 예를 들어, 빈칸이나 .이 있는 경우; income total, income.total\nBacktick으로 감싸줘야 함; `income total`, `income.total`, `class`\n\n\n\n\n\n\n\n\n\nquery() 조건의 참거짓에 상관없이 NA값은 모두 제외함\n\n\n\n\n\n# df가 다음과 같을 때,\n#      A     B\n# 0 1.00  2.00\n# 1  NaN  5.00\n# 2 3.00  3.00\n# 3 4.00   NaN\n\ndf.query('A > 1')\n#      A     B\n# 2 3.00  3.00\n# 3 4.00   NaN\n\n# NA를 포함하고자 할 때,\ndf.query('A > 1 | A.isna()') # .isna() : NA인지 여부\n#      A     B\n# 1  NaN  5.00\n# 2 3.00  3.00\n# 3 4.00   NaN\nNA(missing)에 대해서는 뒤에서 자세히\n\n\n\n\n\nsort_values()\n\n# \"year\", \"month\", \"day\", \"dep_time\" 순서대로 내림차순으로 정렬\nflights.sort_values(by=[\"year\", \"month\", \"day\", \"dep_time\"], ascending=False) # default: ascending=True\n\n\n\n\n\n  \n    \n      \n      year\n      month\n      day\n      dep_time\n      sched_dep_time\n      dep_delay\n      arr_time\n      sched_arr_time\n      arr_delay\n      carrier\n      flight\n      tailnum\n      origin\n      dest\n      air_time\n      distance\n      hour\n      minute\n    \n  \n  \n    \n      111279\n      2013\n      12\n      31\n      2356.00\n      2359\n      -3.00\n      436.00\n      445\n      -9.00\n      B6\n      745\n      N665JB\n      JFK\n      PSE\n      200.00\n      1617\n      23\n      59\n    \n    \n      111278\n      2013\n      12\n      31\n      2355.00\n      2359\n      -4.00\n      430.00\n      440\n      -10.00\n      B6\n      1503\n      N509JB\n      JFK\n      SJU\n      195.00\n      1598\n      23\n      59\n    \n    \n      111277\n      2013\n      12\n      31\n      2332.00\n      2245\n      47.00\n      58.00\n      3\n      55.00\n      B6\n      486\n      N334JB\n      JFK\n      ROC\n      60.00\n      264\n      22\n      45\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      839\n      2013\n      1\n      1\n      NaN\n      1935\n      NaN\n      NaN\n      2240\n      NaN\n      AA\n      791\n      N3EHAA\n      LGA\n      DFW\n      NaN\n      1389\n      19\n      35\n    \n    \n      840\n      2013\n      1\n      1\n      NaN\n      1500\n      NaN\n      NaN\n      1825\n      NaN\n      AA\n      1925\n      N3EVAA\n      LGA\n      MIA\n      NaN\n      1096\n      15\n      0\n    \n    \n      841\n      2013\n      1\n      1\n      NaN\n      600\n      NaN\n      NaN\n      901\n      NaN\n      B6\n      125\n      N618JB\n      JFK\n      FLL\n      NaN\n      1069\n      6\n      0\n    \n  \n\n336776 rows × 18 columns\n\n\n\n\n# \"dep_time\"은 내림차순으로, \"arr_delay\"는 오름차순으로\nflights.sort_values(by=[\"dep_time\", \"arr_delay\"], ascending=[False, True])\n\n\n\n\n\n  \n    \n      \n      year\n      month\n      day\n      dep_time\n      sched_dep_time\n      dep_delay\n      arr_time\n      sched_arr_time\n      arr_delay\n      carrier\n      flight\n      tailnum\n      origin\n      dest\n      air_time\n      distance\n      hour\n      minute\n    \n  \n  \n    \n      150301\n      2013\n      3\n      15\n      2400.00\n      2359\n      1.00\n      324.00\n      338\n      -14.00\n      B6\n      727\n      N636JB\n      JFK\n      BQN\n      186.00\n      1576\n      23\n      59\n    \n    \n      87893\n      2013\n      12\n      5\n      2400.00\n      2359\n      1.00\n      427.00\n      440\n      -13.00\n      B6\n      1503\n      N587JB\n      JFK\n      SJU\n      182.00\n      1598\n      23\n      59\n    \n    \n      212941\n      2013\n      5\n      21\n      2400.00\n      2359\n      1.00\n      339.00\n      350\n      -11.00\n      B6\n      739\n      N527JB\n      JFK\n      PSE\n      199.00\n      1617\n      23\n      59\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      336773\n      2013\n      9\n      30\n      NaN\n      1210\n      NaN\n      NaN\n      1330\n      NaN\n      MQ\n      3461\n      N535MQ\n      LGA\n      BNA\n      NaN\n      764\n      12\n      10\n    \n    \n      336774\n      2013\n      9\n      30\n      NaN\n      1159\n      NaN\n      NaN\n      1344\n      NaN\n      MQ\n      3572\n      N511MQ\n      LGA\n      CLE\n      NaN\n      419\n      11\n      59\n    \n    \n      336775\n      2013\n      9\n      30\n      NaN\n      840\n      NaN\n      NaN\n      1020\n      NaN\n      MQ\n      3531\n      N839MQ\n      LGA\n      RDU\n      NaN\n      431\n      8\n      40\n    \n  \n\n336776 rows × 18 columns\n\n\n\n query()와 sort_values()을 함께 이용하여 좀 더 복잡한 문제를 해결할 수 있음\n예를 들어, 다음과 같이 거의 제시간에 출발한(+- 10분) 항공편들 중 가장 도착 지연이 큰 항공편을 찾을 수 있음\n\n(\n    flights\n    .query('dep_delay <= 10 & dep_delay >= -10')\n    .sort_values(\"arr_delay\", ascending=False)\n)\n\n\n\n\n\n  \n    \n      \n      year\n      month\n      day\n      dep_time\n      sched_dep_time\n      dep_delay\n      arr_time\n      sched_arr_time\n      arr_delay\n      carrier\n      flight\n      tailnum\n      origin\n      dest\n      air_time\n      distance\n      hour\n      minute\n    \n  \n  \n    \n      55985\n      2013\n      11\n      1\n      658.00\n      700\n      -2.00\n      1329.00\n      1015\n      194.00\n      VX\n      399\n      N629VA\n      JFK\n      LAX\n      336.00\n      2475\n      7\n      0\n    \n    \n      181270\n      2013\n      4\n      18\n      558.00\n      600\n      -2.00\n      1149.00\n      850\n      179.00\n      AA\n      707\n      N3EXAA\n      LGA\n      DFW\n      234.00\n      1389\n      6\n      0\n    \n    \n      256340\n      2013\n      7\n      7\n      1659.00\n      1700\n      -1.00\n      2050.00\n      1823\n      147.00\n      US\n      2183\n      N948UW\n      LGA\n      DCA\n      64.00\n      214\n      17\n      0\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      334354\n      2013\n      9\n      28\n      847.00\n      839\n      8.00\n      1130.00\n      959\n      NaN\n      EV\n      4510\n      N14542\n      EWR\n      MKE\n      NaN\n      725\n      8\n      39\n    \n    \n      334412\n      2013\n      9\n      28\n      1010.00\n      1020\n      -10.00\n      1344.00\n      1222\n      NaN\n      EV\n      4412\n      N12175\n      EWR\n      DSM\n      NaN\n      1017\n      10\n      20\n    \n    \n      335805\n      2013\n      9\n      30\n      559.00\n      600\n      -1.00\n      NaN\n      715\n      NaN\n      WN\n      464\n      N411WN\n      EWR\n      MDW\n      NaN\n      711\n      6\n      0\n    \n  \n\n239109 rows × 18 columns\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nRow가 재정렬되는 operation을 한 후에는 index 순서가 바뀌는데, 이를 reset하려면,\n.sort_values(ignore_index=True)\nDataFrame updated: inplace=True\nNA는 sort 후 맨 뒤로\n맨 앞으로 오게하려면 na_position='first'\n\n\n\n\n\nunique()\nSeries method\n\nflights[\"origin\"].unique() # return as a NumPy array, but depends on the dtypes\n\narray(['EWR', 'LGA', 'JFK'], dtype=object)\n\n\n\n# finds all unique origin and destination pairs.\nflights[[\"origin\", \"dest\"]].value_counts() # default: dropna=True\n\norigin  dest\nJFK     LAX     11262\nLGA     ATL     10263\n        ORD      8857\n                ...  \n        LEX         1\nJFK     MEM         1\n        BHM         1\nLength: 224, dtype: int64\n\n\n\nflights[[\"origin\", \"dest\"]].value_counts().reset_index(name=\"n\")\n\n\n\n    origin dest      n\n0      JFK  LAX  11262\n1      LGA  ATL  10263\n2      LGA  ORD   8857\n..     ...  ...    ...\n221    LGA  LEX      1\n222    JFK  MEM      1\n223    JFK  BHM      1\n\n[224 rows x 3 columns]"
  },
  {
    "objectID": "contents/transform.html#columns",
    "href": "contents/transform.html#columns",
    "title": "Transforming I",
    "section": "Columns",
    "text": "Columns\n\nSelect\n기본적인 column selection은 이전 섹션 참고: subsetting\n\n# Select columns by name\nflights[[\"year\", \"month\", \"day\"]]\n\n\n\n        year  month  day\n0       2013      1    1\n1       2013      1    1\n2       2013      1    1\n...      ...    ...  ...\n336773  2013      9   30\n336774  2013      9   30\n336775  2013      9   30\n\n[336776 rows x 3 columns]\n\n\n\n\n\n# Select all columns between year and day (inclusive)\nflights.loc[:, \"year\":\"day\"]\n\n\n\n        year  month  day\n0       2013      1    1\n1       2013      1    1\n2       2013      1    1\n...      ...    ...  ...\n336773  2013      9   30\n336774  2013      9   30\n336775  2013      9   30\n\n[336776 rows x 3 columns]\n\n\n\n\n\n# Select all columns except those from year to day (inclusive)\n# .isin(): includes\nflights.loc[:, ~flights.columns.isin([\"year\", \"month\", \"day\"])]  # Boolean indexing\n\n\n\n\n\n  \n    \n      \n      dep_time\n      sched_dep_time\n      dep_delay\n      arr_time\n      sched_arr_time\n      arr_delay\n      carrier\n      flight\n      tailnum\n      origin\n      dest\n      air_time\n      distance\n      hour\n      minute\n    \n  \n  \n    \n      0\n      517.00\n      515\n      2.00\n      830.00\n      819\n      11.00\n      UA\n      1545\n      N14228\n      EWR\n      IAH\n      227.00\n      1400\n      5\n      15\n    \n    \n      1\n      533.00\n      529\n      4.00\n      850.00\n      830\n      20.00\n      UA\n      1714\n      N24211\n      LGA\n      IAH\n      227.00\n      1416\n      5\n      29\n    \n    \n      2\n      542.00\n      540\n      2.00\n      923.00\n      850\n      33.00\n      AA\n      1141\n      N619AA\n      JFK\n      MIA\n      160.00\n      1089\n      5\n      40\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      336773\n      NaN\n      1210\n      NaN\n      NaN\n      1330\n      NaN\n      MQ\n      3461\n      N535MQ\n      LGA\n      BNA\n      NaN\n      764\n      12\n      10\n    \n    \n      336774\n      NaN\n      1159\n      NaN\n      NaN\n      1344\n      NaN\n      MQ\n      3572\n      N511MQ\n      LGA\n      CLE\n      NaN\n      419\n      11\n      59\n    \n    \n      336775\n      NaN\n      840\n      NaN\n      NaN\n      1020\n      NaN\n      MQ\n      3531\n      N839MQ\n      LGA\n      RDU\n      NaN\n      431\n      8\n      40\n    \n  \n\n336776 rows × 15 columns\n\n\n\n Series/Index object의 method와 함께 (string method와는 구별)\n.str.contains(), .str.startswith(), .str.endswith() ; True/False\n\n# Select all columns that begin with “dep”.\nflights.loc[:, flights.columns.str.startswith(\"dep\")]  # Boolean indexing\n\n\n\n        dep_time  dep_delay\n0         517.00       2.00\n1         533.00       4.00\n2         542.00       2.00\n...          ...        ...\n336773       NaN        NaN\n336774       NaN        NaN\n336775       NaN        NaN\n\n[336776 rows x 2 columns]\n\n\n\n\n\n# Select all columns that are characters\nflights.select_dtypes(\"object\") # dtype: object, number, ...\n\n       carrier tailnum origin dest\n0           UA  N14228    EWR  IAH\n1           UA  N24211    LGA  IAH\n2           AA  N619AA    JFK  MIA\n...        ...     ...    ...  ...\n336773      MQ  N535MQ    LGA  BNA\n336774      MQ  N511MQ    LGA  CLE\n336775      MQ  N839MQ    LGA  RDU\n\n[336776 rows x 4 columns]\n\n\nindex selection: reindex\n\n\nrename()\n\nflights.rename(\n    columns={\"dep_time\": \"dep_t\", \"arr_time\": \"arr_t\"},  # default: index=\n  # inplace=True   # dataframe is updated\n)\n\n\n\n\n\n  \n    \n      \n      year\n      month\n      day\n      dep_t\n      sched_dep_time\n      dep_delay\n      arr_t\n      sched_arr_time\n      arr_delay\n      carrier\n      flight\n      tailnum\n      origin\n      dest\n      air_time\n      distance\n      hour\n      minute\n    \n  \n  \n    \n      0\n      2013\n      1\n      1\n      517.00\n      515\n      2.00\n      830.00\n      819\n      11.00\n      UA\n      1545\n      N14228\n      EWR\n      IAH\n      227.00\n      1400\n      5\n      15\n    \n    \n      1\n      2013\n      1\n      1\n      533.00\n      529\n      4.00\n      850.00\n      830\n      20.00\n      UA\n      1714\n      N24211\n      LGA\n      IAH\n      227.00\n      1416\n      5\n      29\n    \n    \n      2\n      2013\n      1\n      1\n      542.00\n      540\n      2.00\n      923.00\n      850\n      33.00\n      AA\n      1141\n      N619AA\n      JFK\n      MIA\n      160.00\n      1089\n      5\n      40\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      336773\n      2013\n      9\n      30\n      NaN\n      1210\n      NaN\n      NaN\n      1330\n      NaN\n      MQ\n      3461\n      N535MQ\n      LGA\n      BNA\n      NaN\n      764\n      12\n      10\n    \n    \n      336774\n      2013\n      9\n      30\n      NaN\n      1159\n      NaN\n      NaN\n      1344\n      NaN\n      MQ\n      3572\n      N511MQ\n      LGA\n      CLE\n      NaN\n      419\n      11\n      59\n    \n    \n      336775\n      2013\n      9\n      30\n      NaN\n      840\n      NaN\n      NaN\n      1020\n      NaN\n      MQ\n      3531\n      N839MQ\n      LGA\n      RDU\n      NaN\n      431\n      8\n      40\n    \n  \n\n336776 rows × 18 columns\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nSeries의 경우\ns = flights.dep_delay.head(3)\n# 0   2.00\n# 1   4.00\n# 2   2.00\n# Name: dep_delay, dtype: float64\n\ns.rename(\"what\")\n# 0   2.00\n# 1   4.00\n# 2   2.00\n# Name: what, dtype: float64\n\n\n함수 str.capitalize, str.lower, str.upper과 함께\n\nflights.rename(str.capitalize, axis=\"columns\").head(3) # axis=1\n\n\n\n\n\n  \n    \n      \n      Year\n      Month\n      Day\n      Dep_time\n      Sched_dep_time\n      Dep_delay\n      Arr_time\n      Sched_arr_time\n      Arr_delay\n      Carrier\n      Flight\n      Tailnum\n      Origin\n      Dest\n      Air_time\n      Distance\n      Hour\n      Minute\n    \n  \n  \n    \n      0\n      2013\n      1\n      1\n      517.00\n      515\n      2.00\n      830.00\n      819\n      11.00\n      UA\n      1545\n      N14228\n      EWR\n      IAH\n      227.00\n      1400\n      5\n      15\n    \n    \n      1\n      2013\n      1\n      1\n      533.00\n      529\n      4.00\n      850.00\n      830\n      20.00\n      UA\n      1714\n      N24211\n      LGA\n      IAH\n      227.00\n      1416\n      5\n      29\n    \n    \n      2\n      2013\n      1\n      1\n      542.00\n      540\n      2.00\n      923.00\n      850\n      33.00\n      AA\n      1141\n      N619AA\n      JFK\n      MIA\n      160.00\n      1089\n      5\n      40\n    \n  \n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nindex를 rename할 수도 있음\nflights.rename(\n    index={0: \"a\", 1: \"b\"},\n).head(3)\n#    year  month  day  dep_time  ...\n# a  2013      1    1    517.00  ...\n# b  2013      1    1    533.00  ...\n# 2  2013      1    1    542.00  ...\n\n\n\n\nassign()\n\ncols = [\"year\", \"month\", \"day\", \"distance\", \"air_time\"] + \\\n        [col for col in flights.columns if col.endswith(\"delay\")]  # string method .endswith\nflights_sml = flights[cols].copy()\nflights_sml\n\n        year  month  day  distance  air_time  dep_delay  arr_delay\n0       2013      1    1      1400    227.00       2.00      11.00\n1       2013      1    1      1416    227.00       4.00      20.00\n2       2013      1    1      1089    160.00       2.00      33.00\n...      ...    ...  ...       ...       ...        ...        ...\n336773  2013      9   30       764       NaN        NaN        NaN\n336774  2013      9   30       419       NaN        NaN        NaN\n336775  2013      9   30       431       NaN        NaN        NaN\n\n[336776 rows x 7 columns]\n\n\n\n# 새로 만들어진 변수는 맨 뒤로\nflights_sml.assign(\n    gain=lambda x: x.dep_delay - x.arr_delay,   # x: DataFrame, flights_sml\n    speed=flights_sml[\"distance\"] / flights_sml[\"air_time\"] * 60    # 직접 DataFrame 참조할 수도 있음\n)\n\n        year  month  day  distance  air_time  dep_delay  arr_delay   gain  \\\n0       2013      1    1      1400    227.00       2.00      11.00  -9.00   \n1       2013      1    1      1416    227.00       4.00      20.00 -16.00   \n2       2013      1    1      1089    160.00       2.00      33.00 -31.00   \n...      ...    ...  ...       ...       ...        ...        ...    ...   \n336773  2013      9   30       764       NaN        NaN        NaN    NaN   \n336774  2013      9   30       419       NaN        NaN        NaN    NaN   \n336775  2013      9   30       431       NaN        NaN        NaN    NaN   \n\n        speed  \n0      370.04  \n1      374.27  \n2      408.38  \n...       ...  \n336773    NaN  \n336774    NaN  \n336775    NaN  \n\n[336776 rows x 9 columns]\n\n\n\n# 앞에서 만든 변수나 함수를 이용할 수 있음\nflights_sml.assign(\n    gain=lambda x: x.dep_delay - x.arr_delay,\n    hours=lambda x: x.air_time / 60,\n    gain_per_hour=lambda x: x.gain / x.hours,\n    rounded=lambda x: np.round(x.gain_per_hour, 1)  # use a numpy function\n)\n\n        year  month  day  distance  air_time  dep_delay  arr_delay   gain  \\\n0       2013      1    1      1400    227.00       2.00      11.00  -9.00   \n1       2013      1    1      1416    227.00       4.00      20.00 -16.00   \n2       2013      1    1      1089    160.00       2.00      33.00 -31.00   \n...      ...    ...  ...       ...       ...        ...        ...    ...   \n336773  2013      9   30       764       NaN        NaN        NaN    NaN   \n336774  2013      9   30       419       NaN        NaN        NaN    NaN   \n336775  2013      9   30       431       NaN        NaN        NaN    NaN   \n\n        hours  gain_per_hour  rounded  \n0        3.78          -2.38    -2.40  \n1        3.78          -4.23    -4.20  \n2        2.67         -11.62   -11.60  \n...       ...            ...      ...  \n336773    NaN            NaN      NaN  \n336774    NaN            NaN      NaN  \n336775    NaN            NaN      NaN  \n\n[336776 rows x 11 columns]\n\n\n\n# Find the fastest flights\n(\n    flights_sml\n    .assign(speed=lambda x: x.distance / x.air_time)\n    .sort_values(by=\"speed\", ascending=False)\n    .head(5)\n)\n\n        year  month  day  distance  air_time  dep_delay  arr_delay  speed\n216447  2013      5   25       762     65.00       9.00     -14.00  11.72\n251999  2013      7    2      1008     93.00      45.00      26.00  10.84\n205388  2013      5   13       594     55.00      15.00      -1.00  10.80\n157516  2013      3   23       748     70.00       4.00       2.00  10.69\n10223   2013      1   12      1035    105.00      -1.00     -28.00   9.86"
  },
  {
    "objectID": "contents/transform.html#groups",
    "href": "contents/transform.html#groups",
    "title": "Transforming I",
    "section": "Groups",
    "text": "Groups\n\ngroupby()\n\ngroupby()는 데이터를 의미있는 그룹으로 나누어 분석할 수 있도록 해줌\n.count(), .sum(), .mean(), .min(), .max()과 같은 통계치를 구하는 methods와 함께 효과적으로, 자주 활용됨\n\n\nSource: Ch.10 in Python for Data Analysis (3e) by Wes McKinney\n아래 표는 groupby()와 함께 자주 쓰이는 효율적인 methods\n\nSource: Ch.10 in Python for Data Analysis (3e) by Wes McKinney\n\nflights.groupby(\"month\") # “GroupBy” object\n\n<pandas.core.groupby.generic.DataFrameGroupBy object at 0x28001c810>\n\n\n\nflights_sml.groupby(\"month\").mean()\n\n\n\n         year   day  distance  air_time  dep_delay  arr_delay\nmonth                                                        \n1     2013.00 15.99   1006.84    154.19      10.04       6.13\n2     2013.00 14.74   1000.98    151.35      10.82       5.61\n3     2013.00 16.00   1011.99    149.08      13.23       5.81\n...       ...   ...       ...       ...        ...        ...\n10    2013.00 15.98   1038.88    148.89       6.24      -0.17\n11    2013.00 15.29   1050.31    155.47       5.44       0.46\n12    2013.00 15.72   1064.66    162.59      16.58      14.87\n\n[12 rows x 6 columns]\n\n\n\n\n\n# 보통은 다음과 같이 특정 columns을 선택\nflights.groupby(\"month\")[\"dep_delay\"]  # [[\"dep_delay\"]] 처럼 list로 입력하면 DataFrameGroupBy object\n\n<pandas.core.groupby.generic.SeriesGroupBy object at 0x13d0126d0>\n\n\n\nflights.groupby(\"month\")[\"dep_delay\"].mean() # Series GroupBy object에 적용된 결과는 Series\n\nmonth\n1    10.04\n2    10.82\n3    13.23\n      ... \n10    6.24\n11    5.44\n12   16.58\nName: dep_delay, Length: 12, dtype: float64\n\n\n\nflights.groupby(\"month\")[[\"dep_delay\", \"arr_delay\"]].mean().head(3)\n\n\n\n       dep_delay  arr_delay\nmonth                      \n1          10.04       6.13\n2          10.82       5.61\n3          13.23       5.81\n\n\n\n\n\n# 2 levels의 grouping\nflights.groupby([\"month\", \"day\"])[\"arr_delay\"].nsmallest(1)\n\nmonth  day        \n1      1    696      -48.00\n       2    919      -59.00\n       3    2035     -65.00\n                      ...  \n12     29   108914   -60.00\n       30   110330   -45.00\n       31   111113   -44.00\nName: arr_delay, Length: 365, dtype: float64\n\n\n\n\n\n\n\n\nTip\n\n\n\nMulti-index의 level을 drop하려면 droplevel()\nflights.groupby([\"month\", \"day\"])[\"arr_delay\"].nsmallest(1).droplevel(2)\n# month  day\n# 1      1     -48.00\n#        2     -59.00\n#        3     -65.00\n#               ...  \n# 12     29    -60.00\n#        30    -45.00\n#        31    -44.00\n# Name: arr_delay, Length: 365, dtype: float64\n\n\n\nflights.groupby([\"origin\", \"dest\"])[\"arr_delay\"].count()\n\norigin  dest\nEWR     ALB      418\n        ANC        8\n        ATL     4876\n                ... \nLGA     TVC       73\n        TYS      265\n        XNA      709\nName: arr_delay, Length: 224, dtype: int64\n\n\n\n\n\n\n\n\nTip\n\n\n\nas_index=False: grouping 변수들을 index가 아닌 columns으로\nflights.groupby([\"month\", \"day\"], as_index=False)[\"arr_delay\"].mean().head(3)\n#    month  day  arr_delay\n# 0      1    1      12.65\n# 1      1    2      12.69\n# 2      1    3       5.73\n물론, 결과물에 .reset_index() method를 사용해도 됨\n\n\n\n\n\n\n\n\nNote\n\n\n\n원칙적으로 grouping은 같은 DataFrame의 변수일 필요없이 match만 되면 됨\nSource: Wes McKinney’s\n# df\n#    key1  key2  data1  data2\n# 0     a     1   0.36  -0.42\n# 1     a     2  -1.51   0.04\n# 2  None     1   0.75  -0.28\n# 3     b     2   0.57   0.25\n# 4     b     1   1.30  -0.77\n# 5     a  <NA>  -0.53  -0.73\n# 6  None     1   2.04  -0.37\n\nstates = np.array([\"OH\", \"CA\", \"CA\", \"OH\", \"OH\", \"CA\", \"OH\"])\nyears = [2005, 2005, 2006, 2005, 2006, 2005, 2006]\n\ndf[\"data1\"].groupby([states, years]).mean()\n# CA  2005   -1.02\n#     2006    0.75\n# OH  2005    0.46\n#     2006    1.67\n# Name: data1, dtype: float64\n\n\n\nflights.groupby(\"dest\").size() # .size(): group의 사이즈/열의 갯수\n\ndest\nABQ     254\nACK     265\nALB     439\n       ... \nTVC     101\nTYS     631\nXNA    1036\nLength: 105, dtype: int64\n\n\n\nflights.groupby(\"tailnum\", dropna=False).size() # groupby는 기본적으로 NA 무시\n\ntailnum\nD942DN       4\nN0EGMQ     371\nN10156     153\n          ... \nN999DN      61\nN9EAMQ     248\nNaN       2512\nLength: 4044, dtype: int64\n\n\n\n\n\n\n\n\nNote\n\n\n\n.size()는 .value_counts()와 유사하게 사용될 수 있음\nflights[\"tailnum\"].value_counts(dropna=False)\n# NaN       2512\n# N725MQ     575\n# N722MQ     513\n#           ... \n# N318AS       1\n# N651UA       1\n# N557AS       1\n# Name: tailnum, Length: 4044, dtype: int64\n\n\n\n\n\n\n\n\nNote\n\n\n\nIndex에 grouping하는 방식에 대해서는 Wes McKineey’s Chapter 10 참고\n\nGrouping with Dictionaries and Series\nGrouping with Functions\nGrouping by Index Levels\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nTime series 데이터의 경우 다양한 grouping 방식이 존재\nStephanie Molin의 ch.4 Working with time series data 참고\n예를 들어, facebook stock에 대한 자료에서 2018년 4분기에 해당하는 날을 week단위로 그룹핑하여 volume을 다음과 같이 계산할 수 있음\nfb.loc['2018-Q4'].groupby(pd.Grouper(freq='W')).volume.sum()\n\n\n\n\n\n\n\n\nTip\n\n\n\ngroupby filtering\nflights.groupby([\"year\", \"month\", \"day\"]).filter(lambda x: x[\"arr_delay\"].mean() < 0)\n\n\n\n\n\nagg()\nAggregations: data transformation that produces scalar values from arrays\n앞서 GroupBy object에 직접 stats function을 적용하였는데, agg()를 이용하여 더 확장, 일반화할 수 있음\n\n# 모두 동일\nflights_sml.groupby(\"month\").mean()\nflights_sml.groupby(\"month\").agg(\"mean\")  # function names\nflights_sml.groupby(\"month\").agg(np.mean)  # general functions\n\n\n\n         year   day  distance  air_time  dep_delay  arr_delay\nmonth                                                        \n1     2013.00 15.99   1006.84    154.19      10.04       6.13\n2     2013.00 14.74   1000.98    151.35      10.82       5.61\n3     2013.00 16.00   1011.99    149.08      13.23       5.81\n...       ...   ...       ...       ...        ...        ...\n10    2013.00 15.98   1038.88    148.89       6.24      -0.17\n11    2013.00 15.29   1050.31    155.47       5.44       0.46\n12    2013.00 15.72   1064.66    162.59      16.58      14.87\n\n[12 rows x 6 columns]\n\n\n\n\n\n\n\n\nTip\n\n\n\n차이 참고\nflights_sml.groupby(\"month\")[\"arr_delay\"].agg([\"mean\"])\nflights_sml.groupby(\"month\")[[\"arr_delay\"]].agg(\"mean\")\n\n\n\nflights.groupby(\"month\")[\"dep_delay\"].agg([\"mean\", \"count\"])\n\n\n\n       mean  count\nmonth             \n1     10.04  26483\n2     10.82  23690\n3     13.23  27973\n...     ...    ...\n10     6.24  28653\n11     5.44  27035\n12    16.58  27110\n\n[12 rows x 2 columns]\n\n\n\n\n\nflights_sml.groupby(\"month\")[[\"arr_delay\", \"dep_delay\"]].agg([\"mean\", \"count\"])\n\n      arr_delay        dep_delay       \n           mean  count      mean  count\nmonth                                  \n1          6.13  26398     10.04  26483\n2          5.61  23611     10.82  23690\n3          5.81  27902     13.23  27973\n...         ...    ...       ...    ...\n10        -0.17  28618      6.24  28653\n11         0.46  26971      5.44  27035\n12        14.87  27020     16.58  27110\n\n[12 rows x 4 columns]\n\n\n\n# Apply different funtions to different columns\nflights_agg = flights.groupby(\"month\").agg({\n    \"air_time\": [\"min\", \"max\"],\n    \"dep_delay\": \"mean\",\n    \"arr_delay\": \"median\"\n})\nflights_agg.head(3)\n\n\n\n      air_time        dep_delay arr_delay\n           min    max      mean    median\nmonth                                    \n1        20.00 667.00     10.04     -3.00\n2        21.00 691.00     10.82     -3.00\n3        21.00 695.00     13.23     -6.00\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nMultiIndex를 collapse하는 팁\nflights_agg.columns\n# MultiIndex([( 'air_time',    'min'),\n#             ( 'air_time',    'max'),\n#             ('dep_delay',   'mean'),\n#             ('arr_delay', 'median')],\n#            )\n\nflights_agg.columns = ['_'.join(col_agg) for col_agg in flights_agg.columns]\nflights_agg.head(3)\n#        air_time_min  air_time_max  dep_delay_mean  arr_delay_median\n# month                                                              \n# 1             20.00        667.00           10.04             -3.00\n# 2             21.00        691.00           10.82             -3.00\n# 3             21.00        695.00           13.23             -6.00\n\n\nagg()에는 custom function을 pass할 수 있음\n단, the optimized functions (Table 10-1)에 비해 일반적으로 훨씬 느림\n\ndef peak_to_peak(arr):\n    return arr.max() - arr.min()\n\n\ngrouped = flights_sml.groupby([\"month\", \"day\"])\ngrouped_dist = flights_sml.groupby([\"month\", \"day\"])[\"distance\"]\n\ngrouped_dist.agg([\"std\", peak_to_peak]) # a list of functions\n\n\n\n             std  peak_to_peak\nmonth day                     \n1     1   727.73          4889\n      2   721.72          4889\n      3   714.95          4903\n...          ...           ...\n12    29  728.78          4887\n      30  723.88          4887\n      31  731.36          4887\n\n[365 rows x 2 columns]\n\n\n\n\n\n# Naming a function as a tuple\ngrouped_dist.agg([(\"sd\", \"std\"), (\"range\", peak_to_peak)])\n\n\n\n              sd  range\nmonth day              \n1     1   727.73   4889\n      2   721.72   4889\n      3   714.95   4903\n...          ...    ...\n12    29  728.78   4887\n      30  723.88   4887\n      31  731.36   4887\n\n[365 rows x 2 columns]\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n.describe()는 aggregation은 아니나 grouped objects에 적용가능\ngrouped[[\"dep_delay\", \"arr_delay\"]].describe()\n#       dep_delay                                              arr_delay        \\\n#           count  mean   std    min   25%   50%   75%     max     count  mean   \n# month                                                                          \n# 1      26483.00 10.04 36.39 -30.00 -5.00 -2.00  8.00 1301.00  26398.00  6.13   \n# 2      23690.00 10.82 36.27 -33.00 -5.00 -2.00  9.00  853.00  23611.00  5.61   \n# 3      27973.00 13.23 40.13 -25.00 -5.00 -1.00 12.00  911.00  27902.00  5.81   \n# ...         ...   ...   ...    ...   ...   ...   ...     ...       ...   ...    \n                                               \n#         std    min    25%   50%   75%     max  \n# month                                          \n# 1     40.42 -70.00 -15.00 -3.00 13.00 1272.00  \n# 2     39.53 -70.00 -15.00 -3.00 13.00  834.00  \n# 3     44.12 -68.00 -18.00 -6.00 13.00  915.00  \n# ...     ...    ...    ...   ...   ...     ...  \n\n# [12 rows x 16 columns]\n\n\n\n\ntransform()\n앞서 group별로 통계치가 summary되어 원래 reduced 데이터를 변형됐다면,\ntransform()은 group별로 얻은 통계치가 원래 데이터의 형태를 그대로 보존하면서 출력\n만약, 전달되는 함수가 Series를 반환하려면, 동일한 사이즈로 반환되어야 함.\n\nflights_sml.groupby([\"month\"])[\"arr_delay\"].mean()\n\nmonth\n1     6.13\n2     5.61\n3     5.81\n      ... \n10   -0.17\n11    0.46\n12   14.87\nName: arr_delay, Length: 12, dtype: float64\n\n\n\ngrouped_delay = flights_sml.groupby([\"month\"])[\"arr_delay\"].transform(\"mean\")\ngrouped_delay\n\n0         6.13\n1         6.13\n2         6.13\n          ... \n336773   -4.02\n336774   -4.02\n336775   -4.02\nName: arr_delay, Length: 336776, dtype: float64\n\n\n\nflights_sml[\"monthly_delay\"] = grouped_delay\nflights_sml\n\n        year  month  day  distance  air_time  dep_delay  arr_delay  \\\n0       2013      1    1      1400    227.00       2.00      11.00   \n1       2013      1    1      1416    227.00       4.00      20.00   \n2       2013      1    1      1089    160.00       2.00      33.00   \n...      ...    ...  ...       ...       ...        ...        ...   \n336773  2013      9   30       764       NaN        NaN        NaN   \n336774  2013      9   30       419       NaN        NaN        NaN   \n336775  2013      9   30       431       NaN        NaN        NaN   \n\n        monthly_delay  \n0                6.13  \n1                6.13  \n2                6.13  \n...               ...  \n336773          -4.02  \n336774          -4.02  \n336775          -4.02  \n\n[336776 rows x 8 columns]\n\n\nQ: 1년에 10000편 이상 운항편이 있는 도착지로 가는 항공편들만 추리면,\n\ndest_size =  flights.groupby(\"dest\").transform(\"size\")\ndest_size\n\n# 또는 flights.groupby(\"dest\")[\"dest\"].transform(\"count\")\n\n0          7198\n1          7198\n2         11728\n          ...  \n336773     6333\n336774     4573\n336775     8163\nLength: 336776, dtype: int64\n\n\n\n# 1년에 10000편 이상 운항편이 있는 도착지에 대한 항공편\nflights[dest_size > 10000]\n\n        year  month  day  dep_time  sched_dep_time  dep_delay  arr_time  \\\n2       2013      1    1    542.00             540       2.00    923.00   \n4       2013      1    1    554.00             600      -6.00    812.00   \n5       2013      1    1    554.00             558      -4.00    740.00   \n...      ...    ...  ...       ...             ...        ...       ...   \n336762  2013      9   30   2233.00            2113      80.00    112.00   \n336763  2013      9   30   2235.00            2001     154.00     59.00   \n336768  2013      9   30   2307.00            2255      12.00   2359.00   \n\n        sched_arr_time  arr_delay carrier  flight tailnum origin dest  \\\n2                  850      33.00      AA    1141  N619AA    JFK  MIA   \n4                  837     -25.00      DL     461  N668DN    LGA  ATL   \n5                  728      12.00      UA    1696  N39463    EWR  ORD   \n...                ...        ...     ...     ...     ...    ...  ...   \n336762              30      42.00      UA     471  N578UA    EWR  SFO   \n336763            2249     130.00      B6    1083  N804JB    JFK  MCO   \n336768            2358       1.00      B6     718  N565JB    JFK  BOS   \n\n        air_time  distance  hour  minute  \n2         160.00      1089     5      40  \n4         116.00       762     6       0  \n5         150.00       719     5      58  \n...          ...       ...   ...     ...  \n336762    318.00      2565    21      13  \n336763    123.00       944    20       1  \n336768     33.00       187    22      55  \n\n[131440 rows x 18 columns]\n\n\nQ: 하루 중 출발 지연이 가장 늦은 두 항공편들을 매일 각각 구하면,\n\ndef get_ranks(group):\n    return group.rank(ascending=False, method=\"min\") # method: 동일 등수에 대한 처리방식\n\n\ndelay_rank = flights.groupby([\"month\", \"day\"])[\"dep_delay\"].transform(get_ranks)\ndelay_rank\n\n0        302.00\n1        269.00\n2        302.00\n          ...  \n336773      NaN\n336774      NaN\n336775      NaN\nName: dep_delay, Length: 336776, dtype: float64\n\n\n\nflights[delay_rank < 3].head(6)\n\n      year  month  day  dep_time  sched_dep_time  dep_delay  arr_time  \\\n151   2013      1    1    848.00            1835     853.00   1001.00   \n834   2013      1    1   2343.00            1724     379.00    314.00   \n1440  2013      1    2   1607.00            1030     337.00   2003.00   \n1749  2013      1    2   2131.00            1512     379.00   2340.00   \n2598  2013      1    3   2008.00            1540     268.00   2339.00   \n2637  2013      1    3   2056.00            1605     291.00   2239.00   \n\n      sched_arr_time  arr_delay carrier  flight tailnum origin dest  air_time  \\\n151             1950     851.00      MQ    3944  N942MQ    JFK  BWI     41.00   \n834             1938     456.00      EV    4321  N21197    EWR  MCI    222.00   \n1440            1355     368.00      AA     179  N324AA    JFK  SFO    346.00   \n1749            1741     359.00      UA     488  N593UA    LGA  DEN    228.00   \n2598            1909     270.00      DL    2027  N338NW    JFK  FLL    158.00   \n2637            1754     285.00      9E    3459  N928XJ    JFK  BNA    125.00   \n\n      distance  hour  minute  \n151        184    18      35  \n834       1092    17      24  \n1440      2586    10      30  \n1749      1620    15      12  \n2598      1069    15      40  \n2637       765    16       5  \n\n\nQ: Normalize air time by destination\n\ndest_air = flights.groupby(\"dest\")[\"air_time\"]\n\n\n# Z = (x - mean) / std\n(flights['air_time'] - dest_air.transform('mean')) / dest_air.transform('std')\n\n0        1.73\n1        1.73\n2        0.61\n         ... \n336773    NaN\n336774    NaN\n336775    NaN\nName: air_time, Length: 336776, dtype: float64\n\n\n\ndef normalize(x):\n    return (x - x.mean()) / x.std()\n\n\ndest_air.transform(normalize)\n\n0        1.73\n1        1.73\n2        0.61\n         ... \n336773    NaN\n336774    NaN\n336775    NaN\nName: air_time, Length: 336776, dtype: float64\n\n\n\n\napply()\nApply: General split-apply-combine in McKineey’s Chapter 10.3 참고\n\nThe most general-purpose GroupBy method is apply, which is the subject of this section. apply splits the object being manipulated into pieces, invokes the passed function on each piece, and then attempts to concatenate the pieces.\n\n\ntips = sns.load_dataset(\"tips\")\ntips = tips.assign(tip_pct = lambda x: x.tip / x.total_bill)\ntips.head(3)\n\n   total_bill  tip     sex smoker  day    time  size  tip_pct\n0       16.99 1.01  Female     No  Sun  Dinner     2     0.06\n1       10.34 1.66    Male     No  Sun  Dinner     3     0.16\n2       21.01 3.50    Male     No  Sun  Dinner     3     0.17\n\n\n\ndef top(df, n=5, column=\"tip_pct\"):\n    return df.sort_values(column, ascending=False)[:n]\n\n\ntop(tips, n=4)\n\n     total_bill  tip     sex smoker  day    time  size  tip_pct\n172        7.25 5.15    Male    Yes  Sun  Dinner     2     0.71\n178        9.60 4.00  Female    Yes  Sun  Dinner     2     0.42\n67         3.07 1.00  Female    Yes  Sat  Dinner     1     0.33\n232       11.61 3.39    Male     No  Sat  Dinner     2     0.29\n\n\n\ntips.groupby(\"time\").apply(top)\n\n            total_bill  tip     sex smoker   day    time  size  tip_pct\ntime                                                                   \nLunch  149        7.51 2.00    Male     No  Thur   Lunch     2     0.27\n       221       13.42 3.48  Female    Yes   Fri   Lunch     2     0.26\n       194       16.58 4.00    Male    Yes  Thur   Lunch     2     0.24\n...                ...  ...     ...    ...   ...     ...   ...      ...\nDinner 67         3.07 1.00  Female    Yes   Sat  Dinner     1     0.33\n       232       11.61 3.39    Male     No   Sat  Dinner     2     0.29\n       183       23.17 6.50    Male    Yes   Sun  Dinner     4     0.28\n\n[10 rows x 8 columns]\n\n\n\ntips.groupby([\"time\", \"day\"]).apply(top, n=1, column=\"total_bill\")\n\n                 total_bill   tip     sex smoker   day    time  size  tip_pct\ntime   day                                                                   \nLunch  Thur 197       43.11  5.00  Female    Yes  Thur   Lunch     4     0.12\n       Fri  225       16.27  2.50  Female    Yes   Fri   Lunch     2     0.15\nDinner Thur 243       18.78  3.00  Female     No  Thur  Dinner     2     0.16\n       Fri  95        40.17  4.73    Male    Yes   Fri  Dinner     4     0.12\n       Sat  170       50.81 10.00    Male    Yes   Sat  Dinner     3     0.20\n       Sun  156       48.17  5.00    Male     No   Sun  Dinner     6     0.10\n\n\n\n\n\n\n\n\nImportant\n\n\n\nWhat occurs inside the function passed is up to you;\nit must either return a pandas object or a scalar value.\n\n\n\ntips.groupby(\"sex\")[\"tip_pct\"].describe()\n\n        count  mean  std  min  25%  50%  75%  max\nsex                                              \nMale   157.00  0.16 0.06 0.04 0.12 0.15 0.19 0.71\nFemale  87.00  0.17 0.05 0.06 0.14 0.16 0.19 0.42\n\n\nInside GroupBy, when you invoke a method like describe, it is actually just a shortcut for:\ndef f(group):\n    return group.describe()\n\n\n\n\n\n\nTip\n\n\n\nSuppressing the Group Keys\ntips.groupby(\"time\", group_keys=False).apply(top)\n#      total_bill  tip     sex smoker   day    time  size  tip_pct\n# 149        7.51 2.00    Male     No  Thur   Lunch     2     0.27\n# 221       13.42 3.48  Female    Yes   Fri   Lunch     2     0.26\n# 194       16.58 4.00    Male    Yes  Thur   Lunch     2     0.24\n# 88        24.71 5.85    Male     No  Thur   Lunch     2     0.24\n# 222        8.58 1.92    Male    Yes   Fri   Lunch     1     0.22\n# 172        7.25 5.15    Male    Yes   Sun  Dinner     2     0.71\n# 178        9.60 4.00  Female    Yes   Sun  Dinner     2     0.42\n# 67         3.07 1.00  Female    Yes   Sat  Dinner     1     0.33\n# 232       11.61 3.39    Male     No   Sat  Dinner     2     0.29\n# 183       23.17 6.50    Male    Yes   Sun  Dinner     4     0.28\n\n\n비교\n\napplymap: element-wise, DataFrame method\nmap: element-wise, Series method\napply: column/row-wise, DataFrame method, 또는 element-wise, Series method\n\n\nSource, 비교 참고\n\ndef my_format(x):\n    return f\"{x:.1f}\"\n\n\ntips_num = tips.select_dtypes(\"number\")\n\n\n# element-wise, DataFrame method\ntips_num.applymap(my_format)\n\n    total_bill  tip size tip_pct\n0         17.0  1.0  2.0     0.1\n1         10.3  1.7  3.0     0.2\n2         21.0  3.5  3.0     0.2\n..         ...  ...  ...     ...\n241       22.7  2.0  2.0     0.1\n242       17.8  1.8  2.0     0.1\n243       18.8  3.0  2.0     0.2\n\n[244 rows x 4 columns]\n\n\n\n# element-wise, Series method\ntips[\"tip\"].map(my_format)\n\n0      1.0\n1      1.7\n2      3.5\n      ... \n241    2.0\n242    1.8\n243    3.0\nName: tip, Length: 244, dtype: object\n\n\n\ndef peak_to_peak(arr):\n    return arr.max() - arr.min()\n\n\n# column-wise operation\ntips_num.apply(peak_to_peak)\n\ntotal_bill   47.74\ntip           9.00\nsize          5.00\ntip_pct       0.67\ndtype: float64\n\n\n\n# row-wise operation\ntips_num.apply(peak_to_peak, axis=\"columns\")\n\n0     16.93\n1     10.18\n2     20.84\n       ... \n241   22.58\n242   17.72\n243   18.62\nLength: 244, dtype: float64\n\n\n\ndef f2(x):\n    return pd.Series([x.min(), x.max()], index=[\"min\", \"max\"])\n\n\n# apply에 패스되는 함수는 scalar 값이 아닌 Series를 반환해도 됨\ntips_num.apply(f2)\n\n     total_bill   tip  size  tip_pct\nmin        3.07  1.00     1     0.04\nmax       50.81 10.00     6     0.71\n\n\n\n# Series Groupby object의 경우\ntips.groupby(\"time\")[\"tip\"].apply(f2)\n\ntime       \nLunch   min    1.25\n        max    6.70\nDinner  min    1.00\n        max   10.00\nName: tip, dtype: float64\n\n\n\n# DataFrame GroupBy object의 경우\ndef f3(g):\n    x = g[\"tip\"]\n    return pd.Series([x.min(), x.max()], index=[\"min\", \"max\"])\n\ntips.groupby(\"time\").apply(f3)\n\n        min   max\ntime             \nLunch  1.25  6.70\nDinner 1.00 10.00"
  },
  {
    "objectID": "contents/views.html",
    "href": "contents/views.html",
    "title": "Views and Copies",
    "section": "",
    "text": "Load Packages\n# numerical calculation & data frames\nimport numpy as np\nimport pandas as pd\nWhat’s new in 2.0.0 (April 3, 2023)\n아래와 같이 copy_on_write을 적용하여 쓰는 것을 추천\n밑의 내용은 이전 버전의 내용이니 참고만 하세요."
  },
  {
    "objectID": "contents/views.html#numpy",
    "href": "contents/views.html#numpy",
    "title": "Views and Copies",
    "section": "NumPy",
    "text": "NumPy\nNumPy에서 subsetting을 하는 경우 view로 나타날 수 있음.\n속도와 메모리의 효율적 관리가 가능하나 혼동의 여지 있음.\n\narr = np.array([1, 2, 3, 4, 5])\narr\n\narray([1, 2, 3, 4, 5])\n\n\n\nsub_arr = arr[1:3]\nsub_arr # view\n\narray([2, 3])\n\n\nSubset을 수정하면\n\nsub_arr[0] = 99\n\n\nprint(arr)\nprint(sub_arr)\n\n[ 1 99  3  4  5]\n[99  3]\n\n\n반대로 “original” arr를 수정하도\n\narr[2] = -11\n\n\nprint(arr)\nprint(sub_arr)\n\n[  1  99 -11   4   5]\n[ 99 -11]\n\n\n사실, arr, sub_arr는 같은 메모리 주소를 reference함\n\n\n\n\n\n\nNote\n\n\n\nView가 되지 않고 copy로 되는 경우가 있음.\nSimple indexing을 제외하면 copy가 된다고 보면 됨\n즉, arr[2] 또는 arr[2:4] 같은 경우는 view로, 그 이외에 integer array로 subsetting을 하거나 (fancy indexing); arr[[2, 3]], 또는 boolean indexing; arr[arr > 2]의 경우 copy가 됨\n\n\n\narr = np.array([1, 2, 3, 4, 5])\n\n\nsub_arr = arr[[2, 3]] # copy\nsub_arr[0] = 99\n\n\nprint(arr)\nprint(sub_arr)\n\n[1 2 3 4 5]\n[99  4]\n\n\n\nsub_arr = arr[arr > 2] # copy\nsub_arr[0] = 99\n\n\nprint(arr)\nprint(sub_arr)\n\n[1 2 3 4 5]\n[99  4  5]\n\n\n\n\n\n\n\n\nNote\n\n\n\nAssign operator의 왼편에 [:] 없이, view에서 수정된 array를 assign하면 copy로 전달\n\n\n\narr = np.array([1, 2, 3, 4, 5])\n\n\nsub_arr = arr[1:4] # view\nsub_arr = sub_arr * 2 # copy\n\n\nprint(arr)\nprint(sub_arr)\n\n[1 2 3 4 5]\n[4 6 8]\n\n\n\narr = np.array([1, 2, 3, 4, 5])\n\n\nsub_arr = arr[1:4] # view\nsub_arr[:] = sub_arr * 2 # view\n\n\nprint(arr)\nprint(sub_arr)\n\n[1 4 6 8 5]\n[4 6 8]\n\n\n강제로 copy: sub_arr.copy()"
  },
  {
    "objectID": "contents/views.html#pandas",
    "href": "contents/views.html#pandas",
    "title": "Views and Copies",
    "section": "pandas",
    "text": "pandas\n훨씬 복잡함…\n데이터 타입도 데이터가 어떻게 만들어졌는지도 관계가 있음.\n\ndf = pd.DataFrame(np.arange(8).reshape(4, 2), columns=[\"one\", \"two\"])\ndf\n\n   one  two\n0    0    1\n1    2    3\n2    4    5\n3    6    7\n\n\n\nsub_df = df.iloc[1:3] # view\nsub_df\n\n   one  two\n1    2    3\n2    4    5\n\n\n\ndf.iloc[1, 1] = 99\n\n\nprint(df)\nprint(sub_df)\n\n   one  two\n0    0    1\n1    2   99\n2    4    5\n3    6    7\n   one  two\n1    2   99\n2    4    5\n\n\n\ndf.iloc[1, 0] = 0.9 # copy\n\n\nprint(df)\nprint(sub_df)\n\n   one  two\n0  0.0    1\n1  0.9   99\n2  4.0    5\n3  6.0    7\n   one  two\n1    2   99\n2    4    5\n\n\n\ndf.iloc[2, 1] = -99\n\n\nprint(df)\nprint(sub_df)\n\n   one  two\n0  0.0    1\n1  0.9   99\n2  4.0  -99\n3  6.0    7\n   one  two\n1    2   99\n2    4    5\n\n\n\nSettingWithCopyWarning\nSubsetting된 DataFrame을 수정하려할 때 경고를 내어주지만, 항상 믿을만 한 것은 아님.\n경고가 발생할 시, 앞 어디에선가 view나 copy가 이루어진 곳을 찾아 .copy()로 수정\n\ndf = pd.DataFrame(np.arange(12).reshape(4, 3), columns=[\"one\", \"two\", \"three\"])\ndf\n\n   one  two  three\n0    0    1      2\n1    3    4      5\n2    6    7      8\n3    9   10     11\n\n\n\ndf_cols = df[[\"two\", \"three\"]] # copy\ndf_cols\n\n   two  three\n0    1      2\n1    4      5\n2    7      8\n3   10     11\n\n\n\ndf.iloc[0, 1] = -55\n\n\nprint(df)\nprint(df_cols)\n\n   one  two  three\n0    0  -55      2\n1    3    4      5\n2    6    7      8\n3    9   10     11\n   two  three\n0    1      2\n1    4      5\n2    7      8\n3   10     11\n\n\nSubset을 수정하려하면 warning message!\n\ndf_cols.iloc[0, 1] = -99\n\n/var/folders/mp/vcywncl97ml2q4c_5k2r573m0000gn/T/ipykernel_95502/2609376290.py:1: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  df_cols.iloc[0, 1] = -99\n\n\n\nprint(df_cols)\nprint(df)\n\n   two  three\n0    1    -99\n1    4      5\n2    7      8\n3   10     11\n   one  two  three\n0    0  -55      2\n1    3    4      5\n2    6    7      8\n3    9   10     11\n\n\n다음과 비교\n\ndf = pd.DataFrame(np.arange(12).reshape(4, 3), columns=[\"one\", \"two\", \"three\"])\ndf\n\n   one  two  three\n0    0    1      2\n1    3    4      5\n2    6    7      8\n3    9   10     11\n\n\n\ndf_cols_3 = df.loc[:, [\"two\", \"three\"]] # copy\ndf_cols_3.iloc[0, 1] = -99\n\n# No warning\n\n\nprint(df_cols_3)\nprint(df)\n\n   two  three\n0    1    -99\n1    4      5\n2    7      8\n3   10     11\n   one  two  three\n0    0    1      2\n1    3    4      5\n2    6    7      8\n3    9   10     11\n\n\n\ndf = pd.DataFrame(np.arange(12).reshape(4, 3), columns=[\"one\", \"two\", \"three\"])\ndf\n\n   one  two  three\n0    0    1      2\n1    3    4      5\n2    6    7      8\n3    9   10     11\n\n\n\ndf_cols_2 = df.loc[:, \"two\":\"three\"] # view\ndf_cols_2.iloc[0, 1] = -99\n\n/var/folders/mp/vcywncl97ml2q4c_5k2r573m0000gn/T/ipykernel_95502/2559386572.py:2: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  df_cols_2.iloc[0, 1] = -99\n\n\n\nprint(df_cols_2)\nprint(df)\n\n   two  three\n0    1    -99\n1    4      5\n2    7      8\n3   10     11\n   one  two  three\n0    0    1    -99\n1    3    4      5\n2    6    7      8\n3    9   10     11\n\n\n강제로 copy: df_cols.copy()\n\ndf_cols_4 = df[[\"two\", \"three\"]].copy()\ndf_cols_4.iloc[0, 1] = -99\n\n\n\n\n\n\n\nTip\n\n\n\nSubset을 만들고 바로 분석을 할 것이 아니라면, 안전하게 .copy()를 쓰는 것을 추천\n\n\n\nWhat’s new in 2.0.0 (April 3, 2023)\nArgument dtype_backend, to return pyarrow-backed or numpy-backed nullable dtypes\nCopy-on-Write improvements: link\npd.set_option(\"mode.copy_on_write\", True)\n# or\npd.options.mode.copy_on_write = True"
  },
  {
    "objectID": "contents/vis.html",
    "href": "contents/vis.html",
    "title": "Data Visualization",
    "section": "",
    "text": "Python의 시각화 라이브러리는 다양하게 개발되어지고 있으며, 각기 특성이 달라 하나로만 쓰기 어려운 상황임\nR의 ggplot2라는 매우 강력한 시각화 도구와 비교하면 이에 상응할 만한 Python 시각화 도구는 찾기 어려움\n\n\n\nMatplotlib\n가장 오래된 Python과 잘 통합된 널리 사용되는 라이브러리\n거의 가능한 모든 플랏을 그릴 수 있음\n한편, 디테일한 부분을 모두 specify해야 함으로써 많은 코딩이 요구되며, interactive 또는 web graphs에 취약함\npandas\nMatplotlib로 구현된 DataFrame의 method로 간략하게 시각화가 가능하며, 빠르게 데이터를 들여다볼 수 있음\nSeaborn & the seaborn.objects interface\nMatplotlib 위에 개발된 간결한 문법의 high-level 언어\nDecalative: 변수들이 어떤 시각화 속성과 위치를 지니는지만 specify\n“Grammer of graphics”라는 시각화 문법에 충실하고자 the seaborn.objects로 새롭게 변화 중\n\n\n\nAltair\n“Grammer of graphics”를 충실히 따라 설계됨\n각 plot이 이미지가 아닌 data + specification으로 이루어짐: 이미지가 저장되지 않고, 브라우저에서 이미지로 complie되어 생성됨\nWeb-based interactive 시각화인 D3에 그 모체를 두며, Vega/Vega-Lite로부터 파생됨\njavascript-based로 interactive 시각화에 용이하나 Python과 연계가 부족한 부분이 있고, 개발이 더딘 듯\nBokeh\nPlotly\n다양한 언어(R, Python, Julia)을 지원하며, 기업 수준의 상용화 제품들도 있으며, 지원군 많음\n\n\nJake VanderPlas의 2017년 발표 자료 중: The Python Visualization Landscape\n\nSource: Jake VanderPlas - The Python Visualization Landscape PyCon 2017"
  },
  {
    "objectID": "contents/vis.html#the-grammer-of-graphics",
    "href": "contents/vis.html#the-grammer-of-graphics",
    "title": "Data Visualization",
    "section": "The Grammer of Graphics",
    "text": "The Grammer of Graphics\nA coherent system for describing and building graphs\nSource: Fundamentals of Data Visualization by Claus O. Wilke\nAesthetics and types of data\n\n데이터의 값을 특정 aesthetics에 mapping\n\n데이터의 타입은 다음과 같이 나누어짐\n\ncontinuous / discrete\nquatitative / qualitative\ncategorical unordered (nominal) / categorical ordered (ordinal)\n\n성별, 지역 / 등급, 랭킹\nordinal: 등간격을 가정\n\n퀄리티 good, fair, poor는 등간격이라고 봐야하는가?\n랭킹은?\n선호도 1, 2, …, 8; continuous?\n임금 구간?\n\n\n\n데이터 타입에 따라 좀 더 적절한 aesthetic mapping이 있으며,\n같은 정보를 품고 있는 시각화라도 더 적절한 representation이 존재\nBertin’s Semiology of Graphics (1967)\nLevels of organization\n\nSource: Jake VanderPlas’ presentation at PyCon 2018\n\nCase 1\n예를 들어, 다음과 같이 1) 지역별로 2) 날짜에 따른 3) 온도의 변화를 나타낸다면,\n즉, x축의 위치에 날짜 정보를, y축의 위치에 온도 정보를, 색깔에 지역 정보를 할당했음.\n\n한편, 아래는 x축의 위치에 압축된 날짜 정보를, y축의 위치에 지역 정보를, 색깔에 압축된 온도 정보를 할당했음.\n\n\n\nCase 2\n다음은 GDP, mortality, population, region의 네 정보를 다른 방식으로 mapping한 결과임."
  },
  {
    "objectID": "contents/vis.html#탐색적-exploratory-vs.-정보전달-communicative",
    "href": "contents/vis.html#탐색적-exploratory-vs.-정보전달-communicative",
    "title": "Data Visualization",
    "section": "탐색적 (Exploratory) vs. 정보전달 (Communicative)",
    "text": "탐색적 (Exploratory) vs. 정보전달 (Communicative)"
  },
  {
    "objectID": "contents/vis.html#interative-plots",
    "href": "contents/vis.html#interative-plots",
    "title": "Data Visualization",
    "section": "Interative Plots",
    "text": "Interative Plots\nAltair\n\n\n\n\n\n\n\nPlotly"
  }
]